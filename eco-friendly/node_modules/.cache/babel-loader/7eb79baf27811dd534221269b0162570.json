{"ast":null,"code":"import { padStart, roundTo, hasRelative } from \"./util.js\";\nimport * as English from \"./english.js\";\nimport Settings from \"../settings.js\";\nimport DateTime from \"../datetime.js\";\nimport IANAZone from \"../zones/IANAZone.js\"; // todo - remap caching\n\nlet intlLFCache = {};\n\nfunction getCachedLF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlLFCache[key];\n\n  if (!dtf) {\n    dtf = new Intl.ListFormat(locString, opts);\n    intlLFCache[key] = dtf;\n  }\n\n  return dtf;\n}\n\nlet intlDTCache = {};\n\nfunction getCachedDTF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlDTCache[key];\n\n  if (!dtf) {\n    dtf = new Intl.DateTimeFormat(locString, opts);\n    intlDTCache[key] = dtf;\n  }\n\n  return dtf;\n}\n\nlet intlNumCache = {};\n\nfunction getCachedINF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let inf = intlNumCache[key];\n\n  if (!inf) {\n    inf = new Intl.NumberFormat(locString, opts);\n    intlNumCache[key] = inf;\n  }\n\n  return inf;\n}\n\nlet intlRelCache = {};\n\nfunction getCachedRTF(locString, opts = {}) {\n  const {\n    base,\n    ...cacheKeyOpts\n  } = opts; // exclude `base` from the options\n\n  const key = JSON.stringify([locString, cacheKeyOpts]);\n  let inf = intlRelCache[key];\n\n  if (!inf) {\n    inf = new Intl.RelativeTimeFormat(locString, opts);\n    intlRelCache[key] = inf;\n  }\n\n  return inf;\n}\n\nlet sysLocaleCache = null;\n\nfunction systemLocale() {\n  if (sysLocaleCache) {\n    return sysLocaleCache;\n  } else {\n    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;\n    return sysLocaleCache;\n  }\n}\n\nfunction parseLocaleString(localeStr) {\n  // I really want to avoid writing a BCP 47 parser\n  // see, e.g. https://github.com/wooorm/bcp-47\n  // Instead, we'll do this:\n  // a) if the string has no -u extensions, just leave it alone\n  // b) if it does, use Intl to resolve everything\n  // c) if Intl fails, try again without the -u\n  const uIndex = localeStr.indexOf(\"-u-\");\n\n  if (uIndex === -1) {\n    return [localeStr];\n  } else {\n    let options;\n    const smaller = localeStr.substring(0, uIndex);\n\n    try {\n      options = getCachedDTF(localeStr).resolvedOptions();\n    } catch (e) {\n      options = getCachedDTF(smaller).resolvedOptions();\n    }\n\n    const {\n      numberingSystem,\n      calendar\n    } = options; // return the smaller one so that we can append the calendar and numbering overrides to it\n\n    return [smaller, numberingSystem, calendar];\n  }\n}\n\nfunction intlConfigString(localeStr, numberingSystem, outputCalendar) {\n  if (outputCalendar || numberingSystem) {\n    localeStr += \"-u\";\n\n    if (outputCalendar) {\n      localeStr += `-ca-${outputCalendar}`;\n    }\n\n    if (numberingSystem) {\n      localeStr += `-nu-${numberingSystem}`;\n    }\n\n    return localeStr;\n  } else {\n    return localeStr;\n  }\n}\n\nfunction mapMonths(f) {\n  const ms = [];\n\n  for (let i = 1; i <= 12; i++) {\n    const dt = DateTime.utc(2016, i, 1);\n    ms.push(f(dt));\n  }\n\n  return ms;\n}\n\nfunction mapWeekdays(f) {\n  const ms = [];\n\n  for (let i = 1; i <= 7; i++) {\n    const dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n\n  return ms;\n}\n\nfunction listStuff(loc, length, defaultOK, englishFn, intlFn) {\n  const mode = loc.listingMode(defaultOK);\n\n  if (mode === \"error\") {\n    return null;\n  } else if (mode === \"en\") {\n    return englishFn(length);\n  } else {\n    return intlFn(length);\n  }\n}\n\nfunction supportsFastNumbers(loc) {\n  if (loc.numberingSystem && loc.numberingSystem !== \"latn\") {\n    return false;\n  } else {\n    return loc.numberingSystem === \"latn\" || !loc.locale || loc.locale.startsWith(\"en\") || new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === \"latn\";\n  }\n}\n/**\n * @private\n */\n\n\nclass PolyNumberFormatter {\n  constructor(intl, forceSimple, opts) {\n    this.padTo = opts.padTo || 0;\n    this.floor = opts.floor || false;\n    const {\n      padTo,\n      floor,\n      ...otherOpts\n    } = opts;\n\n    if (!forceSimple || Object.keys(otherOpts).length > 0) {\n      const intlOpts = {\n        useGrouping: false,\n        ...opts\n      };\n      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;\n      this.inf = getCachedINF(intl, intlOpts);\n    }\n  }\n\n  format(i) {\n    if (this.inf) {\n      const fixed = this.floor ? Math.floor(i) : i;\n      return this.inf.format(fixed);\n    } else {\n      // to match the browser's numberformatter defaults\n      const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);\n      return padStart(fixed, this.padTo);\n    }\n  }\n\n}\n/**\n * @private\n */\n\n\nclass PolyDateFormatter {\n  constructor(dt, intl, opts) {\n    this.opts = opts;\n    let z;\n\n    if (dt.zone.isUniversal) {\n      // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.\n      // That is why fixed-offset TZ is set to that unless it is:\n      // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.\n      // 2. Unsupported by the browser:\n      //    - some do not support Etc/\n      //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata\n      const gmtOffset = -1 * (dt.offset / 60);\n      const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;\n\n      if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {\n        z = offsetZ;\n        this.dt = dt;\n      } else {\n        // Not all fixed-offset zones like Etc/+4:30 are present in tzdata.\n        // So we have to make do. Two cases:\n        // 1. The format options tell us to show the zone. We can't do that, so the best\n        // we can do is format the date in UTC.\n        // 2. The format options don't tell us to show the zone. Then we can adjust them\n        // the time and tell the formatter to show it to us in UTC, so that the time is right\n        // and the bad zone doesn't show up.\n        z = \"UTC\";\n\n        if (opts.timeZoneName) {\n          this.dt = dt;\n        } else {\n          this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1000);\n        }\n      }\n    } else if (dt.zone.type === \"system\") {\n      this.dt = dt;\n    } else {\n      this.dt = dt;\n      z = dt.zone.name;\n    }\n\n    const intlOpts = { ...this.opts\n    };\n\n    if (z) {\n      intlOpts.timeZone = z;\n    }\n\n    this.dtf = getCachedDTF(intl, intlOpts);\n  }\n\n  format() {\n    return this.dtf.format(this.dt.toJSDate());\n  }\n\n  formatToParts() {\n    return this.dtf.formatToParts(this.dt.toJSDate());\n  }\n\n  resolvedOptions() {\n    return this.dtf.resolvedOptions();\n  }\n\n}\n/**\n * @private\n */\n\n\nclass PolyRelFormatter {\n  constructor(intl, isEnglish, opts) {\n    this.opts = {\n      style: \"long\",\n      ...opts\n    };\n\n    if (!isEnglish && hasRelative()) {\n      this.rtf = getCachedRTF(intl, opts);\n    }\n  }\n\n  format(count, unit) {\n    if (this.rtf) {\n      return this.rtf.format(count, unit);\n    } else {\n      return English.formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== \"long\");\n    }\n  }\n\n  formatToParts(count, unit) {\n    if (this.rtf) {\n      return this.rtf.formatToParts(count, unit);\n    } else {\n      return [];\n    }\n  }\n\n}\n/**\n * @private\n */\n\n\nexport default class Locale {\n  static fromOpts(opts) {\n    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);\n  }\n\n  static create(locale, numberingSystem, outputCalendar, defaultToEN = false) {\n    const specifiedLocale = locale || Settings.defaultLocale; // the system locale is useful for human readable strings but annoying for parsing/formatting known formats\n\n    const localeR = specifiedLocale || (defaultToEN ? \"en-US\" : systemLocale());\n    const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;\n    const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;\n    return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);\n  }\n\n  static resetCache() {\n    sysLocaleCache = null;\n    intlDTCache = {};\n    intlNumCache = {};\n    intlRelCache = {};\n  }\n\n  static fromObject({\n    locale,\n    numberingSystem,\n    outputCalendar\n  } = {}) {\n    return Locale.create(locale, numberingSystem, outputCalendar);\n  }\n\n  constructor(locale, numbering, outputCalendar, specifiedLocale) {\n    const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);\n    this.locale = parsedLocale;\n    this.numberingSystem = numbering || parsedNumberingSystem || null;\n    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;\n    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);\n    this.weekdaysCache = {\n      format: {},\n      standalone: {}\n    };\n    this.monthsCache = {\n      format: {},\n      standalone: {}\n    };\n    this.meridiemCache = null;\n    this.eraCache = {};\n    this.specifiedLocale = specifiedLocale;\n    this.fastNumbersCached = null;\n  }\n\n  get fastNumbers() {\n    if (this.fastNumbersCached == null) {\n      this.fastNumbersCached = supportsFastNumbers(this);\n    }\n\n    return this.fastNumbersCached;\n  }\n\n  listingMode() {\n    const isActuallyEn = this.isEnglish();\n    const hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === \"latn\") && (this.outputCalendar === null || this.outputCalendar === \"gregory\");\n    return isActuallyEn && hasNoWeirdness ? \"en\" : \"intl\";\n  }\n\n  clone(alts) {\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n      return this;\n    } else {\n      return Locale.create(alts.locale || this.specifiedLocale, alts.numberingSystem || this.numberingSystem, alts.outputCalendar || this.outputCalendar, alts.defaultToEN || false);\n    }\n  }\n\n  redefaultToEN(alts = {}) {\n    return this.clone({ ...alts,\n      defaultToEN: true\n    });\n  }\n\n  redefaultToSystem(alts = {}) {\n    return this.clone({ ...alts,\n      defaultToEN: false\n    });\n  }\n\n  months(length, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.months, () => {\n      const intl = format ? {\n        month: length,\n        day: \"numeric\"\n      } : {\n        month: length\n      },\n            formatStr = format ? \"format\" : \"standalone\";\n\n      if (!this.monthsCache[formatStr][length]) {\n        this.monthsCache[formatStr][length] = mapMonths(dt => this.extract(dt, intl, \"month\"));\n      }\n\n      return this.monthsCache[formatStr][length];\n    });\n  }\n\n  weekdays(length, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.weekdays, () => {\n      const intl = format ? {\n        weekday: length,\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\"\n      } : {\n        weekday: length\n      },\n            formatStr = format ? \"format\" : \"standalone\";\n\n      if (!this.weekdaysCache[formatStr][length]) {\n        this.weekdaysCache[formatStr][length] = mapWeekdays(dt => this.extract(dt, intl, \"weekday\"));\n      }\n\n      return this.weekdaysCache[formatStr][length];\n    });\n  }\n\n  meridiems(defaultOK = true) {\n    return listStuff(this, undefined, defaultOK, () => English.meridiems, () => {\n      // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n      // for AM and PM. This is probably wrong, but it's makes parsing way easier.\n      if (!this.meridiemCache) {\n        const intl = {\n          hour: \"numeric\",\n          hourCycle: \"h12\"\n        };\n        this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(dt => this.extract(dt, intl, \"dayperiod\"));\n      }\n\n      return this.meridiemCache;\n    });\n  }\n\n  eras(length, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.eras, () => {\n      const intl = {\n        era: length\n      }; // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n      // to definitely enumerate them.\n\n      if (!this.eraCache[length]) {\n        this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(dt => this.extract(dt, intl, \"era\"));\n      }\n\n      return this.eraCache[length];\n    });\n  }\n\n  extract(dt, intlOpts, field) {\n    const df = this.dtFormatter(dt, intlOpts),\n          results = df.formatToParts(),\n          matching = results.find(m => m.type.toLowerCase() === field);\n    return matching ? matching.value : null;\n  }\n\n  numberFormatter(opts = {}) {\n    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)\n    // (in contrast, the rest of the condition is used heavily)\n    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);\n  }\n\n  dtFormatter(dt, intlOpts = {}) {\n    return new PolyDateFormatter(dt, this.intl, intlOpts);\n  }\n\n  relFormatter(opts = {}) {\n    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);\n  }\n\n  listFormatter(opts = {}) {\n    return getCachedLF(this.intl, opts);\n  }\n\n  isEnglish() {\n    return this.locale === \"en\" || this.locale.toLowerCase() === \"en-us\" || new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith(\"en-us\");\n  }\n\n  equals(other) {\n    return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;\n  }\n\n}","map":{"version":3,"names":["padStart","roundTo","hasRelative","English","Settings","DateTime","IANAZone","intlLFCache","getCachedLF","locString","opts","key","JSON","stringify","dtf","Intl","ListFormat","intlDTCache","getCachedDTF","DateTimeFormat","intlNumCache","getCachedINF","inf","NumberFormat","intlRelCache","getCachedRTF","base","cacheKeyOpts","RelativeTimeFormat","sysLocaleCache","systemLocale","resolvedOptions","locale","parseLocaleString","localeStr","uIndex","indexOf","options","smaller","substring","e","numberingSystem","calendar","intlConfigString","outputCalendar","mapMonths","f","ms","i","dt","utc","push","mapWeekdays","listStuff","loc","length","defaultOK","englishFn","intlFn","mode","listingMode","supportsFastNumbers","startsWith","intl","PolyNumberFormatter","constructor","forceSimple","padTo","floor","otherOpts","Object","keys","intlOpts","useGrouping","minimumIntegerDigits","format","fixed","Math","PolyDateFormatter","z","zone","isUniversal","gmtOffset","offset","offsetZ","create","valid","timeZoneName","fromMillis","ts","type","name","timeZone","toJSDate","formatToParts","PolyRelFormatter","isEnglish","style","rtf","count","unit","formatRelativeTime","numeric","Locale","fromOpts","defaultToEN","specifiedLocale","defaultLocale","localeR","numberingSystemR","defaultNumberingSystem","outputCalendarR","defaultOutputCalendar","resetCache","fromObject","numbering","parsedLocale","parsedNumberingSystem","parsedOutputCalendar","weekdaysCache","standalone","monthsCache","meridiemCache","eraCache","fastNumbersCached","fastNumbers","isActuallyEn","hasNoWeirdness","clone","alts","getOwnPropertyNames","redefaultToEN","redefaultToSystem","months","month","day","formatStr","extract","weekdays","weekday","year","meridiems","undefined","hour","hourCycle","map","eras","era","field","df","dtFormatter","results","matching","find","m","toLowerCase","value","numberFormatter","relFormatter","listFormatter","equals","other"],"sources":["E:/各个学科/论文/毕业论文/Atmosphere/eco-friendly/node_modules/luxon/src/impl/locale.js"],"sourcesContent":["import { padStart, roundTo, hasRelative } from \"./util.js\";\nimport * as English from \"./english.js\";\nimport Settings from \"../settings.js\";\nimport DateTime from \"../datetime.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\n\n// todo - remap caching\n\nlet intlLFCache = {};\nfunction getCachedLF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlLFCache[key];\n  if (!dtf) {\n    dtf = new Intl.ListFormat(locString, opts);\n    intlLFCache[key] = dtf;\n  }\n  return dtf;\n}\n\nlet intlDTCache = {};\nfunction getCachedDTF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlDTCache[key];\n  if (!dtf) {\n    dtf = new Intl.DateTimeFormat(locString, opts);\n    intlDTCache[key] = dtf;\n  }\n  return dtf;\n}\n\nlet intlNumCache = {};\nfunction getCachedINF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let inf = intlNumCache[key];\n  if (!inf) {\n    inf = new Intl.NumberFormat(locString, opts);\n    intlNumCache[key] = inf;\n  }\n  return inf;\n}\n\nlet intlRelCache = {};\nfunction getCachedRTF(locString, opts = {}) {\n  const { base, ...cacheKeyOpts } = opts; // exclude `base` from the options\n  const key = JSON.stringify([locString, cacheKeyOpts]);\n  let inf = intlRelCache[key];\n  if (!inf) {\n    inf = new Intl.RelativeTimeFormat(locString, opts);\n    intlRelCache[key] = inf;\n  }\n  return inf;\n}\n\nlet sysLocaleCache = null;\nfunction systemLocale() {\n  if (sysLocaleCache) {\n    return sysLocaleCache;\n  } else {\n    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;\n    return sysLocaleCache;\n  }\n}\n\nfunction parseLocaleString(localeStr) {\n  // I really want to avoid writing a BCP 47 parser\n  // see, e.g. https://github.com/wooorm/bcp-47\n  // Instead, we'll do this:\n\n  // a) if the string has no -u extensions, just leave it alone\n  // b) if it does, use Intl to resolve everything\n  // c) if Intl fails, try again without the -u\n\n  const uIndex = localeStr.indexOf(\"-u-\");\n  if (uIndex === -1) {\n    return [localeStr];\n  } else {\n    let options;\n    const smaller = localeStr.substring(0, uIndex);\n    try {\n      options = getCachedDTF(localeStr).resolvedOptions();\n    } catch (e) {\n      options = getCachedDTF(smaller).resolvedOptions();\n    }\n\n    const { numberingSystem, calendar } = options;\n    // return the smaller one so that we can append the calendar and numbering overrides to it\n    return [smaller, numberingSystem, calendar];\n  }\n}\n\nfunction intlConfigString(localeStr, numberingSystem, outputCalendar) {\n  if (outputCalendar || numberingSystem) {\n    localeStr += \"-u\";\n\n    if (outputCalendar) {\n      localeStr += `-ca-${outputCalendar}`;\n    }\n\n    if (numberingSystem) {\n      localeStr += `-nu-${numberingSystem}`;\n    }\n    return localeStr;\n  } else {\n    return localeStr;\n  }\n}\n\nfunction mapMonths(f) {\n  const ms = [];\n  for (let i = 1; i <= 12; i++) {\n    const dt = DateTime.utc(2016, i, 1);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction mapWeekdays(f) {\n  const ms = [];\n  for (let i = 1; i <= 7; i++) {\n    const dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction listStuff(loc, length, defaultOK, englishFn, intlFn) {\n  const mode = loc.listingMode(defaultOK);\n\n  if (mode === \"error\") {\n    return null;\n  } else if (mode === \"en\") {\n    return englishFn(length);\n  } else {\n    return intlFn(length);\n  }\n}\n\nfunction supportsFastNumbers(loc) {\n  if (loc.numberingSystem && loc.numberingSystem !== \"latn\") {\n    return false;\n  } else {\n    return (\n      loc.numberingSystem === \"latn\" ||\n      !loc.locale ||\n      loc.locale.startsWith(\"en\") ||\n      new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === \"latn\"\n    );\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyNumberFormatter {\n  constructor(intl, forceSimple, opts) {\n    this.padTo = opts.padTo || 0;\n    this.floor = opts.floor || false;\n\n    const { padTo, floor, ...otherOpts } = opts;\n\n    if (!forceSimple || Object.keys(otherOpts).length > 0) {\n      const intlOpts = { useGrouping: false, ...opts };\n      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;\n      this.inf = getCachedINF(intl, intlOpts);\n    }\n  }\n\n  format(i) {\n    if (this.inf) {\n      const fixed = this.floor ? Math.floor(i) : i;\n      return this.inf.format(fixed);\n    } else {\n      // to match the browser's numberformatter defaults\n      const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);\n      return padStart(fixed, this.padTo);\n    }\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyDateFormatter {\n  constructor(dt, intl, opts) {\n    this.opts = opts;\n\n    let z;\n    if (dt.zone.isUniversal) {\n      // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.\n      // That is why fixed-offset TZ is set to that unless it is:\n      // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.\n      // 2. Unsupported by the browser:\n      //    - some do not support Etc/\n      //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata\n      const gmtOffset = -1 * (dt.offset / 60);\n      const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;\n      if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {\n        z = offsetZ;\n        this.dt = dt;\n      } else {\n        // Not all fixed-offset zones like Etc/+4:30 are present in tzdata.\n        // So we have to make do. Two cases:\n        // 1. The format options tell us to show the zone. We can't do that, so the best\n        // we can do is format the date in UTC.\n        // 2. The format options don't tell us to show the zone. Then we can adjust them\n        // the time and tell the formatter to show it to us in UTC, so that the time is right\n        // and the bad zone doesn't show up.\n        z = \"UTC\";\n        if (opts.timeZoneName) {\n          this.dt = dt;\n        } else {\n          this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1000);\n        }\n      }\n    } else if (dt.zone.type === \"system\") {\n      this.dt = dt;\n    } else {\n      this.dt = dt;\n      z = dt.zone.name;\n    }\n\n    const intlOpts = { ...this.opts };\n    if (z) {\n      intlOpts.timeZone = z;\n    }\n    this.dtf = getCachedDTF(intl, intlOpts);\n  }\n\n  format() {\n    return this.dtf.format(this.dt.toJSDate());\n  }\n\n  formatToParts() {\n    return this.dtf.formatToParts(this.dt.toJSDate());\n  }\n\n  resolvedOptions() {\n    return this.dtf.resolvedOptions();\n  }\n}\n\n/**\n * @private\n */\nclass PolyRelFormatter {\n  constructor(intl, isEnglish, opts) {\n    this.opts = { style: \"long\", ...opts };\n    if (!isEnglish && hasRelative()) {\n      this.rtf = getCachedRTF(intl, opts);\n    }\n  }\n\n  format(count, unit) {\n    if (this.rtf) {\n      return this.rtf.format(count, unit);\n    } else {\n      return English.formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== \"long\");\n    }\n  }\n\n  formatToParts(count, unit) {\n    if (this.rtf) {\n      return this.rtf.formatToParts(count, unit);\n    } else {\n      return [];\n    }\n  }\n}\n\n/**\n * @private\n */\n\nexport default class Locale {\n  static fromOpts(opts) {\n    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);\n  }\n\n  static create(locale, numberingSystem, outputCalendar, defaultToEN = false) {\n    const specifiedLocale = locale || Settings.defaultLocale;\n    // the system locale is useful for human readable strings but annoying for parsing/formatting known formats\n    const localeR = specifiedLocale || (defaultToEN ? \"en-US\" : systemLocale());\n    const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;\n    const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;\n    return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);\n  }\n\n  static resetCache() {\n    sysLocaleCache = null;\n    intlDTCache = {};\n    intlNumCache = {};\n    intlRelCache = {};\n  }\n\n  static fromObject({ locale, numberingSystem, outputCalendar } = {}) {\n    return Locale.create(locale, numberingSystem, outputCalendar);\n  }\n\n  constructor(locale, numbering, outputCalendar, specifiedLocale) {\n    const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);\n\n    this.locale = parsedLocale;\n    this.numberingSystem = numbering || parsedNumberingSystem || null;\n    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;\n    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);\n\n    this.weekdaysCache = { format: {}, standalone: {} };\n    this.monthsCache = { format: {}, standalone: {} };\n    this.meridiemCache = null;\n    this.eraCache = {};\n\n    this.specifiedLocale = specifiedLocale;\n    this.fastNumbersCached = null;\n  }\n\n  get fastNumbers() {\n    if (this.fastNumbersCached == null) {\n      this.fastNumbersCached = supportsFastNumbers(this);\n    }\n\n    return this.fastNumbersCached;\n  }\n\n  listingMode() {\n    const isActuallyEn = this.isEnglish();\n    const hasNoWeirdness =\n      (this.numberingSystem === null || this.numberingSystem === \"latn\") &&\n      (this.outputCalendar === null || this.outputCalendar === \"gregory\");\n    return isActuallyEn && hasNoWeirdness ? \"en\" : \"intl\";\n  }\n\n  clone(alts) {\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n      return this;\n    } else {\n      return Locale.create(\n        alts.locale || this.specifiedLocale,\n        alts.numberingSystem || this.numberingSystem,\n        alts.outputCalendar || this.outputCalendar,\n        alts.defaultToEN || false\n      );\n    }\n  }\n\n  redefaultToEN(alts = {}) {\n    return this.clone({ ...alts, defaultToEN: true });\n  }\n\n  redefaultToSystem(alts = {}) {\n    return this.clone({ ...alts, defaultToEN: false });\n  }\n\n  months(length, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.months, () => {\n      const intl = format ? { month: length, day: \"numeric\" } : { month: length },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.monthsCache[formatStr][length]) {\n        this.monthsCache[formatStr][length] = mapMonths((dt) => this.extract(dt, intl, \"month\"));\n      }\n      return this.monthsCache[formatStr][length];\n    });\n  }\n\n  weekdays(length, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.weekdays, () => {\n      const intl = format\n          ? { weekday: length, year: \"numeric\", month: \"long\", day: \"numeric\" }\n          : { weekday: length },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.weekdaysCache[formatStr][length]) {\n        this.weekdaysCache[formatStr][length] = mapWeekdays((dt) =>\n          this.extract(dt, intl, \"weekday\")\n        );\n      }\n      return this.weekdaysCache[formatStr][length];\n    });\n  }\n\n  meridiems(defaultOK = true) {\n    return listStuff(\n      this,\n      undefined,\n      defaultOK,\n      () => English.meridiems,\n      () => {\n        // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n        // for AM and PM. This is probably wrong, but it's makes parsing way easier.\n        if (!this.meridiemCache) {\n          const intl = { hour: \"numeric\", hourCycle: \"h12\" };\n          this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(\n            (dt) => this.extract(dt, intl, \"dayperiod\")\n          );\n        }\n\n        return this.meridiemCache;\n      }\n    );\n  }\n\n  eras(length, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.eras, () => {\n      const intl = { era: length };\n\n      // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n      // to definitely enumerate them.\n      if (!this.eraCache[length]) {\n        this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map((dt) =>\n          this.extract(dt, intl, \"era\")\n        );\n      }\n\n      return this.eraCache[length];\n    });\n  }\n\n  extract(dt, intlOpts, field) {\n    const df = this.dtFormatter(dt, intlOpts),\n      results = df.formatToParts(),\n      matching = results.find((m) => m.type.toLowerCase() === field);\n    return matching ? matching.value : null;\n  }\n\n  numberFormatter(opts = {}) {\n    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)\n    // (in contrast, the rest of the condition is used heavily)\n    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);\n  }\n\n  dtFormatter(dt, intlOpts = {}) {\n    return new PolyDateFormatter(dt, this.intl, intlOpts);\n  }\n\n  relFormatter(opts = {}) {\n    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);\n  }\n\n  listFormatter(opts = {}) {\n    return getCachedLF(this.intl, opts);\n  }\n\n  isEnglish() {\n    return (\n      this.locale === \"en\" ||\n      this.locale.toLowerCase() === \"en-us\" ||\n      new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith(\"en-us\")\n    );\n  }\n\n  equals(other) {\n    return (\n      this.locale === other.locale &&\n      this.numberingSystem === other.numberingSystem &&\n      this.outputCalendar === other.outputCalendar\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}