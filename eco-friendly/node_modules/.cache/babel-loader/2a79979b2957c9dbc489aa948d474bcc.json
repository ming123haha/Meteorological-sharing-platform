{"ast":null,"code":"import MarkerClusterer from 'bmaplib.markerclusterer';\nimport { createSize } from '../base/factory.js';\nimport commonMixin from '../base/mixins/common.js';\nexport default {\n  name: 'bml-marker-clusterer',\n  mixins: [commonMixin('markerClusterer')],\n  props: {\n    gridSize: {\n      type: Object\n    },\n    maxZoom: {\n      type: Number\n    },\n    minClusterSize: {\n      type: Number\n    },\n    styles: {\n      type: Array,\n\n      default() {\n        return [];\n      }\n\n    },\n    averageCenter: {\n      type: Boolean,\n      default: false\n    }\n  },\n  watch: {\n    gridSize: {\n      handler(val) {\n        const {\n          BMap,\n          originInstance\n        } = this;\n        originInstance.setGridSize(BMap, val.map);\n      },\n\n      deep: true\n    },\n\n    maxZoom(val) {\n      const {\n        originInstance\n      } = this;\n      originInstance.setMaxZoom(val);\n    },\n\n    minClusterSize: {\n      handler(val) {\n        const {\n          BMap,\n          originInstance\n        } = this;\n        originInstance.setMinClusterSize(createSize(BMap, val));\n      },\n\n      deep: true\n    },\n    styles: {\n      handler(val) {\n        const {\n          BMap,\n          originInstance\n        } = this;\n        const obj = JSON.parse(JSON.stringify(val)).map(item => {\n          item.size = item.size && createSize(BMap, item.size);\n          return item;\n        });\n        originInstance.setStyles(obj);\n      },\n\n      deep: true\n    },\n\n    averageCenter(val) {\n      this.reload();\n    }\n\n  },\n  methods: {\n    load() {\n      const {\n        BMap,\n        map,\n        gridSize,\n        minClusterSize,\n        maxZoom,\n        styles,\n        averageCenter\n      } = this;\n      this.originInstance = new MarkerClusterer(map, {\n        gridSize: gridSize && createSize(BMap, gridSize),\n        maxZoom,\n        minClusterSize: minClusterSize && createSize(BMap, minClusterSize),\n        styles: styles.map(item => {\n          item.size = createSize(BMap, item.size);\n          return item;\n        }),\n        isAverageCenter: averageCenter\n      });\n      this.$nextTick(() => {\n        const markers = this.$children.map(inst => inst.originInstance).filter(marker => marker instanceof BMap.Marker);\n        this.originInstance.addMarkers(markers);\n      });\n    }\n\n  },\n\n  beforeCreate() {\n    this.preventChildrenRender = true;\n  }\n\n};","map":{"version":3,"mappings":"AAOA;AACA;AACA;AAEA;EACAA,4BADA;EAEAC,wCAFA;EAGAC;IACAC;MACAC;IADA,CADA;IAIAC;MACAD;IADA,CAJA;IAOAE;MACAF;IADA,CAPA;IAUAG;MACAH,WADA;;MAEAI;QACA;MACA;;IAJA,CAVA;IAgBAC;MACAL,aADA;MAEAI;IAFA;EAhBA,CAHA;EAwBAE;IACAP;MACAQ;QACA;UAAAC;UAAAC;QAAA;QACAA;MACA,CAJA;;MAKAC;IALA,CADA;;IAQAT;MACA;QAAAQ;MAAA;MACAA;IACA,CAXA;;IAYAP;MACAK;QACA;UAAAC;UAAAC;QAAA;QACAA;MACA,CAJA;;MAKAC;IALA,CAZA;IAmBAP;MACAI;QACA;UAAAC;UAAAC;QAAA;QACA;UACAE;UACA;QACA,CAHA;QAIAF;MACA,CARA;;MASAC;IATA,CAnBA;;IA8BAL;MACA;IACA;;EAhCA,CAxBA;EA0DAO;IACAC;MACA;QAAAL;QAAAM;QAAAf;QAAAG;QAAAD;QAAAE;QAAAE;MAAA;MACA;QACAN,gDADA;QAEAE,OAFA;QAGAC,kEAHA;QAIAC;UACAQ;UACA;QACA,CAHA,CAJA;QAQAI;MARA;MAUA;QACA;QACA;MACA,CAHA;IAIA;;EAjBA,CA1DA;;EA6EAC;IACA;EACA;;AA/EA","names":["name","mixins","props","gridSize","type","maxZoom","minClusterSize","styles","default","averageCenter","watch","handler","BMap","originInstance","deep","item","methods","load","map","isAverageCenter","beforeCreate"],"sourceRoot":"node_modules/vue-baidu-map/components/extra","sources":["MarkerClusterer.vue"],"sourcesContent":["<template>\n<span>\n  <slot></slot>\n</span>\n</template>\n\n<script>\nimport MarkerClusterer from 'bmaplib.markerclusterer'\nimport {createSize} from '../base/factory.js'\nimport commonMixin from '../base/mixins/common.js'\n\nexport default {\n  name: 'bml-marker-clusterer',\n  mixins: [commonMixin('markerClusterer')],\n  props: {\n    gridSize: {\n      type: Object\n    },\n    maxZoom: {\n      type: Number\n    },\n    minClusterSize: {\n      type: Number\n    },\n    styles: {\n      type: Array,\n      default () {\n        return []\n      }\n    },\n    averageCenter: {\n      type: Boolean,\n      default: false\n    }\n  },\n  watch: {\n    gridSize: {\n      handler (val) {\n        const {BMap, originInstance} = this\n        originInstance.setGridSize(BMap, val.map)\n      },\n      deep: true\n    },\n    maxZoom (val) {\n      const {originInstance} = this\n      originInstance.setMaxZoom(val)\n    },\n    minClusterSize: {\n      handler (val) {\n        const {BMap, originInstance} = this\n        originInstance.setMinClusterSize(createSize(BMap, val))\n      },\n      deep: true\n    },\n    styles: {\n      handler (val) {\n        const {BMap, originInstance} = this\n        const obj = JSON.parse(JSON.stringify(val)).map(item => {\n          item.size = item.size && createSize(BMap, item.size)\n          return item\n        })\n        originInstance.setStyles(obj)\n      },\n      deep: true\n    },\n    averageCenter (val) {\n      this.reload()\n    }\n  },\n  methods: {\n    load () {\n      const {BMap, map, gridSize, minClusterSize, maxZoom, styles, averageCenter} = this\n      this.originInstance = new MarkerClusterer(map, {\n        gridSize: gridSize && createSize(BMap, gridSize),\n        maxZoom,\n        minClusterSize: minClusterSize && createSize(BMap, minClusterSize),\n        styles: styles.map(item => {\n          item.size = createSize(BMap, item.size)\n          return item\n        }),\n        isAverageCenter: averageCenter\n      })\n      this.$nextTick(() => {\n        const markers = this.$children.map(inst => inst.originInstance).filter(marker => marker instanceof BMap.Marker)\n        this.originInstance.addMarkers(markers)\n      })\n    }\n  },\n  beforeCreate () {\n    this.preventChildrenRender = true\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}