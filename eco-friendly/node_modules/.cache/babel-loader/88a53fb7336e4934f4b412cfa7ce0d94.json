{"ast":null,"code":"import axios from 'axios';\nimport ElementUI from \"element-ui\";\nconst request = axios.create({\n  baseURL: 'http://localhost:9090',\n  // 注意！！ 这里是全局统一加上了 后端接口前缀 前缀，后端必须进行跨域配置！\n  timeout: 50000\n}); // request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\n\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  let user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {};\n\n  if (user) {\n    config.headers['token'] = user.token; // 设置请求头\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n}); // response 拦截器\n// 可以在接口响应后统一处理结果\n\nrequest.interceptors.response.use(response => {\n  let res = response.data; // 如果是返回的文件\n\n  if (response.config.responseType === 'blob') {\n    return res;\n  } // 兼容服务端返回的字符串数据\n\n\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  } //当验证权限不通过时\n\n\n  if (res.code === '401') {\n    ElementUI.Message({\n      message: res.msg,\n      type: 'error'\n    });\n  }\n\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","ElementUI","request","create","baseURL","timeout","interceptors","use","config","headers","user","localStorage","getItem","JSON","parse","token","error","Promise","reject","response","res","data","responseType","code","Message","message","msg","type","console","log"],"sources":["E:/各个学科/论文/毕业论文/Atmosphere/eco-friendly/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport ElementUI from \"element-ui\";\r\n\r\nconst request = axios.create({\r\n    baseURL: 'http://localhost:9090',  // 注意！！ 这里是全局统一加上了 后端接口前缀 前缀，后端必须进行跨域配置！\r\n    timeout: 50000\r\n})\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n\r\n    let user=localStorage.getItem(\"user\")?JSON.parse(localStorage.getItem(\"user\")):{};\r\n    if(user){\r\n        config.headers['token'] = user.token;  // 设置请求头\r\n    }\r\n\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n});\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n        // 如果是返回的文件\r\n        if (response.config.responseType === 'blob') {\r\n            return res\r\n        }\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        //当验证权限不通过时\r\n        if(res.code==='401'){\r\n            ElementUI.Message({\r\n                message:res.msg,\r\n                type:'error'\r\n            })\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        console.log('err' + error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\nexport default request"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa;EACzBC,OAAO,EAAE,uBADgB;EACU;EACnCC,OAAO,EAAE;AAFgB,CAAb,CAAhB,C,CAKA;AACA;AACA;;AACAH,OAAO,CAACI,YAAR,CAAqBJ,OAArB,CAA6BK,GAA7B,CAAiCC,MAAM,IAAI;EACvCA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiC,gCAAjC;EAEA,IAAIC,IAAI,GAACC,YAAY,CAACC,OAAb,CAAqB,MAArB,IAA6BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAA7B,GAAsE,EAA/E;;EACA,IAAGF,IAAH,EAAQ;IACJF,MAAM,CAACC,OAAP,CAAe,OAAf,IAA0BC,IAAI,CAACK,KAA/B,CADI,CACmC;EAC1C;;EAED,OAAOP,MAAP;AACH,CATD,EASGQ,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAXD,E,CAaA;AACA;;AACAd,OAAO,CAACI,YAAR,CAAqBa,QAArB,CAA8BZ,GAA9B,CACIY,QAAQ,IAAI;EACR,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAnB,CADQ,CAER;;EACA,IAAIF,QAAQ,CAACX,MAAT,CAAgBc,YAAhB,KAAiC,MAArC,EAA6C;IACzC,OAAOF,GAAP;EACH,CALO,CAMR;;;EACA,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;IACzBA,GAAG,GAAGA,GAAG,GAAGP,IAAI,CAACC,KAAL,CAAWM,GAAX,CAAH,GAAqBA,GAA9B;EACH,CATO,CAUR;;;EACA,IAAGA,GAAG,CAACG,IAAJ,KAAW,KAAd,EAAoB;IAChBtB,SAAS,CAACuB,OAAV,CAAkB;MACdC,OAAO,EAACL,GAAG,CAACM,GADE;MAEdC,IAAI,EAAC;IAFS,CAAlB;EAIH;;EACD,OAAOP,GAAP;AACH,CAnBL,EAoBIJ,KAAK,IAAI;EACLY,OAAO,CAACC,GAAR,CAAY,QAAQb,KAApB,EADK,CACsB;;EAC3B,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAvBL;AA2BA,eAAed,OAAf"},"metadata":{},"sourceType":"module"}