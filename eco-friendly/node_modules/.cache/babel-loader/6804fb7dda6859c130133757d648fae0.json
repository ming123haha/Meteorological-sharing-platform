{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport { isSome as e } from \"../core/maybe.js\";\nimport { I as r } from \"./mat4f64.js\";\nimport { ForwardLinearDepth as o } from \"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";\nimport { Offset as a } from \"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";\nimport { ShaderOutput as i } from \"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutputOptions.js\";\nimport { SliceDraw as t } from \"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";\nimport { Transform as l } from \"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";\nimport { InstancedDoublePrecision as s } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";\nimport { NormalAttribute as n, NormalAttributeType as d } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";\nimport { PositionAttribute as c } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js\";\nimport { SymbolColor as m } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";\nimport { TextureCoordinateAttribute as g } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";\nimport { VertexColor as p } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";\nimport { VertexNormal as v } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexNormal.glsl.js\";\nimport { VerticalOffset as u } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";\nimport { DefaultMaterialAuxiliaryPasses as h } from \"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";\nimport { ComputeNormalTexture as b } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js\";\nimport { EvaluateAmbientOcclusion as f } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";\nimport { EvaluateSceneLighting as w } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";\nimport { multipassTerrainTest as x } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";\nimport { Normals as y } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/Normals.glsl.js\";\nimport { PhysicallyBasedRendering as C } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";\nimport { PhysicallyBasedRenderingParameters as j, PBRMode as M } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";\nimport { ReadShadowMapPass as L, ReadShadowMapDraw as T } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";\nimport { VisualVariables as P } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";\nimport { symbolAlphaCutoff as O } from \"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";\nimport { DiscardOrAdjustAlphaPass as A } from \"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";\nimport { HeaderComment as S } from \"../views/3d/webgl-engine/core/shaderLibrary/util/HeaderComment.glsl.js\";\nimport { MixExternalColor as $ } from \"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";\nimport { addProjViewLocalOrigin as N, addCameraPosition as E } from \"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";\nimport { Float3PassUniform as D } from \"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";\nimport { Float4PassUniform as _ } from \"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";\nimport { FloatPassUniform as F } from \"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";\nimport { glsl as V } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { Matrix4PassUniform as B } from \"../views/3d/webgl-engine/core/shaderModules/Matrix4PassUniform.js\";\nimport { ShaderBuilder as I } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\nimport { Texture2DPassUniform as z } from \"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";\nimport { TransparencyPassType as G } from \"../views/3d/webgl-engine/lib/basicInterfaces.js\";\nimport { VertexAttribute as R } from \"../views/3d/webgl-engine/lib/VertexAttribute.js\";\nimport { ambientBoost as U } from \"../views/3d/webgl-engine/lighting/SceneLighting.js\";\n\nfunction k(k) {\n  const W = new I(),\n        H = W.vertex.code,\n        q = W.fragment.code;\n  W.include(S, {\n    name: \"Default Material Shader\",\n    output: k.output\n  });\n  const J = N(W, k);\n  return W.include(c), W.varyings.add(\"vpos\", \"vec3\"), W.include(P, k), W.include(s, k), W.include(u, k), k.output !== i.Color && k.output !== i.Alpha || (E(W.vertex, k), W.include(n, k), W.include(l, {\n    linearDepth: !1,\n    hasModelTransformation: k.hasModelTransformation\n  }), k.normalType === d.Attribute && k.offsetBackfaces && W.include(a), W.include(b, k), W.include(v, k), k.instancedColor && W.attributes.add(R.INSTANCECOLOR, \"vec4\"), W.varyings.add(\"localvpos\", \"vec3\"), W.include(g, k), W.include(o, k), W.include(m, k), W.include(p, k), W.vertex.uniforms.add(new _(\"externalColor\", e => e.externalColor)), W.varyings.add(\"vcolorExt\", \"vec4\"), k.hasMultipassTerrain && W.varyings.add(\"depth\", \"float\"), k.hasModelTransformation && W.vertex.uniforms.add(new B(\"model\", o => e(o.modelTransformation) ? o.modelTransformation : r)), H.add(V`\n      void main(void) {\n        forwardNormalizedVertexColor();\n        vcolorExt = externalColor;\n        ${k.instancedColor ? \"vcolorExt *= instanceColor;\" : \"\"}\n        vcolorExt *= vvColor();\n        vcolorExt *= getSymbolColor();\n        forwardColorMixMode();\n\n        if (vcolorExt.a < ${V.float(O)}) {\n          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n        } else {\n          vpos = calculateVPos();\n          localvpos = vpos - view[3].xyz;\n          vpos = subtractOrigin(vpos);\n          ${k.normalType === d.Attribute ? V`vNormalWorld = dpNormal(vvLocalNormal(normalModel()));` : \"\"}\n          vpos = addVerticalOffset(vpos, localOrigin);\n          ${k.hasVertexTangents ? \"vTangent = dpTransformVertexTangent(tangent);\" : \"\"}\n          gl_Position = transformPosition(proj, view, ${k.hasModelTransformation ? \"model,\" : \"\"} vpos);\n          ${k.normalType === d.Attribute && k.offsetBackfaces ? \"gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, cameraPosition);\" : \"\"}\n        }\n\n        ${k.hasMultipassTerrain ? \"depth = (view * vec4(vpos, 1.0)).z;\" : \"\"}\n        forwardLinearDepth();\n        forwardTextureCoordinates();\n      }\n    `)), k.output === i.Alpha && (W.include(t, k), W.include(A, k), W.include(x, k), W.fragment.uniforms.add([new F(\"opacity\", e => e.opacity), new F(\"layerOpacity\", e => e.layerOpacity)]), k.hasColorTexture && W.fragment.uniforms.add(new z(\"tex\", e => e.texture)), W.fragment.include($), q.add(V`\n      void main() {\n        discardBySlice(vpos);\n        ${k.hasMultipassTerrain ? \"terrainDepthTest(gl_FragCoord, depth);\" : \"\"}\n        ${k.hasColorTexture ? V`\n                vec4 texColor = texture2D(tex, vuv0);\n                ${k.textureAlphaPremultiplied ? \"texColor.rgb /= texColor.a;\" : \"\"}\n                discardOrAdjustAlpha(texColor);` : V`vec4 texColor = vec4(1.0);`}\n        ${k.hasVertexColors ? V`float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));` : V`float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\n        gl_FragColor = vec4(opacity_);\n      }\n    `)), k.output === i.Color && (W.include(t, k), W.include(w, k), W.include(f, k), W.include(A, k), W.include(k.instancedDoublePrecision ? L : T, k), W.include(x, k), E(W.fragment, k), W.fragment.uniforms.add([J, new D(\"ambient\", e => e.ambient), new D(\"diffuse\", e => e.diffuse), new F(\"opacity\", e => e.opacity), new F(\"layerOpacity\", e => e.layerOpacity), new F(\"lightingGlobalFactor\", (e, r) => r.lighting.globalFactor), new D(\"lightingMainIntensity\", (e, r) => r.lighting.mainLight.intensity)]), W.fragment.constants.add(\"ambientBoostFactor\", \"float\", U), k.hasColorTexture && W.fragment.uniforms.add(new z(\"tex\", e => e.texture)), W.include(j, k), W.include(C, k), W.fragment.include($), W.include(y, k), q.add(V`\n      void main() {\n        discardBySlice(vpos);\n        ${k.hasMultipassTerrain ? \"terrainDepthTest(gl_FragCoord, depth);\" : \"\"}\n        ${k.hasColorTexture ? V`\n                vec4 texColor = texture2D(tex, vuv0);\n                ${k.textureAlphaPremultiplied ? \"texColor.rgb /= texColor.a;\" : \"\"}\n                discardOrAdjustAlpha(texColor);` : V`vec4 texColor = vec4(1.0);`}\n        shadingParams.viewDirection = normalize(vpos - cameraPosition);\n        ${k.normalType === d.ScreenDerivative ? V`\n                vec3 normal = screenDerivativeNormal(localvpos);` : V`\n                shadingParams.normalView = vNormalWorld;\n                vec3 normal = shadingNormal(shadingParams);`}\n        ${k.pbrMode === M.Normal ? \"applyPBRFactors();\" : \"\"}\n        float ssao = evaluateAmbientOcclusionInverse();\n        ssao *= getBakedOcclusion();\n\n        float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);\n        ${k.receiveShadows ? \"float shadow = readShadowMap(vpos, linearDepth);\" : k.spherical ? \"float shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);\" : \"float shadow = 0.0;\"}\n        vec3 matColor = max(ambient, diffuse);\n        ${k.hasVertexColors ? V`\n                vec3 albedo = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n                float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));` : V`\n                vec3 albedo = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n                float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\n        ${k.hasNormalTexture ? V`\n                mat3 tangentSpace = ${k.hasVertexTangents ? \"computeTangentSpace(normal);\" : \"computeTangentSpace(normal, vpos, vuv0);\"}\n                vec3 shadingNormal = computeTextureNormal(tangentSpace, vuv0);` : V`vec3 shadingNormal = normal;`}\n        vec3 normalGround = ${k.spherical ? V`normalize(vpos + localOrigin);` : V`vec3(0.0, 0.0, 1.0);`}\n\n        ${k.snowCover ? V`\n                float snow = smoothstep(0.5, 0.55, dot(normal, normalGround));\n                albedo = mix(albedo, vec3(1), snow);\n                shadingNormal = mix(shadingNormal, normal, snow);\n                ssao = mix(ssao, 1.0, snow);` : \"\"}\n\n        vec3 additionalLight = ssao * lightingMainIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n\n        ${k.pbrMode === M.Normal || k.pbrMode === M.Schematic ? V`\n                float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * lightingMainIntensity[2];\n                ${k.snowCover ? V`\n                        mrr = mix(mrr, vec3(0.0, 1.0, 0.04), snow);\n                        emission = mix(emission, vec3(0.0), snow);` : \"\"}\n\n                vec3 shadedColor = evaluateSceneLightingPBR(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight, shadingParams.viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);` : V`vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight);`}\n        gl_FragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);\n        ${k.transparencyPassType === G.Color ? V`gl_FragColor = premultiplyAlpha(gl_FragColor);` : \"\"}\n      }\n    `)), W.include(h, k), W;\n}\n\nconst W = Object.freeze(Object.defineProperty({\n  __proto__: null,\n  build: k\n}, Symbol.toStringTag, {\n  value: \"Module\"\n}));\nexport { W as D, k as b };","map":{"version":3,"names":["isSome","e","I","r","ForwardLinearDepth","o","Offset","a","ShaderOutput","i","SliceDraw","t","Transform","l","InstancedDoublePrecision","s","NormalAttribute","n","NormalAttributeType","d","PositionAttribute","c","SymbolColor","m","TextureCoordinateAttribute","g","VertexColor","p","VertexNormal","v","VerticalOffset","u","DefaultMaterialAuxiliaryPasses","h","ComputeNormalTexture","b","EvaluateAmbientOcclusion","f","EvaluateSceneLighting","w","multipassTerrainTest","x","Normals","y","PhysicallyBasedRendering","C","PhysicallyBasedRenderingParameters","j","PBRMode","M","ReadShadowMapPass","L","ReadShadowMapDraw","T","VisualVariables","P","symbolAlphaCutoff","O","DiscardOrAdjustAlphaPass","A","HeaderComment","S","MixExternalColor","$","addProjViewLocalOrigin","N","addCameraPosition","E","Float3PassUniform","D","Float4PassUniform","_","FloatPassUniform","F","glsl","V","Matrix4PassUniform","B","ShaderBuilder","Texture2DPassUniform","z","TransparencyPassType","G","VertexAttribute","R","ambientBoost","U","k","W","H","vertex","code","q","fragment","include","name","output","J","varyings","add","Color","Alpha","linearDepth","hasModelTransformation","normalType","Attribute","offsetBackfaces","instancedColor","attributes","INSTANCECOLOR","uniforms","externalColor","hasMultipassTerrain","modelTransformation","float","hasVertexTangents","opacity","layerOpacity","hasColorTexture","texture","textureAlphaPremultiplied","hasVertexColors","instancedDoublePrecision","ambient","diffuse","lighting","globalFactor","mainLight","intensity","constants","ScreenDerivative","pbrMode","Normal","receiveShadows","spherical","hasNormalTexture","snowCover","Schematic","transparencyPassType","Object","freeze","defineProperty","__proto__","build","Symbol","toStringTag","value"],"sources":["C:/Users/hp/Desktop/eco-friendly atmosphere/Atmosphere/eco-friendly/node_modules/@arcgis/core/chunks/DefaultMaterial.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport{isSome as e}from\"../core/maybe.js\";import{I as r}from\"./mat4f64.js\";import{ForwardLinearDepth as o}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{Offset as a}from\"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";import{ShaderOutput as i}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutputOptions.js\";import{SliceDraw as t}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as l}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{InstancedDoublePrecision as s}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";import{NormalAttribute as n,NormalAttributeType as d}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";import{PositionAttribute as c}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js\";import{SymbolColor as m}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";import{TextureCoordinateAttribute as g}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";import{VertexColor as p}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{VertexNormal as v}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexNormal.glsl.js\";import{VerticalOffset as u}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";import{DefaultMaterialAuxiliaryPasses as h}from\"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";import{ComputeNormalTexture as b}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js\";import{EvaluateAmbientOcclusion as f}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";import{EvaluateSceneLighting as w}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";import{multipassTerrainTest as x}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";import{Normals as y}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/Normals.glsl.js\";import{PhysicallyBasedRendering as C}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";import{PhysicallyBasedRenderingParameters as j,PBRMode as M}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";import{ReadShadowMapPass as L,ReadShadowMapDraw as T}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";import{VisualVariables as P}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{symbolAlphaCutoff as O}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";import{DiscardOrAdjustAlphaPass as A}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";import{HeaderComment as S}from\"../views/3d/webgl-engine/core/shaderLibrary/util/HeaderComment.glsl.js\";import{MixExternalColor as $}from\"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";import{addProjViewLocalOrigin as N,addCameraPosition as E}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float3PassUniform as D}from\"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";import{Float4PassUniform as _}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as F}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as V}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{Matrix4PassUniform as B}from\"../views/3d/webgl-engine/core/shaderModules/Matrix4PassUniform.js\";import{ShaderBuilder as I}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{Texture2DPassUniform as z}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{TransparencyPassType as G}from\"../views/3d/webgl-engine/lib/basicInterfaces.js\";import{VertexAttribute as R}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{ambientBoost as U}from\"../views/3d/webgl-engine/lighting/SceneLighting.js\";function k(k){const W=new I,H=W.vertex.code,q=W.fragment.code;W.include(S,{name:\"Default Material Shader\",output:k.output});const J=N(W,k);return W.include(c),W.varyings.add(\"vpos\",\"vec3\"),W.include(P,k),W.include(s,k),W.include(u,k),k.output!==i.Color&&k.output!==i.Alpha||(E(W.vertex,k),W.include(n,k),W.include(l,{linearDepth:!1,hasModelTransformation:k.hasModelTransformation}),k.normalType===d.Attribute&&k.offsetBackfaces&&W.include(a),W.include(b,k),W.include(v,k),k.instancedColor&&W.attributes.add(R.INSTANCECOLOR,\"vec4\"),W.varyings.add(\"localvpos\",\"vec3\"),W.include(g,k),W.include(o,k),W.include(m,k),W.include(p,k),W.vertex.uniforms.add(new _(\"externalColor\",(e=>e.externalColor))),W.varyings.add(\"vcolorExt\",\"vec4\"),k.hasMultipassTerrain&&W.varyings.add(\"depth\",\"float\"),k.hasModelTransformation&&W.vertex.uniforms.add(new B(\"model\",(o=>e(o.modelTransformation)?o.modelTransformation:r))),H.add(V`\n      void main(void) {\n        forwardNormalizedVertexColor();\n        vcolorExt = externalColor;\n        ${k.instancedColor?\"vcolorExt *= instanceColor;\":\"\"}\n        vcolorExt *= vvColor();\n        vcolorExt *= getSymbolColor();\n        forwardColorMixMode();\n\n        if (vcolorExt.a < ${V.float(O)}) {\n          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n        } else {\n          vpos = calculateVPos();\n          localvpos = vpos - view[3].xyz;\n          vpos = subtractOrigin(vpos);\n          ${k.normalType===d.Attribute?V`vNormalWorld = dpNormal(vvLocalNormal(normalModel()));`:\"\"}\n          vpos = addVerticalOffset(vpos, localOrigin);\n          ${k.hasVertexTangents?\"vTangent = dpTransformVertexTangent(tangent);\":\"\"}\n          gl_Position = transformPosition(proj, view, ${k.hasModelTransformation?\"model,\":\"\"} vpos);\n          ${k.normalType===d.Attribute&&k.offsetBackfaces?\"gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, cameraPosition);\":\"\"}\n        }\n\n        ${k.hasMultipassTerrain?\"depth = (view * vec4(vpos, 1.0)).z;\":\"\"}\n        forwardLinearDepth();\n        forwardTextureCoordinates();\n      }\n    `)),k.output===i.Alpha&&(W.include(t,k),W.include(A,k),W.include(x,k),W.fragment.uniforms.add([new F(\"opacity\",(e=>e.opacity)),new F(\"layerOpacity\",(e=>e.layerOpacity))]),k.hasColorTexture&&W.fragment.uniforms.add(new z(\"tex\",(e=>e.texture))),W.fragment.include($),q.add(V`\n      void main() {\n        discardBySlice(vpos);\n        ${k.hasMultipassTerrain?\"terrainDepthTest(gl_FragCoord, depth);\":\"\"}\n        ${k.hasColorTexture?V`\n                vec4 texColor = texture2D(tex, vuv0);\n                ${k.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n                discardOrAdjustAlpha(texColor);`:V`vec4 texColor = vec4(1.0);`}\n        ${k.hasVertexColors?V`float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:V`float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\n        gl_FragColor = vec4(opacity_);\n      }\n    `)),k.output===i.Color&&(W.include(t,k),W.include(w,k),W.include(f,k),W.include(A,k),W.include(k.instancedDoublePrecision?L:T,k),W.include(x,k),E(W.fragment,k),W.fragment.uniforms.add([J,new D(\"ambient\",(e=>e.ambient)),new D(\"diffuse\",(e=>e.diffuse)),new F(\"opacity\",(e=>e.opacity)),new F(\"layerOpacity\",(e=>e.layerOpacity)),new F(\"lightingGlobalFactor\",((e,r)=>r.lighting.globalFactor)),new D(\"lightingMainIntensity\",((e,r)=>r.lighting.mainLight.intensity))]),W.fragment.constants.add(\"ambientBoostFactor\",\"float\",U),k.hasColorTexture&&W.fragment.uniforms.add(new z(\"tex\",(e=>e.texture))),W.include(j,k),W.include(C,k),W.fragment.include($),W.include(y,k),q.add(V`\n      void main() {\n        discardBySlice(vpos);\n        ${k.hasMultipassTerrain?\"terrainDepthTest(gl_FragCoord, depth);\":\"\"}\n        ${k.hasColorTexture?V`\n                vec4 texColor = texture2D(tex, vuv0);\n                ${k.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n                discardOrAdjustAlpha(texColor);`:V`vec4 texColor = vec4(1.0);`}\n        shadingParams.viewDirection = normalize(vpos - cameraPosition);\n        ${k.normalType===d.ScreenDerivative?V`\n                vec3 normal = screenDerivativeNormal(localvpos);`:V`\n                shadingParams.normalView = vNormalWorld;\n                vec3 normal = shadingNormal(shadingParams);`}\n        ${k.pbrMode===M.Normal?\"applyPBRFactors();\":\"\"}\n        float ssao = evaluateAmbientOcclusionInverse();\n        ssao *= getBakedOcclusion();\n\n        float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);\n        ${k.receiveShadows?\"float shadow = readShadowMap(vpos, linearDepth);\":k.spherical?\"float shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);\":\"float shadow = 0.0;\"}\n        vec3 matColor = max(ambient, diffuse);\n        ${k.hasVertexColors?V`\n                vec3 albedo = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n                float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:V`\n                vec3 albedo = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n                float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\n        ${k.hasNormalTexture?V`\n                mat3 tangentSpace = ${k.hasVertexTangents?\"computeTangentSpace(normal);\":\"computeTangentSpace(normal, vpos, vuv0);\"}\n                vec3 shadingNormal = computeTextureNormal(tangentSpace, vuv0);`:V`vec3 shadingNormal = normal;`}\n        vec3 normalGround = ${k.spherical?V`normalize(vpos + localOrigin);`:V`vec3(0.0, 0.0, 1.0);`}\n\n        ${k.snowCover?V`\n                float snow = smoothstep(0.5, 0.55, dot(normal, normalGround));\n                albedo = mix(albedo, vec3(1), snow);\n                shadingNormal = mix(shadingNormal, normal, snow);\n                ssao = mix(ssao, 1.0, snow);`:\"\"}\n\n        vec3 additionalLight = ssao * lightingMainIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n\n        ${k.pbrMode===M.Normal||k.pbrMode===M.Schematic?V`\n                float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * lightingMainIntensity[2];\n                ${k.snowCover?V`\n                        mrr = mix(mrr, vec3(0.0, 1.0, 0.04), snow);\n                        emission = mix(emission, vec3(0.0), snow);`:\"\"}\n\n                vec3 shadedColor = evaluateSceneLightingPBR(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight, shadingParams.viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);`:V`vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight);`}\n        gl_FragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);\n        ${k.transparencyPassType===G.Color?V`gl_FragColor = premultiplyAlpha(gl_FragColor);`:\"\"}\n      }\n    `)),W.include(h,k),W}const W=Object.freeze(Object.defineProperty({__proto__:null,build:k},Symbol.toStringTag,{value:\"Module\"}));export{W as D,k as b};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}