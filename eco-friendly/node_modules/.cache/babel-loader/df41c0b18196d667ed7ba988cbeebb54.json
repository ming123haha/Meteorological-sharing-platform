{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.25/esri/copyright.txt for details.\n*/\nimport { unwrap as e } from \"../core/maybe.js\";\nimport { s as r } from \"./vec2.js\";\nimport { a as o } from \"./vec2f64.js\";\nimport { ScreenSpacePass as t } from \"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.js\";\nimport { ReadLinearDepth as a } from \"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js\";\nimport { CameraSpace as n, getZScale as i } from \"../views/3d/webgl-engine/core/shaderLibrary/util/CameraSpace.glsl.js\";\nimport { Float2PassUniform as s } from \"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";\nimport { FloatPassUniform as c } from \"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";\nimport { glsl as l } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { ShaderBuilder as u } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\nimport { Texture2DPassUniform as f } from \"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";\nconst m = 16,\n      p = .5;\n\nfunction d() {\n  const o = new u(),\n        d = o.fragment;\n  return o.include(t), d.include(a), o.include(n), d.uniforms.add(new c(\"radius\", (e, r) => v(r))), d.code.add(l`vec3 sphere[16];\nvoid fillSphere() {\nsphere[0] = vec3(0.186937, 0.0, 0.0);\nsphere[1] = vec3(0.700542, 0.0, 0.0);\nsphere[2] = vec3(-0.864858, -0.481795, -0.111713);\nsphere[3] = vec3(-0.624773, 0.102853, -0.730153);\nsphere[4] = vec3(-0.387172, 0.260319, 0.007229);\nsphere[5] = vec3(-0.222367, -0.642631, -0.707697);\nsphere[6] = vec3(-0.01336, -0.014956, 0.169662);\nsphere[7] = vec3(0.122575, 0.1544, -0.456944);\nsphere[8] = vec3(-0.177141, 0.85997, -0.42346);\nsphere[9] = vec3(-0.131631, 0.814545, 0.524355);\nsphere[10] = vec3(-0.779469, 0.007991, 0.624833);\nsphere[11] = vec3(0.308092, 0.209288,0.35969);\nsphere[12] = vec3(0.359331, -0.184533, -0.377458);\nsphere[13] = vec3(0.192633, -0.482999, -0.065284);\nsphere[14] = vec3(0.233538, 0.293706, -0.055139);\nsphere[15] = vec3(0.417709, -0.386701, 0.442449);\n}\nfloat fallOffFunction(float vv, float vn, float bias) {\nfloat f = max(radius * radius - vv, 0.0);\nreturn f * f * f * max(vn-bias, 0.0);\n}`), d.code.add(l`float aoValueFromPositionsAndNormal(vec3 C, vec3 n_C, vec3 Q) {\nvec3 v = Q - C;\nfloat vv = dot(v, v);\nfloat vn = dot(normalize(v), n_C);\nreturn fallOffFunction(vv, vn, 0.1);\n}`), d.uniforms.add([new s(\"nearFar\", (e, r) => r.camera.nearFar), new f(\"normalMap\", e => e.normalTexture), new f(\"depthMap\", e => e.depthTexture), new s(\"zScale\", (e, r) => i(r)), new c(\"projScale\", e => e.projScale), new f(\"rnm\", e => e.noiseTexture), new s(\"rnmScale\", (o, t) => r(h, t.camera.fullWidth / e(o.noiseTexture).descriptor.width, t.camera.fullHeight / e(o.noiseTexture).descriptor.height)), new c(\"intensity\", (e, r) => 4 * p / v(r) ** 6), new s(\"screenSize\", (e, o) => r(h, o.camera.fullWidth, o.camera.fullHeight))]), d.code.add(l`\n    void main(void) {\n      fillSphere();\n      vec3 fres = normalize((texture2D(rnm, uv * rnmScale).xyz * 2.0) - vec3(1.0));\n      float currentPixelDepth = linearDepthFromTexture(depthMap, uv, nearFar);\n\n      if (-currentPixelDepth>nearFar.y || -currentPixelDepth<nearFar.x) {\n        gl_FragColor = vec4(0.0);\n        return;\n      }\n\n      vec3 currentPixelPos = reconstructPosition(gl_FragCoord.xy,currentPixelDepth);\n\n      // get the normal of current fragment\n      vec4 norm4 = texture2D(normalMap, uv);\n      vec3 norm = vec3(-1.0) + 2.0 * norm4.xyz;\n      bool isTerrain = norm4.w<0.5;\n\n      float sum = .0;\n      vec3 tapPixelPos;\n\n      // note: the factor 2.0 should not be necessary, but makes ssao much nicer.\n      // bug or deviation from CE somewhere else?\n      float ps = projScale / (2.0 * currentPixelPos.z * zScale.x + zScale.y);\n\n      for(int i = 0; i < ${l.int(m)}; ++i) {\n        vec2 unitOffset = reflect(sphere[i], fres).xy;\n        vec2 offset = vec2(-unitOffset * radius * ps);\n\n        //don't use current or very nearby samples\n        if ( abs(offset.x)<2.0 || abs(offset.y)<2.0) continue;\n\n        vec2 tc = vec2(gl_FragCoord.xy + offset);\n        if (tc.x < 0.0 || tc.y < 0.0 || tc.x > screenSize.x || tc.y > screenSize.y) continue;\n        vec2 tcTap = tc / screenSize;\n        float occluderFragmentDepth = linearDepthFromTexture(depthMap, tcTap, nearFar);\n\n        if (isTerrain) {\n          bool isTerrainTap = texture2D(normalMap, tcTap).w<0.5;\n          if (isTerrainTap) {\n            continue;\n          }\n        }\n\n        tapPixelPos = reconstructPosition(tc, occluderFragmentDepth);\n\n        sum+= aoValueFromPositionsAndNormal(currentPixelPos, norm, tapPixelPos);\n      }\n\n      // output the result\n      float A = max(1.0 - sum * intensity / float(${l.int(m)}),0.0);\n\n      // Anti-tone map to reduce contrast and drag dark region farther: (x^0.2 + 1.2 * x^4)/2.2\n      A = (pow(A, 0.2) + 1.2 * A*A*A*A) / 2.2;\n      gl_FragColor = vec4(A);\n    }\n  `), o;\n}\n\nfunction v(e) {\n  return Math.max(10, 20 * e.camera.computeRenderPixelSizeAtDist(Math.abs(4 * e.camera.relativeElevation)));\n}\n\nconst h = o(),\n      x = Object.freeze(Object.defineProperty({\n  __proto__: null,\n  build: d\n}, Symbol.toStringTag, {\n  value: \"Module\"\n}));\nexport { x as S, d as b };","map":{"version":3,"names":["unwrap","e","s","r","a","o","ScreenSpacePass","t","ReadLinearDepth","CameraSpace","n","getZScale","i","Float2PassUniform","FloatPassUniform","c","glsl","l","ShaderBuilder","u","Texture2DPassUniform","f","m","p","d","fragment","include","uniforms","add","v","code","camera","nearFar","normalTexture","depthTexture","projScale","noiseTexture","h","fullWidth","descriptor","width","fullHeight","height","int","Math","max","computeRenderPixelSizeAtDist","abs","relativeElevation","x","Object","freeze","defineProperty","__proto__","build","Symbol","toStringTag","value","S","b"],"sources":["E:/各个学科/论文/毕业论文/Atmosphere/eco-friendly/node_modules/@arcgis/core/chunks/SSAO.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.25/esri/copyright.txt for details.\n*/\nimport{unwrap as e}from\"../core/maybe.js\";import{s as r}from\"./vec2.js\";import{a as o}from\"./vec2f64.js\";import{ScreenSpacePass as t}from\"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.js\";import{ReadLinearDepth as a}from\"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js\";import{CameraSpace as n,getZScale as i}from\"../views/3d/webgl-engine/core/shaderLibrary/util/CameraSpace.glsl.js\";import{Float2PassUniform as s}from\"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";import{FloatPassUniform as c}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as l}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as u}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{Texture2DPassUniform as f}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";const m=16,p=.5;function d(){const o=new u,d=o.fragment;return o.include(t),d.include(a),o.include(n),d.uniforms.add(new c(\"radius\",((e,r)=>v(r)))),d.code.add(l`vec3 sphere[16];\nvoid fillSphere() {\nsphere[0] = vec3(0.186937, 0.0, 0.0);\nsphere[1] = vec3(0.700542, 0.0, 0.0);\nsphere[2] = vec3(-0.864858, -0.481795, -0.111713);\nsphere[3] = vec3(-0.624773, 0.102853, -0.730153);\nsphere[4] = vec3(-0.387172, 0.260319, 0.007229);\nsphere[5] = vec3(-0.222367, -0.642631, -0.707697);\nsphere[6] = vec3(-0.01336, -0.014956, 0.169662);\nsphere[7] = vec3(0.122575, 0.1544, -0.456944);\nsphere[8] = vec3(-0.177141, 0.85997, -0.42346);\nsphere[9] = vec3(-0.131631, 0.814545, 0.524355);\nsphere[10] = vec3(-0.779469, 0.007991, 0.624833);\nsphere[11] = vec3(0.308092, 0.209288,0.35969);\nsphere[12] = vec3(0.359331, -0.184533, -0.377458);\nsphere[13] = vec3(0.192633, -0.482999, -0.065284);\nsphere[14] = vec3(0.233538, 0.293706, -0.055139);\nsphere[15] = vec3(0.417709, -0.386701, 0.442449);\n}\nfloat fallOffFunction(float vv, float vn, float bias) {\nfloat f = max(radius * radius - vv, 0.0);\nreturn f * f * f * max(vn-bias, 0.0);\n}`),d.code.add(l`float aoValueFromPositionsAndNormal(vec3 C, vec3 n_C, vec3 Q) {\nvec3 v = Q - C;\nfloat vv = dot(v, v);\nfloat vn = dot(normalize(v), n_C);\nreturn fallOffFunction(vv, vn, 0.1);\n}`),d.uniforms.add([new s(\"nearFar\",((e,r)=>r.camera.nearFar)),new f(\"normalMap\",(e=>e.normalTexture)),new f(\"depthMap\",(e=>e.depthTexture)),new s(\"zScale\",((e,r)=>i(r))),new c(\"projScale\",(e=>e.projScale)),new f(\"rnm\",(e=>e.noiseTexture)),new s(\"rnmScale\",((o,t)=>r(h,t.camera.fullWidth/e(o.noiseTexture).descriptor.width,t.camera.fullHeight/e(o.noiseTexture).descriptor.height))),new c(\"intensity\",((e,r)=>4*p/v(r)**6)),new s(\"screenSize\",((e,o)=>r(h,o.camera.fullWidth,o.camera.fullHeight)))]),d.code.add(l`\n    void main(void) {\n      fillSphere();\n      vec3 fres = normalize((texture2D(rnm, uv * rnmScale).xyz * 2.0) - vec3(1.0));\n      float currentPixelDepth = linearDepthFromTexture(depthMap, uv, nearFar);\n\n      if (-currentPixelDepth>nearFar.y || -currentPixelDepth<nearFar.x) {\n        gl_FragColor = vec4(0.0);\n        return;\n      }\n\n      vec3 currentPixelPos = reconstructPosition(gl_FragCoord.xy,currentPixelDepth);\n\n      // get the normal of current fragment\n      vec4 norm4 = texture2D(normalMap, uv);\n      vec3 norm = vec3(-1.0) + 2.0 * norm4.xyz;\n      bool isTerrain = norm4.w<0.5;\n\n      float sum = .0;\n      vec3 tapPixelPos;\n\n      // note: the factor 2.0 should not be necessary, but makes ssao much nicer.\n      // bug or deviation from CE somewhere else?\n      float ps = projScale / (2.0 * currentPixelPos.z * zScale.x + zScale.y);\n\n      for(int i = 0; i < ${l.int(m)}; ++i) {\n        vec2 unitOffset = reflect(sphere[i], fres).xy;\n        vec2 offset = vec2(-unitOffset * radius * ps);\n\n        //don't use current or very nearby samples\n        if ( abs(offset.x)<2.0 || abs(offset.y)<2.0) continue;\n\n        vec2 tc = vec2(gl_FragCoord.xy + offset);\n        if (tc.x < 0.0 || tc.y < 0.0 || tc.x > screenSize.x || tc.y > screenSize.y) continue;\n        vec2 tcTap = tc / screenSize;\n        float occluderFragmentDepth = linearDepthFromTexture(depthMap, tcTap, nearFar);\n\n        if (isTerrain) {\n          bool isTerrainTap = texture2D(normalMap, tcTap).w<0.5;\n          if (isTerrainTap) {\n            continue;\n          }\n        }\n\n        tapPixelPos = reconstructPosition(tc, occluderFragmentDepth);\n\n        sum+= aoValueFromPositionsAndNormal(currentPixelPos, norm, tapPixelPos);\n      }\n\n      // output the result\n      float A = max(1.0 - sum * intensity / float(${l.int(m)}),0.0);\n\n      // Anti-tone map to reduce contrast and drag dark region farther: (x^0.2 + 1.2 * x^4)/2.2\n      A = (pow(A, 0.2) + 1.2 * A*A*A*A) / 2.2;\n      gl_FragColor = vec4(A);\n    }\n  `),o}function v(e){return Math.max(10,20*e.camera.computeRenderPixelSizeAtDist(Math.abs(4*e.camera.relativeElevation)))}const h=o(),x=Object.freeze(Object.defineProperty({__proto__:null,build:d},Symbol.toStringTag,{value:\"Module\"}));export{x as S,d as b};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}