{"ast":null,"code":"/**\r\n * Copyright (c) 2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ExecutionEnvironment\r\n */\n\n/*jslint evil: true */\n'use strict';\n\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n/**\r\n * Simple, lightweight module assisting with the detection and context of\r\n * Worker. Helps avoid circular dependencies and allows code to reason about\r\n * whether or not they are in a Worker, even if they never include the main\r\n * `ReactWorker` dependency.\r\n */\n\nvar ExecutionEnvironment = {\n  canUseDOM: canUseDOM,\n  canUseWorkers: typeof Worker !== 'undefined',\n  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),\n  canUseViewport: canUseDOM && !!window.screen,\n  isInWorker: !canUseDOM // For now, this is true - might change in the future.\n\n};\nmodule.exports = ExecutionEnvironment;","map":{"version":3,"names":["canUseDOM","window","document","createElement","ExecutionEnvironment","canUseWorkers","Worker","canUseEventListeners","addEventListener","attachEvent","canUseViewport","screen","isInWorker","module","exports"],"sources":["E:/各个学科/论文/毕业论文/Atmosphere/eco-friendly/node_modules/normalize-wheel/src/ExecutionEnvironment.js"],"sourcesContent":["/**\r\n * Copyright (c) 2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ExecutionEnvironment\r\n */\r\n\r\n/*jslint evil: true */\r\n\r\n'use strict';\r\n\r\nvar canUseDOM = !!(\r\n  typeof window !== 'undefined' &&\r\n  window.document &&\r\n  window.document.createElement\r\n);\r\n\r\n/**\r\n * Simple, lightweight module assisting with the detection and context of\r\n * Worker. Helps avoid circular dependencies and allows code to reason about\r\n * whether or not they are in a Worker, even if they never include the main\r\n * `ReactWorker` dependency.\r\n */\r\nvar ExecutionEnvironment = {\r\n\r\n  canUseDOM: canUseDOM,\r\n\r\n  canUseWorkers: typeof Worker !== 'undefined',\r\n\r\n  canUseEventListeners:\r\n    canUseDOM && !!(window.addEventListener || window.attachEvent),\r\n\r\n  canUseViewport: canUseDOM && !!window.screen,\r\n\r\n  isInWorker: !canUseDOM // For now, this is true - might change in the future.\r\n\r\n};\r\n\r\nmodule.exports = ExecutionEnvironment;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;;AAEA,IAAIA,SAAS,GAAG,CAAC,EACf,OAAOC,MAAP,KAAkB,WAAlB,IACAA,MAAM,CAACC,QADP,IAEAD,MAAM,CAACC,QAAP,CAAgBC,aAHD,CAAjB;AAMA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,oBAAoB,GAAG;EAEzBJ,SAAS,EAAEA,SAFc;EAIzBK,aAAa,EAAE,OAAOC,MAAP,KAAkB,WAJR;EAMzBC,oBAAoB,EAClBP,SAAS,IAAI,CAAC,EAAEC,MAAM,CAACO,gBAAP,IAA2BP,MAAM,CAACQ,WAApC,CAPS;EASzBC,cAAc,EAAEV,SAAS,IAAI,CAAC,CAACC,MAAM,CAACU,MATb;EAWzBC,UAAU,EAAE,CAACZ,SAXY,CAWF;;AAXE,CAA3B;AAeAa,MAAM,CAACC,OAAP,GAAiBV,oBAAjB"},"metadata":{},"sourceType":"script"}