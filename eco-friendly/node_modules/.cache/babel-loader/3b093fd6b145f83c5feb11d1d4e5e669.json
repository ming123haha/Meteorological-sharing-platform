{"ast":null,"code":"import bindEvents from '../base/bindEvent.js';\nimport { checkType } from '../base/util.js';\nexport default {\n  name: 'bm-map',\n  props: {\n    ak: {\n      type: String\n    },\n    center: {\n      type: [Object, String]\n    },\n    zoom: {\n      type: Number\n    },\n    minZoom: {\n      type: Number\n    },\n    maxZoom: {\n      type: Number\n    },\n    highResolution: {\n      type: Boolean,\n      default: true\n    },\n    mapClick: {\n      type: Boolean,\n      default: true\n    },\n    mapType: {\n      type: String\n    },\n    dragging: {\n      type: Boolean,\n      default: true\n    },\n    scrollWheelZoom: {\n      type: Boolean,\n      default: false\n    },\n    doubleClickZoom: {\n      type: Boolean,\n      default: true\n    },\n    keyboard: {\n      type: Boolean,\n      default: true\n    },\n    inertialDragging: {\n      type: Boolean,\n      default: true\n    },\n    continuousZoom: {\n      type: Boolean,\n      default: true\n    },\n    pinchToZoom: {\n      type: Boolean,\n      default: true\n    },\n    autoResize: {\n      type: Boolean,\n      default: true\n    },\n    theme: {\n      type: Array\n    },\n    mapStyle: {\n      type: Object\n    }\n  },\n  watch: {\n    center(val, oldVal) {\n      const {\n        map,\n        zoom\n      } = this;\n\n      if (checkType(val) === 'String' && val !== oldVal) {\n        map.centerAndZoom(val, zoom);\n      }\n    },\n\n    'center.lng'(val, oldVal) {\n      const {\n        BMap,\n        map,\n        zoom,\n        center\n      } = this;\n\n      if (val !== oldVal && val >= -180 && val <= 180) {\n        map.centerAndZoom(new BMap.Point(val, center.lat), zoom);\n      }\n    },\n\n    'center.lat'(val, oldVal) {\n      const {\n        BMap,\n        map,\n        zoom,\n        center\n      } = this;\n\n      if (val !== oldVal && val >= -74 && val <= 74) {\n        map.centerAndZoom(new BMap.Point(center.lng, val), zoom);\n      }\n    },\n\n    zoom(val, oldVal) {\n      const {\n        map\n      } = this;\n\n      if (val !== oldVal && val >= 3 && val <= 19) {\n        map.setZoom(val);\n      }\n    },\n\n    minZoom(val) {\n      const {\n        map\n      } = this;\n      map.setMinZoom(val);\n    },\n\n    maxZoom(val) {\n      const {\n        map\n      } = this;\n      map.setMaxZoom(val);\n    },\n\n    highResolution() {\n      this.reset();\n    },\n\n    mapClick() {\n      this.reset();\n    },\n\n    mapType(val) {\n      const {\n        map\n      } = this;\n      map.setMapType(global[val]);\n    },\n\n    dragging(val) {\n      const {\n        map\n      } = this;\n      val ? map.enableDragging() : map.disableDragging();\n    },\n\n    scrollWheelZoom(val) {\n      const {\n        map\n      } = this;\n      val ? map.enableScrollWheelZoom() : map.disableScrollWheelZoom();\n    },\n\n    doubleClickZoom(val) {\n      const {\n        map\n      } = this;\n      val ? map.enableDoubleClickZoom() : map.disableDoubleClickZoom();\n    },\n\n    keyboard(val) {\n      const {\n        map\n      } = this;\n      val ? map.enableKeyboard() : map.disableKeyboard();\n    },\n\n    inertialDragging(val) {\n      const {\n        map\n      } = this;\n      val ? map.enableInertialDragging() : map.disableInertialDragging();\n    },\n\n    continuousZoom(val) {\n      const {\n        map\n      } = this;\n      val ? map.enableContinuousZoom() : map.disableContinuousZoom();\n    },\n\n    pinchToZoom(val) {\n      const {\n        map\n      } = this;\n      val ? map.enablePinchToZoom() : map.disablePinchToZoom();\n    },\n\n    autoResize(val) {\n      const {\n        map\n      } = this;\n      val ? map.enableAutoResize() : map.disableAutoResize();\n    },\n\n    theme(val) {\n      const {\n        map\n      } = this;\n      map.setMapStyle({\n        styleJson: val\n      });\n    },\n\n    'mapStyle.features': {\n      handler(val, oldVal) {\n        const {\n          map,\n          mapStyle\n        } = this;\n        const {\n          style,\n          styleJson\n        } = mapStyle;\n        map.setMapStyle({\n          styleJson,\n          features: val,\n          style\n        });\n      },\n\n      deep: true\n    },\n\n    'mapStyle.style'(val, oldVal) {\n      const {\n        map,\n        mapStyle\n      } = this;\n      const {\n        features,\n        styleJson\n      } = mapStyle;\n      map.setMapStyle({\n        styleJson,\n        features,\n        style: val\n      });\n    },\n\n    'mapStyle.styleJson': {\n      handler(val, oldVal) {\n        const {\n          map,\n          mapStyle\n        } = this;\n        const {\n          features,\n          style\n        } = mapStyle;\n        map.setMapStyle({\n          styleJson: val,\n          features,\n          style\n        });\n      },\n\n      deep: true\n    },\n\n    mapStyle(val) {\n      const {\n        map,\n        theme\n      } = this;\n      !theme && map.setMapStyle(val);\n    }\n\n  },\n  methods: {\n    setMapOptions() {\n      const {\n        map,\n        minZoom,\n        maxZoom,\n        mapType,\n        dragging,\n        scrollWheelZoom,\n        doubleClickZoom,\n        keyboard,\n        inertialDragging,\n        continuousZoom,\n        pinchToZoom,\n        autoResize\n      } = this;\n      minZoom && map.setMinZoom(minZoom);\n      maxZoom && map.setMaxZoom(maxZoom);\n      mapType && map.setMapType(global[mapType]);\n      dragging ? map.enableDragging() : map.disableDragging();\n      scrollWheelZoom ? map.enableScrollWheelZoom() : map.disableScrollWheelZoom();\n      doubleClickZoom ? map.enableDoubleClickZoom() : map.disableDoubleClickZoom();\n      keyboard ? map.enableKeyboard() : map.disableKeyboard();\n      inertialDragging ? map.enableInertialDragging() : map.disableInertialDragging();\n      continuousZoom ? map.enableContinuousZoom() : map.disableContinuousZoom();\n      pinchToZoom ? map.enablePinchToZoom() : map.disablePinchToZoom();\n      autoResize ? map.enableAutoResize() : map.disableAutoResize();\n    },\n\n    init(BMap) {\n      if (this.map) {\n        return;\n      }\n\n      let $el = this.$refs.view;\n\n      for (let $node of this.$slots.default || []) {\n        if ($node.componentOptions && $node.componentOptions.tag === 'bm-view') {\n          this.hasBmView = true;\n          $el = $node.elm;\n        }\n      }\n\n      const map = new BMap.Map($el, {\n        enableHighResolution: this.highResolution,\n        enableMapClick: this.mapClick\n      });\n      this.map = map;\n      const {\n        setMapOptions,\n        zoom,\n        getCenterPoint,\n        theme,\n        mapStyle\n      } = this;\n      theme ? map.setMapStyle({\n        styleJson: theme\n      }) : map.setMapStyle(mapStyle);\n      setMapOptions();\n      bindEvents.call(this, map); // 此处强行初始化一次地图 回避一个由于错误的 center 字符串导致初始化失败抛出的错误\n\n      map.reset();\n      map.centerAndZoom(getCenterPoint(), zoom);\n      this.$emit('ready', {\n        BMap,\n        map\n      }); // Debug\n      // global.map = map\n      // global.mapComponent = this\n    },\n\n    getCenterPoint() {\n      const {\n        center,\n        BMap\n      } = this;\n\n      switch (checkType(center)) {\n        case 'String':\n          return center;\n\n        case 'Object':\n          return new BMap.Point(center.lng, center.lat);\n\n        default:\n          return new BMap.Point();\n      }\n    },\n\n    initMap(BMap) {\n      this.BMap = BMap;\n      this.init(BMap);\n    },\n\n    getMapScript() {\n      if (!global.BMap) {\n        const ak = this.ak || this._BMap().ak;\n\n        global.BMap = {};\n        global.BMap._preloader = new Promise((resolve, reject) => {\n          global._initBaiduMap = function () {\n            resolve(global.BMap);\n            global.document.body.removeChild($script);\n            global.BMap._preloader = null;\n            global._initBaiduMap = null;\n          };\n\n          const $script = document.createElement('script');\n          global.document.body.appendChild($script);\n          $script.src = `https://api.map.baidu.com/api?v=2.0&ak=${ak}&callback=_initBaiduMap`;\n        });\n        return global.BMap._preloader;\n      } else if (!global.BMap._preloader) {\n        return Promise.resolve(global.BMap);\n      } else {\n        return global.BMap._preloader;\n      }\n    },\n\n    reset() {\n      const {\n        getMapScript,\n        initMap\n      } = this;\n      getMapScript().then(initMap);\n    }\n\n  },\n\n  mounted() {\n    this.reset();\n  },\n\n  data() {\n    return {\n      hasBmView: false\n    };\n  }\n\n};","map":{"version":3,"mappings":"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","names":["name","props","ak","type","center","zoom","minZoom","maxZoom","highResolution","default","mapClick","mapType","dragging","scrollWheelZoom","doubleClickZoom","keyboard","inertialDragging","continuousZoom","pinchToZoom","autoResize","theme","mapStyle","watch","map","BMap","val","styleJson","handler","style","features","deep","methods","setMapOptions","init","$el","enableHighResolution","enableMapClick","getCenterPoint","bindEvents","initMap","getMapScript","global","resolve","$script","reset","then","mounted","data","hasBmView"],"sourceRoot":"node_modules/vue-baidu-map/components/map","sources":["Map.vue"],"sourcesContent":["<template>\n<div>\n  <div v-if=\"!hasBmView\" ref=\"view\" style=\"width: 100%; height: 100%\">\n  </div>\n  <slot></slot>\n</div>\n</template>\n\n<script>\nimport bindEvents from '../base/bindEvent.js'\nimport {checkType} from '../base/util.js'\n\nexport default {\n  name: 'bm-map',\n  props: {\n    ak: {\n      type: String\n    },\n    center: {\n      type: [Object, String]\n    },\n    zoom: {\n      type: Number\n    },\n    minZoom: {\n      type: Number\n    },\n    maxZoom: {\n      type: Number\n    },\n    highResolution: {\n      type: Boolean,\n      default: true\n    },\n    mapClick: {\n      type: Boolean,\n      default: true\n    },\n    mapType: {\n      type: String\n    },\n    dragging: {\n      type: Boolean,\n      default: true\n    },\n    scrollWheelZoom: {\n      type: Boolean,\n      default: false\n    },\n    doubleClickZoom: {\n      type: Boolean,\n      default: true\n    },\n    keyboard: {\n      type: Boolean,\n      default: true\n    },\n    inertialDragging: {\n      type: Boolean,\n      default: true\n    },\n    continuousZoom: {\n      type: Boolean,\n      default: true\n    },\n    pinchToZoom: {\n      type: Boolean,\n      default: true\n    },\n    autoResize: {\n      type: Boolean,\n      default: true\n    },\n    theme: {\n      type: Array\n    },\n    mapStyle: {\n      type: Object\n    }\n  },\n  watch: {\n    center (val, oldVal) {\n      const {map, zoom} = this\n      if (checkType(val) === 'String' && val !== oldVal) {\n        map.centerAndZoom(val, zoom)\n      }\n    },\n    'center.lng' (val, oldVal) {\n      const {BMap, map, zoom, center} = this\n      if (val !== oldVal && val >= -180 && val <= 180) {\n        map.centerAndZoom(new BMap.Point(val, center.lat), zoom)\n      }\n    },\n    'center.lat' (val, oldVal) {\n      const {BMap, map, zoom, center} = this\n      if (val !== oldVal && val >= -74 && val <= 74) {\n        map.centerAndZoom(new BMap.Point(center.lng, val), zoom)\n      }\n    },\n    zoom (val, oldVal) {\n      const {map} = this\n      if (val !== oldVal && val >= 3 && val <= 19) {\n        map.setZoom(val)\n      }\n    },\n    minZoom (val) {\n      const {map} = this\n      map.setMinZoom(val)\n    },\n    maxZoom (val) {\n      const {map} = this\n      map.setMaxZoom(val)\n    },\n    highResolution () {\n      this.reset()\n    },\n    mapClick () {\n      this.reset()\n    },\n    mapType (val) {\n      const {map} = this\n      map.setMapType(global[val])\n    },\n    dragging (val) {\n      const {map} = this\n      val ? map.enableDragging() : map.disableDragging()\n    },\n    scrollWheelZoom (val) {\n      const {map} = this\n      val ? map.enableScrollWheelZoom() : map.disableScrollWheelZoom()\n    },\n    doubleClickZoom (val) {\n      const {map} = this\n      val ? map.enableDoubleClickZoom() : map.disableDoubleClickZoom()\n    },\n    keyboard (val) {\n      const {map} = this\n      val ? map.enableKeyboard() : map.disableKeyboard()\n    },\n    inertialDragging (val) {\n      const {map} = this\n      val ? map.enableInertialDragging() : map.disableInertialDragging()\n    },\n    continuousZoom (val) {\n      const {map} = this\n      val ? map.enableContinuousZoom() : map.disableContinuousZoom()\n    },\n    pinchToZoom (val) {\n      const {map} = this\n      val ? map.enablePinchToZoom() : map.disablePinchToZoom()\n    },\n    autoResize (val) {\n      const {map} = this\n      val ? map.enableAutoResize() : map.disableAutoResize()\n    },\n    theme (val) {\n      const {map} = this\n      map.setMapStyle({styleJson: val})\n    },\n    'mapStyle.features': {\n      handler (val, oldVal) {\n        const {map, mapStyle} = this\n        const {style, styleJson} = mapStyle\n        map.setMapStyle({\n          styleJson,\n          features: val,\n          style\n        })\n      },\n      deep: true\n    },\n    'mapStyle.style' (val, oldVal) {\n      const {map, mapStyle} = this\n      const {features, styleJson} = mapStyle\n      map.setMapStyle({\n        styleJson,\n        features,\n        style: val\n      })\n    },\n    'mapStyle.styleJson': {\n      handler (val, oldVal) {\n        const {map, mapStyle} = this\n        const {features, style} = mapStyle\n        map.setMapStyle({\n          styleJson: val,\n          features,\n          style\n        })\n      },\n      deep: true\n    },\n    mapStyle (val) {\n      const {map, theme} = this\n      !theme && map.setMapStyle(val)\n    }\n  },\n  methods: {\n    setMapOptions () {\n      const {map, minZoom, maxZoom, mapType, dragging, scrollWheelZoom, doubleClickZoom, keyboard, inertialDragging, continuousZoom, pinchToZoom, autoResize} = this\n      minZoom && map.setMinZoom(minZoom)\n      maxZoom && map.setMaxZoom(maxZoom)\n      mapType && map.setMapType(global[mapType])\n      dragging ? map.enableDragging() : map.disableDragging()\n      scrollWheelZoom ? map.enableScrollWheelZoom() : map.disableScrollWheelZoom()\n      doubleClickZoom ? map.enableDoubleClickZoom() : map.disableDoubleClickZoom()\n      keyboard ? map.enableKeyboard() : map.disableKeyboard()\n      inertialDragging ? map.enableInertialDragging() : map.disableInertialDragging()\n      continuousZoom ? map.enableContinuousZoom() : map.disableContinuousZoom()\n      pinchToZoom ? map.enablePinchToZoom() : map.disablePinchToZoom()\n      autoResize ? map.enableAutoResize() : map.disableAutoResize()\n    },\n    init (BMap) {\n      if (this.map) {\n        return\n      }\n      let $el = this.$refs.view\n      for (let $node of this.$slots.default || []) {\n        if ($node.componentOptions && $node.componentOptions.tag === 'bm-view') {\n          this.hasBmView = true\n          $el = $node.elm\n        }\n      }\n      const map = new BMap.Map($el, {enableHighResolution: this.highResolution, enableMapClick: this.mapClick})\n      this.map = map\n      const {setMapOptions, zoom, getCenterPoint, theme, mapStyle} = this\n      theme ? map.setMapStyle({styleJson: theme}) : map.setMapStyle(mapStyle)\n      setMapOptions()\n      bindEvents.call(this, map)\n      // 此处强行初始化一次地图 回避一个由于错误的 center 字符串导致初始化失败抛出的错误\n      map.reset()\n      map.centerAndZoom(getCenterPoint(), zoom)\n      this.$emit('ready', {BMap, map})\n      // Debug\n      // global.map = map\n      // global.mapComponent = this\n    },\n    getCenterPoint () {\n      const {center, BMap} = this\n      switch (checkType(center)) {\n        case 'String': return center\n        case 'Object': return new BMap.Point(center.lng, center.lat)\n        default: return new BMap.Point()\n      }\n    },\n    initMap (BMap) {\n      this.BMap = BMap\n      this.init(BMap)\n    },\n    getMapScript () {\n      if (!global.BMap) {\n        const ak = this.ak || this._BMap().ak\n        global.BMap = {}\n        global.BMap._preloader = new Promise((resolve, reject) => {\n          global._initBaiduMap = function () {\n            resolve(global.BMap)\n            global.document.body.removeChild($script)\n            global.BMap._preloader = null\n            global._initBaiduMap = null\n          }\n          const $script = document.createElement('script')\n          global.document.body.appendChild($script)\n          $script.src = `https://api.map.baidu.com/api?v=2.0&ak=${ak}&callback=_initBaiduMap`\n        })\n        return global.BMap._preloader\n      } else if (!global.BMap._preloader) {\n        return Promise.resolve(global.BMap)\n      } else {\n        return global.BMap._preloader\n      }\n    },\n    reset () {\n      const {getMapScript, initMap} = this\n      getMapScript()\n        .then(initMap)\n    }\n  },\n  mounted () {\n    this.reset()\n  },\n  data () {\n    return {\n      hasBmView: false\n    }\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}