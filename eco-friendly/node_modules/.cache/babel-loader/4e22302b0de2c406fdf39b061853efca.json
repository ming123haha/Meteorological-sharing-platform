{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport { earth as e, mars as o, moon as r } from \"../geometry/support/Ellipsoid.js\";\nimport { OverlayIndex as a, RenderTargetType as i } from \"../views/3d/terrain/interfaces.js\";\nimport { IntegratedMeshMode as l } from \"../views/3d/webgl-engine/collections/Component/Material/ComponentTechniqueConfiguration.js\";\nimport { ComponentData as t, ComponentDataType as d } from \"../views/3d/webgl-engine/collections/Component/Material/shader/ComponentData.glsl.js\";\nimport { VertexDiscardByOpacity as n } from \"../views/3d/webgl-engine/collections/Component/Material/shader/VertexDiscardByOpacity.glsl.js\";\nimport { ForwardLinearDepth as s } from \"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";\nimport { ShaderOutput as c } from \"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutputOptions.js\";\nimport { SlicePass as m } from \"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";\nimport { NormalAttributeType as g } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";\nimport { TextureCoordinateAttribute as v } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";\nimport { VertexColor as u } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";\nimport { VertexNormal as h } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexNormal.glsl.js\";\nimport { VertexPosition as p } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexPosition.glsl.js\";\nimport { OutputDepth as C } from \"../views/3d/webgl-engine/core/shaderLibrary/output/OutputDepth.glsl.js\";\nimport { OutputHighlight as w } from \"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";\nimport { ReadLinearDepth as b } from \"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js\";\nimport { ComputeMaterialColor as f } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/ComputeMaterialColor.glsl.js\";\nimport { ComputeNormalTexture as x } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js\";\nimport { ComputeShadingNormal as y } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/ComputeShadingNormal.glsl.js\";\nimport { EvaluateSceneLighting as M } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";\nimport { multipassTerrainTest as L } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";\nimport { PBRMode as N, PhysicallyBasedRenderingParameters as O } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";\nimport { ReadBaseColorTexture as j } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadBaseColorTexture.glsl.js\";\nimport { ReadShadowMapPass as S } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";\nimport { OverlayIM as T, getColorTexture as P } from \"../views/3d/webgl-engine/core/shaderLibrary/terrain/Overlay.glsl.js\";\nimport { symbolAlphaCutoff as W } from \"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";\nimport { DiscardOrAdjustAlphaDraw as A } from \"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";\nimport { EllipsoidMode as R } from \"../views/3d/webgl-engine/core/shaderLibrary/util/EllipsoidMode.js\";\nimport { Float3PassUniform as D } from \"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";\nimport { FloatPassUniform as B } from \"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";\nimport { glsl as _ } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { Matrix4Uniform as E } from \"../views/3d/webgl-engine/core/shaderModules/Matrix4Uniform.js\";\nimport { ShaderBuilder as F } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\nimport { Texture2DPassUniform as $ } from \"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";\nimport { TransparencyPassType as z } from \"../views/3d/webgl-engine/lib/basicInterfaces.js\";\nimport { VertexAttribute as V } from \"../views/3d/webgl-engine/lib/VertexAttribute.js\";\nconst I = new Map([[V.POSITION, 0], [V.NORMAL, 1], [V.NORMALCOMPRESSED, 1], [V.COLOR, 2], [V.UV0, 3], [V.UVREGION, 4], [V.COMPONENTINDEX, 5]]);\n\nfunction G(a) {\n  const i = new F();\n  i.include(p, a), i.include(h, a), i.include(u, a), i.include(v, a), i.include(s, a), i.include(t, a), i.include(A, a), i.include(m, a), i.include(j, a), i.include(n, a);\n  const {\n    vertex: V,\n    fragment: I\n  } = i;\n  I.uniforms.add(new E(\"view\")), a.pbrMode !== N.Normal && a.pbrMode !== N.Schematic || (i.include(O, a), a.hasNormalTexture && i.include(x, a)), a.output === c.Shadow && a.componentData === d.Varying ? V.code.add(_`#define discardShadows(castShadows) { if(!castShadows) { gl_Position = vec4(1e38, 1e38, 1e38, 1.0); return; } }`) : V.code.add(_`#define discardShadows(castShadows) {}`);\n  const G = a.integratedMeshMode === l.ColorOverlay || a.integratedMeshMode === l.ColorOverlayWithWater,\n        k = G && a.output === c.Color && a.pbrMode === N.WaterOnIntegratedMesh;\n  return G && (i.include(M, a), i.include(T, a), a.spherical ? V.code.add(_`\n      const float invEllipsoidRadius = ${_.float(1 / (a.ellipsoidMode === R.Earth ? e.radius : a.ellipsoidMode === R.Mars ? o.radius : r.radius))};\n      vec2 projectOverlay(vec3 pos) {\n        return pos.xy / (1.0 + invEllipsoidRadius * pos.z);\n      }\n      `) : V.code.add(_`vec2 projectOverlay(vec3 pos) { return pos.xy; }`)), k && (i.varyings.add(\"tbnTangent\", \"vec3\"), i.varyings.add(\"tbnBiTangent\", \"vec3\"), i.varyings.add(\"groundNormal\", \"vec3\")), V.code.add(_`\n    void main() {\n      bool castShadows;\n      vec4 externalColor = forwardExternalColor(castShadows);\n      discardShadows(castShadows);\n\n      vertexDiscardByOpacity(externalColor.a);\n\n      if (externalColor.a < ${_.float(W)}) {\n        // Discard this vertex\n        gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n        return;\n      }\n\n      forwardPosition(readElevationOffset());\n      forwardNormal();\n      forwardTextureCoordinates();\n      forwardVertexColor();\n      forwardLinearDepth();\n      ${k ? a.spherical ? _`\n                groundNormal = normalize(positionWorld());\n                tbnTangent = normalize(cross(vec3(0.0, 0.0, 1.0), groundNormal));\n                tbnBiTangent = normalize(cross(groundNormal, tbnTangent));` : _`\n                groundNormal = vec3(0.0, 0.0, 1.0);\n                tbnTangent = vec3(1.0, 0.0, 0.0);\n                tbnBiTangent = vec3(0.0, 1.0, 0.0);` : \"\"}\n      ${G ? _`setOverlayVTC(projectOverlay(position));` : \"\"}\n    }\n  `), a.output === c.Alpha && (I.include(b), i.include(L, a), i.include(f, a), G && I.uniforms.add(new $(\"ovColorTex\", (e, o) => P(e, o))), I.code.add(_`\n      void main() {\n        discardBySlice(vPositionWorldCameraRelative);\n        ${a.hasMultipassTerrain ? _`terrainDepthTest(gl_FragCoord, vPosition_view.z);` : \"\"}\n\n        vec4 textureColor = readBaseColorTexture();\n        discardOrAdjustAlpha(textureColor);\n\n        vec4 externalColor;\n        int externalColorMixMode;\n        readExternalColor(externalColor, externalColorMixMode);\n\n        vec4 materialColor = computeMaterialColor(\n          textureColor,\n          externalColor,\n          externalColorMixMode\n        );\n        ${G ? _`\n                vec4 overlayColor = getOverlayColor(ovColorTex, vtcOverlay);\n                materialColor = materialColor * (1.0 - overlayColor.a) + overlayColor;` : \"\"}\n\n        gl_FragColor = vec4(materialColor.a);\n      }\n    `)), a.output === c.Color && (I.include(b), i.include(L, a), i.include(f, a), i.include(y, a), i.include(M, a), a.receiveShadows ? (i.include(S, a), I.code.add(_`float evaluateShadow() {\nreturn readShadowMap(vPositionWorldCameraRelative, linearDepth);\n}`)) : I.code.add(_`float evaluateShadow() { return 0.0; }`), G && I.uniforms.add(new $(\"ovColorTex\", (e, o) => P(e, o))), I.code.add(_`\n      void main() {\n        discardBySlice(vPositionWorldCameraRelative);\n        ${a.hasMultipassTerrain ? _`terrainDepthTest(gl_FragCoord, vPosition_view.z);` : \"\"}\n\n        vec4 textureColor = readBaseColorTexture();\n        discardOrAdjustAlpha(textureColor);\n\n        vec4 externalColor;\n        int externalColorMixMode;\n        readExternalColor(externalColor, externalColorMixMode);\n\n        vec4 materialColor = computeMaterialColor(\n          textureColor,\n          externalColor,\n          externalColorMixMode\n        );\n        ${G ? _`vec4 overlayColor = getOverlayColor(ovColorTex, vtcOverlay);` : \"\"}\n    `), a.pbrMode === N.Normal || a.pbrMode === N.Schematic ? (I.uniforms.add(new D(\"lightingMainIntensity\", (e, o) => o.lighting.mainLight.intensity)), I.code.add(_`\n        ${a.pbrMode === N.Normal ? _`\n                applyPBRFactors();\n                if (int(externalColorMixMode) == 3) {\n                  mrr = vec3(0.0, 0.6, 0.2);\n                }` : \"\"}\n        vec3 normalVertex = shadingNormalWorld();\n        float additionalIrradiance = 0.02 * lightingMainIntensity[2];\n      `), a.hasNormalTexture ? I.code.add(_`mat3 tangentSpace = computeTangentSpace(normalVertex, vPositionWorldCameraRelative, vuv0);\nvec3 shadingNormal = computeTextureNormal(tangentSpace, vuv0);`) : I.code.add(_`vec3 shadingNormal = normalVertex;`), I.code.add(_`${a.spherical ? _`vec3 normalGround = normalize(positionWorld());` : _`vec3 normalGround = vec3(0.0, 0.0, 1.0);`}\n      `), I.code.add(_`\n        vec3 viewDir = normalize(vPositionWorldCameraRelative);\n        float ssao = 1.0 - occlusion * (1.0 - evaluateAmbientOcclusion());\n\n        ${a.snowCover ? _`\n                vec3 surfaceNormal = normalize(shadingNormalWorld());\n                float snow = smoothstep(0.5, 0.55, dot(surfaceNormal, normalize(positionWorld())));\n                materialColor.rgb = mix(materialColor.rgb, vec3(1), snow);\n\n                shadingNormal = mix(shadingNormal, surfaceNormal, snow);\n                ssao = mix(ssao, 0.0, snow);\n                mrr = mix(mrr, vec3(0.0, 1.0, 0.04), snow);\n                emission = mix(emission, vec3(0.0), snow);` : \"\"}\n\n        ${G ? _` materialColor = materialColor * (1.0 - overlayColor.a) + overlayColor;` : \"\"}\n\n        vec3 additionalLight = evaluateAdditionalLighting(ssao, positionWorld());\n        vec4 shadedColor = vec4(evaluateSceneLightingPBR(shadingNormal, materialColor.rgb, evaluateShadow(), ssao, additionalLight, viewDir, normalGround, mrr, emission, additionalIrradiance), materialColor.a);\n        `)) : (a.receiveShadows ? I.code.add(_`float shadow = evaluateShadow();`) : a.spherical ? (I.uniforms.add(new B(\"lightingGlobalFactor\", (e, o) => o.lighting.globalFactor)), I.code.add(_`float additionalAmbientScale = additionalDirectedAmbientLight(positionWorld());\nfloat shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);`)) : I.code.add(_`float shadow = 0.0;`), k && I.uniforms.add(new $(\"ovNormalTex\", (e, o) => U(o))), a.snowCover && (i.extensions.add(\"GL_OES_standard_derivatives\"), I.code.add(_`vec3 surfaceNormal = normalize(cross(dFdx(vPositionWorldCameraRelative), dFdy(vPositionWorldCameraRelative)));\nfloat snow = smoothstep(0.5, 0.55, dot(surfaceNormal, normalize(positionWorld())));\nmaterialColor.rgb = mix(materialColor.rgb, vec3(1), snow);`)), I.code.add(_`\n        float ambientOcclusion = evaluateAmbientOcclusion();\n        vec3 additionalLight = evaluateAdditionalLighting(ambientOcclusion, positionWorld());\n\n        ${G ? _` materialColor = materialColor * (1.0 - overlayColor.a) + overlayColor;` : \"\"}\n\n        vec4 shadedColor = vec4(evaluateSceneLighting(shadingNormalWorld(), materialColor.rgb, shadow, ambientOcclusion, additionalLight), materialColor.a);\n      ${k ? _`\n              vec4 overlayWaterMask = getOverlayColor(ovNormalTex, vtcOverlay);\n              float waterNormalLength = length(overlayWaterMask);\n              if (waterNormalLength > 0.95) {\n                mat3 tbnMatrix = mat3(tbnTangent, tbnBiTangent, groundNormal);\n                vec4 waterColorLinear = getOverlayWaterColor(overlayWaterMask, overlayColor, -normalize(vPositionWorldCameraRelative), shadow, groundNormal, tbnMatrix, vPosition_view, positionWorld());\n                vec4 waterColorNonLinear = delinearizeGamma(vec4(waterColorLinear.xyz, 1.0));\n                // un-gamma the ground color to mix in linear space\n                shadedColor = mix(shadedColor, waterColorNonLinear, waterColorLinear.w);\n              }` : \"\"}\n      `)), I.code.add(_`\n        gl_FragColor = highlightSlice(shadedColor, vPositionWorldCameraRelative);\n        ${a.transparencyPassType === z.Color ? \"gl_FragColor = premultiplyAlpha(gl_FragColor);\" : \"\"}\n      }\n    `)), a.output !== c.Depth && a.output !== c.Shadow || (i.include(C, a), I.code.add(_`void main() {\ndiscardBySlice(vPositionWorldCameraRelative);\nvec4 textureColor = readBaseColorTexture();\ndiscardOrAdjustAlpha(textureColor);\noutputDepth(linearDepth);\n}`)), a.output === c.Normal && (i.include(y, a), I.code.add(_`\n      void main() {\n        discardBySlice(vPositionWorldCameraRelative);\n\n        vec4 textureColor = readBaseColorTexture();\n        discardOrAdjustAlpha(textureColor);\n\n        // note: the alpha component needs to be 1.0 in order for this material\n        // to influence ambient occlusion, see the ssao fragment shader\n        float alpha = ${a.normalType === g.Ground ? \"0.0\" : \"1.0\"};\n        gl_FragColor = vec4(vec3(.5) + .5 * shadingNormal_view(), alpha);\n      }\n    `)), a.output === c.Highlight && (i.include(w), I.code.add(_`\n      void main() {\n        discardBySlice(vPositionWorldCameraRelative);\n\n        vec4 textureColor = readBaseColorTexture();\n        discardOrAdjustAlpha(textureColor);\n\n        ${G ? _`\n                vec4 overlayColor = getCombinedOverlayColor();\n                if (overlayColor.a == 0.0) {\n                  gl_FragColor = vec4(0.0);\n                  return;\n                }` : \"\"}\n\n        outputHighlight();\n      }\n    `)), i;\n}\n\nfunction U(e) {\n  return 0 === e.overlays.length ? null : e.overlays[a.INNER].getValidTexture(i.Water);\n}\n\nconst k = Object.freeze(Object.defineProperty({\n  __proto__: null,\n  attributeLocations: I,\n  build: G,\n  getOverlayNormalTexture: U\n}, Symbol.toStringTag, {\n  value: \"Module\"\n}));\nexport { k as C, I as a, G as b, U as g };","map":{"version":3,"names":["earth","e","mars","o","moon","r","OverlayIndex","a","RenderTargetType","i","IntegratedMeshMode","l","ComponentData","t","ComponentDataType","d","VertexDiscardByOpacity","n","ForwardLinearDepth","s","ShaderOutput","c","SlicePass","m","NormalAttributeType","g","TextureCoordinateAttribute","v","VertexColor","u","VertexNormal","h","VertexPosition","p","OutputDepth","C","OutputHighlight","w","ReadLinearDepth","b","ComputeMaterialColor","f","ComputeNormalTexture","x","ComputeShadingNormal","y","EvaluateSceneLighting","M","multipassTerrainTest","L","PBRMode","N","PhysicallyBasedRenderingParameters","O","ReadBaseColorTexture","j","ReadShadowMapPass","S","OverlayIM","T","getColorTexture","P","symbolAlphaCutoff","W","DiscardOrAdjustAlphaDraw","A","EllipsoidMode","R","Float3PassUniform","D","FloatPassUniform","B","glsl","_","Matrix4Uniform","E","ShaderBuilder","F","Texture2DPassUniform","$","TransparencyPassType","z","VertexAttribute","V","I","Map","POSITION","NORMAL","NORMALCOMPRESSED","COLOR","UV0","UVREGION","COMPONENTINDEX","G","include","vertex","fragment","uniforms","add","pbrMode","Normal","Schematic","hasNormalTexture","output","Shadow","componentData","Varying","code","integratedMeshMode","ColorOverlay","ColorOverlayWithWater","k","Color","WaterOnIntegratedMesh","spherical","float","ellipsoidMode","Earth","radius","Mars","varyings","Alpha","hasMultipassTerrain","receiveShadows","lighting","mainLight","intensity","snowCover","globalFactor","U","extensions","transparencyPassType","Depth","normalType","Ground","Highlight","overlays","length","INNER","getValidTexture","Water","Object","freeze","defineProperty","__proto__","attributeLocations","build","getOverlayNormalTexture","Symbol","toStringTag","value"],"sources":["C:/Users/hp/Desktop/eco-friendly atmosphere/Atmosphere/eco-friendly/node_modules/@arcgis/core/chunks/ComponentShader.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport{earth as e,mars as o,moon as r}from\"../geometry/support/Ellipsoid.js\";import{OverlayIndex as a,RenderTargetType as i}from\"../views/3d/terrain/interfaces.js\";import{IntegratedMeshMode as l}from\"../views/3d/webgl-engine/collections/Component/Material/ComponentTechniqueConfiguration.js\";import{ComponentData as t,ComponentDataType as d}from\"../views/3d/webgl-engine/collections/Component/Material/shader/ComponentData.glsl.js\";import{VertexDiscardByOpacity as n}from\"../views/3d/webgl-engine/collections/Component/Material/shader/VertexDiscardByOpacity.glsl.js\";import{ForwardLinearDepth as s}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{ShaderOutput as c}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutputOptions.js\";import{SlicePass as m}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{NormalAttributeType as g}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";import{TextureCoordinateAttribute as v}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";import{VertexColor as u}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{VertexNormal as h}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexNormal.glsl.js\";import{VertexPosition as p}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexPosition.glsl.js\";import{OutputDepth as C}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputDepth.glsl.js\";import{OutputHighlight as w}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";import{ReadLinearDepth as b}from\"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js\";import{ComputeMaterialColor as f}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ComputeMaterialColor.glsl.js\";import{ComputeNormalTexture as x}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js\";import{ComputeShadingNormal as y}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ComputeShadingNormal.glsl.js\";import{EvaluateSceneLighting as M}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";import{multipassTerrainTest as L}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";import{PBRMode as N,PhysicallyBasedRenderingParameters as O}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";import{ReadBaseColorTexture as j}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadBaseColorTexture.glsl.js\";import{ReadShadowMapPass as S}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";import{OverlayIM as T,getColorTexture as P}from\"../views/3d/webgl-engine/core/shaderLibrary/terrain/Overlay.glsl.js\";import{symbolAlphaCutoff as W}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";import{DiscardOrAdjustAlphaDraw as A}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";import{EllipsoidMode as R}from\"../views/3d/webgl-engine/core/shaderLibrary/util/EllipsoidMode.js\";import{Float3PassUniform as D}from\"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";import{FloatPassUniform as B}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as _}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{Matrix4Uniform as E}from\"../views/3d/webgl-engine/core/shaderModules/Matrix4Uniform.js\";import{ShaderBuilder as F}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{Texture2DPassUniform as $}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{TransparencyPassType as z}from\"../views/3d/webgl-engine/lib/basicInterfaces.js\";import{VertexAttribute as V}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";const I=new Map([[V.POSITION,0],[V.NORMAL,1],[V.NORMALCOMPRESSED,1],[V.COLOR,2],[V.UV0,3],[V.UVREGION,4],[V.COMPONENTINDEX,5]]);function G(a){const i=new F;i.include(p,a),i.include(h,a),i.include(u,a),i.include(v,a),i.include(s,a),i.include(t,a),i.include(A,a),i.include(m,a),i.include(j,a),i.include(n,a);const{vertex:V,fragment:I}=i;I.uniforms.add(new E(\"view\")),a.pbrMode!==N.Normal&&a.pbrMode!==N.Schematic||(i.include(O,a),a.hasNormalTexture&&i.include(x,a)),a.output===c.Shadow&&a.componentData===d.Varying?V.code.add(_`#define discardShadows(castShadows) { if(!castShadows) { gl_Position = vec4(1e38, 1e38, 1e38, 1.0); return; } }`):V.code.add(_`#define discardShadows(castShadows) {}`);const G=a.integratedMeshMode===l.ColorOverlay||a.integratedMeshMode===l.ColorOverlayWithWater,k=G&&a.output===c.Color&&a.pbrMode===N.WaterOnIntegratedMesh;return G&&(i.include(M,a),i.include(T,a),a.spherical?V.code.add(_`\n      const float invEllipsoidRadius = ${_.float(1/(a.ellipsoidMode===R.Earth?e.radius:a.ellipsoidMode===R.Mars?o.radius:r.radius))};\n      vec2 projectOverlay(vec3 pos) {\n        return pos.xy / (1.0 + invEllipsoidRadius * pos.z);\n      }\n      `):V.code.add(_`vec2 projectOverlay(vec3 pos) { return pos.xy; }`)),k&&(i.varyings.add(\"tbnTangent\",\"vec3\"),i.varyings.add(\"tbnBiTangent\",\"vec3\"),i.varyings.add(\"groundNormal\",\"vec3\")),V.code.add(_`\n    void main() {\n      bool castShadows;\n      vec4 externalColor = forwardExternalColor(castShadows);\n      discardShadows(castShadows);\n\n      vertexDiscardByOpacity(externalColor.a);\n\n      if (externalColor.a < ${_.float(W)}) {\n        // Discard this vertex\n        gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n        return;\n      }\n\n      forwardPosition(readElevationOffset());\n      forwardNormal();\n      forwardTextureCoordinates();\n      forwardVertexColor();\n      forwardLinearDepth();\n      ${k?a.spherical?_`\n                groundNormal = normalize(positionWorld());\n                tbnTangent = normalize(cross(vec3(0.0, 0.0, 1.0), groundNormal));\n                tbnBiTangent = normalize(cross(groundNormal, tbnTangent));`:_`\n                groundNormal = vec3(0.0, 0.0, 1.0);\n                tbnTangent = vec3(1.0, 0.0, 0.0);\n                tbnBiTangent = vec3(0.0, 1.0, 0.0);`:\"\"}\n      ${G?_`setOverlayVTC(projectOverlay(position));`:\"\"}\n    }\n  `),a.output===c.Alpha&&(I.include(b),i.include(L,a),i.include(f,a),G&&I.uniforms.add(new $(\"ovColorTex\",((e,o)=>P(e,o)))),I.code.add(_`\n      void main() {\n        discardBySlice(vPositionWorldCameraRelative);\n        ${a.hasMultipassTerrain?_`terrainDepthTest(gl_FragCoord, vPosition_view.z);`:\"\"}\n\n        vec4 textureColor = readBaseColorTexture();\n        discardOrAdjustAlpha(textureColor);\n\n        vec4 externalColor;\n        int externalColorMixMode;\n        readExternalColor(externalColor, externalColorMixMode);\n\n        vec4 materialColor = computeMaterialColor(\n          textureColor,\n          externalColor,\n          externalColorMixMode\n        );\n        ${G?_`\n                vec4 overlayColor = getOverlayColor(ovColorTex, vtcOverlay);\n                materialColor = materialColor * (1.0 - overlayColor.a) + overlayColor;`:\"\"}\n\n        gl_FragColor = vec4(materialColor.a);\n      }\n    `)),a.output===c.Color&&(I.include(b),i.include(L,a),i.include(f,a),i.include(y,a),i.include(M,a),a.receiveShadows?(i.include(S,a),I.code.add(_`float evaluateShadow() {\nreturn readShadowMap(vPositionWorldCameraRelative, linearDepth);\n}`)):I.code.add(_`float evaluateShadow() { return 0.0; }`),G&&I.uniforms.add(new $(\"ovColorTex\",((e,o)=>P(e,o)))),I.code.add(_`\n      void main() {\n        discardBySlice(vPositionWorldCameraRelative);\n        ${a.hasMultipassTerrain?_`terrainDepthTest(gl_FragCoord, vPosition_view.z);`:\"\"}\n\n        vec4 textureColor = readBaseColorTexture();\n        discardOrAdjustAlpha(textureColor);\n\n        vec4 externalColor;\n        int externalColorMixMode;\n        readExternalColor(externalColor, externalColorMixMode);\n\n        vec4 materialColor = computeMaterialColor(\n          textureColor,\n          externalColor,\n          externalColorMixMode\n        );\n        ${G?_`vec4 overlayColor = getOverlayColor(ovColorTex, vtcOverlay);`:\"\"}\n    `),a.pbrMode===N.Normal||a.pbrMode===N.Schematic?(I.uniforms.add(new D(\"lightingMainIntensity\",((e,o)=>o.lighting.mainLight.intensity))),I.code.add(_`\n        ${a.pbrMode===N.Normal?_`\n                applyPBRFactors();\n                if (int(externalColorMixMode) == 3) {\n                  mrr = vec3(0.0, 0.6, 0.2);\n                }`:\"\"}\n        vec3 normalVertex = shadingNormalWorld();\n        float additionalIrradiance = 0.02 * lightingMainIntensity[2];\n      `),a.hasNormalTexture?I.code.add(_`mat3 tangentSpace = computeTangentSpace(normalVertex, vPositionWorldCameraRelative, vuv0);\nvec3 shadingNormal = computeTextureNormal(tangentSpace, vuv0);`):I.code.add(_`vec3 shadingNormal = normalVertex;`),I.code.add(_`${a.spherical?_`vec3 normalGround = normalize(positionWorld());`:_`vec3 normalGround = vec3(0.0, 0.0, 1.0);`}\n      `),I.code.add(_`\n        vec3 viewDir = normalize(vPositionWorldCameraRelative);\n        float ssao = 1.0 - occlusion * (1.0 - evaluateAmbientOcclusion());\n\n        ${a.snowCover?_`\n                vec3 surfaceNormal = normalize(shadingNormalWorld());\n                float snow = smoothstep(0.5, 0.55, dot(surfaceNormal, normalize(positionWorld())));\n                materialColor.rgb = mix(materialColor.rgb, vec3(1), snow);\n\n                shadingNormal = mix(shadingNormal, surfaceNormal, snow);\n                ssao = mix(ssao, 0.0, snow);\n                mrr = mix(mrr, vec3(0.0, 1.0, 0.04), snow);\n                emission = mix(emission, vec3(0.0), snow);`:\"\"}\n\n        ${G?_` materialColor = materialColor * (1.0 - overlayColor.a) + overlayColor;`:\"\"}\n\n        vec3 additionalLight = evaluateAdditionalLighting(ssao, positionWorld());\n        vec4 shadedColor = vec4(evaluateSceneLightingPBR(shadingNormal, materialColor.rgb, evaluateShadow(), ssao, additionalLight, viewDir, normalGround, mrr, emission, additionalIrradiance), materialColor.a);\n        `)):(a.receiveShadows?I.code.add(_`float shadow = evaluateShadow();`):a.spherical?(I.uniforms.add(new B(\"lightingGlobalFactor\",((e,o)=>o.lighting.globalFactor))),I.code.add(_`float additionalAmbientScale = additionalDirectedAmbientLight(positionWorld());\nfloat shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);`)):I.code.add(_`float shadow = 0.0;`),k&&I.uniforms.add(new $(\"ovNormalTex\",((e,o)=>U(o)))),a.snowCover&&(i.extensions.add(\"GL_OES_standard_derivatives\"),I.code.add(_`vec3 surfaceNormal = normalize(cross(dFdx(vPositionWorldCameraRelative), dFdy(vPositionWorldCameraRelative)));\nfloat snow = smoothstep(0.5, 0.55, dot(surfaceNormal, normalize(positionWorld())));\nmaterialColor.rgb = mix(materialColor.rgb, vec3(1), snow);`)),I.code.add(_`\n        float ambientOcclusion = evaluateAmbientOcclusion();\n        vec3 additionalLight = evaluateAdditionalLighting(ambientOcclusion, positionWorld());\n\n        ${G?_` materialColor = materialColor * (1.0 - overlayColor.a) + overlayColor;`:\"\"}\n\n        vec4 shadedColor = vec4(evaluateSceneLighting(shadingNormalWorld(), materialColor.rgb, shadow, ambientOcclusion, additionalLight), materialColor.a);\n      ${k?_`\n              vec4 overlayWaterMask = getOverlayColor(ovNormalTex, vtcOverlay);\n              float waterNormalLength = length(overlayWaterMask);\n              if (waterNormalLength > 0.95) {\n                mat3 tbnMatrix = mat3(tbnTangent, tbnBiTangent, groundNormal);\n                vec4 waterColorLinear = getOverlayWaterColor(overlayWaterMask, overlayColor, -normalize(vPositionWorldCameraRelative), shadow, groundNormal, tbnMatrix, vPosition_view, positionWorld());\n                vec4 waterColorNonLinear = delinearizeGamma(vec4(waterColorLinear.xyz, 1.0));\n                // un-gamma the ground color to mix in linear space\n                shadedColor = mix(shadedColor, waterColorNonLinear, waterColorLinear.w);\n              }`:\"\"}\n      `)),I.code.add(_`\n        gl_FragColor = highlightSlice(shadedColor, vPositionWorldCameraRelative);\n        ${a.transparencyPassType===z.Color?\"gl_FragColor = premultiplyAlpha(gl_FragColor);\":\"\"}\n      }\n    `)),a.output!==c.Depth&&a.output!==c.Shadow||(i.include(C,a),I.code.add(_`void main() {\ndiscardBySlice(vPositionWorldCameraRelative);\nvec4 textureColor = readBaseColorTexture();\ndiscardOrAdjustAlpha(textureColor);\noutputDepth(linearDepth);\n}`)),a.output===c.Normal&&(i.include(y,a),I.code.add(_`\n      void main() {\n        discardBySlice(vPositionWorldCameraRelative);\n\n        vec4 textureColor = readBaseColorTexture();\n        discardOrAdjustAlpha(textureColor);\n\n        // note: the alpha component needs to be 1.0 in order for this material\n        // to influence ambient occlusion, see the ssao fragment shader\n        float alpha = ${a.normalType===g.Ground?\"0.0\":\"1.0\"};\n        gl_FragColor = vec4(vec3(.5) + .5 * shadingNormal_view(), alpha);\n      }\n    `)),a.output===c.Highlight&&(i.include(w),I.code.add(_`\n      void main() {\n        discardBySlice(vPositionWorldCameraRelative);\n\n        vec4 textureColor = readBaseColorTexture();\n        discardOrAdjustAlpha(textureColor);\n\n        ${G?_`\n                vec4 overlayColor = getCombinedOverlayColor();\n                if (overlayColor.a == 0.0) {\n                  gl_FragColor = vec4(0.0);\n                  return;\n                }`:\"\"}\n\n        outputHighlight();\n      }\n    `)),i}function U(e){return 0===e.overlays.length?null:e.overlays[a.INNER].getValidTexture(i.Water)}const k=Object.freeze(Object.defineProperty({__proto__:null,attributeLocations:I,build:G,getOverlayNormalTexture:U},Symbol.toStringTag,{value:\"Module\"}));export{k as C,I as a,G as b,U as g};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}