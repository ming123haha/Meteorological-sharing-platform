{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nimport { createHashMap, each } from 'zrender/lib/core/util.js';\nimport { addSafe } from '../util/number.js'; // (1) [Caution]: the logic is correct based on the premises:\n//     data processing stage is blocked in stream.\n//     See <module:echarts/stream/Scheduler#performDataProcessorTasks>\n// (2) Only register once when import repeatedly.\n//     Should be executed after series is filtered and before stack calculation.\n\nexport default function dataStack(ecModel) {\n  var stackInfoMap = createHashMap();\n  ecModel.eachSeries(function (seriesModel) {\n    var stack = seriesModel.get('stack'); // Compatible: when `stack` is set as '', do not stack.\n\n    if (stack) {\n      var stackInfoList = stackInfoMap.get(stack) || stackInfoMap.set(stack, []);\n      var data = seriesModel.getData();\n      var stackInfo = {\n        // Used for calculate axis extent automatically.\n        // TODO: Type getCalculationInfo return more specific type?\n        stackResultDimension: data.getCalculationInfo('stackResultDimension'),\n        stackedOverDimension: data.getCalculationInfo('stackedOverDimension'),\n        stackedDimension: data.getCalculationInfo('stackedDimension'),\n        stackedByDimension: data.getCalculationInfo('stackedByDimension'),\n        isStackedByIndex: data.getCalculationInfo('isStackedByIndex'),\n        data: data,\n        seriesModel: seriesModel\n      }; // If stacked on axis that do not support data stack.\n\n      if (!stackInfo.stackedDimension || !(stackInfo.isStackedByIndex || stackInfo.stackedByDimension)) {\n        return;\n      }\n\n      stackInfoList.length && data.setCalculationInfo('stackedOnSeries', stackInfoList[stackInfoList.length - 1].seriesModel);\n      stackInfoList.push(stackInfo);\n    }\n  });\n  stackInfoMap.each(calculateStack);\n}\n\nfunction calculateStack(stackInfoList) {\n  each(stackInfoList, function (targetStackInfo, idxInStack) {\n    var resultVal = [];\n    var resultNaN = [NaN, NaN];\n    var dims = [targetStackInfo.stackResultDimension, targetStackInfo.stackedOverDimension];\n    var targetData = targetStackInfo.data;\n    var isStackedByIndex = targetStackInfo.isStackedByIndex;\n    var stackStrategy = targetStackInfo.seriesModel.get('stackStrategy') || 'samesign'; // Should not write on raw data, because stack series model list changes\n    // depending on legend selection.\n\n    targetData.modify(dims, function (v0, v1, dataIndex) {\n      var sum = targetData.get(targetStackInfo.stackedDimension, dataIndex); // Consider `connectNulls` of line area, if value is NaN, stackedOver\n      // should also be NaN, to draw a appropriate belt area.\n\n      if (isNaN(sum)) {\n        return resultNaN;\n      }\n\n      var byValue;\n      var stackedDataRawIndex;\n\n      if (isStackedByIndex) {\n        stackedDataRawIndex = targetData.getRawIndex(dataIndex);\n      } else {\n        byValue = targetData.get(targetStackInfo.stackedByDimension, dataIndex);\n      } // If stackOver is NaN, chart view will render point on value start.\n\n\n      var stackedOver = NaN;\n\n      for (var j = idxInStack - 1; j >= 0; j--) {\n        var stackInfo = stackInfoList[j]; // Has been optimized by inverted indices on `stackedByDimension`.\n\n        if (!isStackedByIndex) {\n          stackedDataRawIndex = stackInfo.data.rawIndexOf(stackInfo.stackedByDimension, byValue);\n        }\n\n        if (stackedDataRawIndex >= 0) {\n          var val = stackInfo.data.getByRawIndex(stackInfo.stackResultDimension, stackedDataRawIndex); // Considering positive stack, negative stack and empty data\n\n          if (stackStrategy === 'all' // single stack group\n          || stackStrategy === 'positive' && val > 0 || stackStrategy === 'negative' && val < 0 || stackStrategy === 'samesign' && sum >= 0 && val > 0 // All positive stack\n          || stackStrategy === 'samesign' && sum <= 0 && val < 0 // All negative stack\n          ) {\n            // The sum has to be very small to be affected by the\n            // floating arithmetic problem. An incorrect result will probably\n            // cause axis min/max to be filtered incorrectly.\n            sum = addSafe(sum, val);\n            stackedOver = val;\n            break;\n          }\n        }\n      }\n\n      resultVal[0] = sum;\n      resultVal[1] = stackedOver;\n      return resultVal;\n    });\n  });\n}","map":{"version":3,"names":["createHashMap","each","addSafe","dataStack","ecModel","stackInfoMap","eachSeries","seriesModel","stack","get","stackInfoList","set","data","getData","stackInfo","stackResultDimension","getCalculationInfo","stackedOverDimension","stackedDimension","stackedByDimension","isStackedByIndex","length","setCalculationInfo","push","calculateStack","targetStackInfo","idxInStack","resultVal","resultNaN","NaN","dims","targetData","stackStrategy","modify","v0","v1","dataIndex","sum","isNaN","byValue","stackedDataRawIndex","getRawIndex","stackedOver","j","rawIndexOf","val","getByRawIndex"],"sources":["E:/各个学科/论文/毕业论文/Atmosphere/eco-friendly/node_modules/echarts/lib/processor/dataStack.js"],"sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n\r\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nimport { createHashMap, each } from 'zrender/lib/core/util.js';\r\nimport { addSafe } from '../util/number.js'; // (1) [Caution]: the logic is correct based on the premises:\r\n//     data processing stage is blocked in stream.\r\n//     See <module:echarts/stream/Scheduler#performDataProcessorTasks>\r\n// (2) Only register once when import repeatedly.\r\n//     Should be executed after series is filtered and before stack calculation.\r\n\r\nexport default function dataStack(ecModel) {\r\n  var stackInfoMap = createHashMap();\r\n  ecModel.eachSeries(function (seriesModel) {\r\n    var stack = seriesModel.get('stack'); // Compatible: when `stack` is set as '', do not stack.\r\n\r\n    if (stack) {\r\n      var stackInfoList = stackInfoMap.get(stack) || stackInfoMap.set(stack, []);\r\n      var data = seriesModel.getData();\r\n      var stackInfo = {\r\n        // Used for calculate axis extent automatically.\r\n        // TODO: Type getCalculationInfo return more specific type?\r\n        stackResultDimension: data.getCalculationInfo('stackResultDimension'),\r\n        stackedOverDimension: data.getCalculationInfo('stackedOverDimension'),\r\n        stackedDimension: data.getCalculationInfo('stackedDimension'),\r\n        stackedByDimension: data.getCalculationInfo('stackedByDimension'),\r\n        isStackedByIndex: data.getCalculationInfo('isStackedByIndex'),\r\n        data: data,\r\n        seriesModel: seriesModel\r\n      }; // If stacked on axis that do not support data stack.\r\n\r\n      if (!stackInfo.stackedDimension || !(stackInfo.isStackedByIndex || stackInfo.stackedByDimension)) {\r\n        return;\r\n      }\r\n\r\n      stackInfoList.length && data.setCalculationInfo('stackedOnSeries', stackInfoList[stackInfoList.length - 1].seriesModel);\r\n      stackInfoList.push(stackInfo);\r\n    }\r\n  });\r\n  stackInfoMap.each(calculateStack);\r\n}\r\n\r\nfunction calculateStack(stackInfoList) {\r\n  each(stackInfoList, function (targetStackInfo, idxInStack) {\r\n    var resultVal = [];\r\n    var resultNaN = [NaN, NaN];\r\n    var dims = [targetStackInfo.stackResultDimension, targetStackInfo.stackedOverDimension];\r\n    var targetData = targetStackInfo.data;\r\n    var isStackedByIndex = targetStackInfo.isStackedByIndex;\r\n    var stackStrategy = targetStackInfo.seriesModel.get('stackStrategy') || 'samesign'; // Should not write on raw data, because stack series model list changes\r\n    // depending on legend selection.\r\n\r\n    targetData.modify(dims, function (v0, v1, dataIndex) {\r\n      var sum = targetData.get(targetStackInfo.stackedDimension, dataIndex); // Consider `connectNulls` of line area, if value is NaN, stackedOver\r\n      // should also be NaN, to draw a appropriate belt area.\r\n\r\n      if (isNaN(sum)) {\r\n        return resultNaN;\r\n      }\r\n\r\n      var byValue;\r\n      var stackedDataRawIndex;\r\n\r\n      if (isStackedByIndex) {\r\n        stackedDataRawIndex = targetData.getRawIndex(dataIndex);\r\n      } else {\r\n        byValue = targetData.get(targetStackInfo.stackedByDimension, dataIndex);\r\n      } // If stackOver is NaN, chart view will render point on value start.\r\n\r\n\r\n      var stackedOver = NaN;\r\n\r\n      for (var j = idxInStack - 1; j >= 0; j--) {\r\n        var stackInfo = stackInfoList[j]; // Has been optimized by inverted indices on `stackedByDimension`.\r\n\r\n        if (!isStackedByIndex) {\r\n          stackedDataRawIndex = stackInfo.data.rawIndexOf(stackInfo.stackedByDimension, byValue);\r\n        }\r\n\r\n        if (stackedDataRawIndex >= 0) {\r\n          var val = stackInfo.data.getByRawIndex(stackInfo.stackResultDimension, stackedDataRawIndex); // Considering positive stack, negative stack and empty data\r\n\r\n          if (stackStrategy === 'all' // single stack group\r\n          || stackStrategy === 'positive' && val > 0 || stackStrategy === 'negative' && val < 0 || stackStrategy === 'samesign' && sum >= 0 && val > 0 // All positive stack\r\n          || stackStrategy === 'samesign' && sum <= 0 && val < 0 // All negative stack\r\n          ) {\r\n              // The sum has to be very small to be affected by the\r\n              // floating arithmetic problem. An incorrect result will probably\r\n              // cause axis min/max to be filtered incorrectly.\r\n              sum = addSafe(sum, val);\r\n              stackedOver = val;\r\n              break;\r\n            }\r\n        }\r\n      }\r\n\r\n      resultVal[0] = sum;\r\n      resultVal[1] = stackedOver;\r\n      return resultVal;\r\n    });\r\n  });\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}