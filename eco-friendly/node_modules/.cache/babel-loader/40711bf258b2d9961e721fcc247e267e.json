{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * Tree data structure\r\n */\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport linkSeriesData from './helper/linkSeriesData.js';\nimport SeriesData from './SeriesData.js';\nimport prepareSeriesDataSchema from './helper/createDimensions.js';\nimport { convertOptionIdName } from '../util/model.js';\n\nvar TreeNode =\n/** @class */\nfunction () {\n  function TreeNode(name, hostTree) {\n    this.depth = 0;\n    this.height = 0;\n    /**\r\n     * Reference to list item.\r\n     * Do not persistent dataIndex outside,\r\n     * besause it may be changed by list.\r\n     * If dataIndex -1,\r\n     * this node is logical deleted (filtered) in list.\r\n     */\n\n    this.dataIndex = -1;\n    this.children = [];\n    this.viewChildren = [];\n    this.isExpand = false;\n    this.name = name || '';\n    this.hostTree = hostTree;\n  }\n  /**\r\n   * The node is removed.\r\n   */\n\n\n  TreeNode.prototype.isRemoved = function () {\n    return this.dataIndex < 0;\n  };\n\n  TreeNode.prototype.eachNode = function (options, cb, context) {\n    if (zrUtil.isFunction(options)) {\n      context = cb;\n      cb = options;\n      options = null;\n    }\n\n    options = options || {};\n\n    if (zrUtil.isString(options)) {\n      options = {\n        order: options\n      };\n    }\n\n    var order = options.order || 'preorder';\n    var children = this[options.attr || 'children'];\n    var suppressVisitSub;\n    order === 'preorder' && (suppressVisitSub = cb.call(context, this));\n\n    for (var i = 0; !suppressVisitSub && i < children.length; i++) {\n      children[i].eachNode(options, cb, context);\n    }\n\n    order === 'postorder' && cb.call(context, this);\n  };\n  /**\r\n   * Update depth and height of this subtree.\r\n   */\n\n\n  TreeNode.prototype.updateDepthAndHeight = function (depth) {\n    var height = 0;\n    this.depth = depth;\n\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n      child.updateDepthAndHeight(depth + 1);\n\n      if (child.height > height) {\n        height = child.height;\n      }\n    }\n\n    this.height = height + 1;\n  };\n\n  TreeNode.prototype.getNodeById = function (id) {\n    if (this.getId() === id) {\n      return this;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].getNodeById(id);\n\n      if (res) {\n        return res;\n      }\n    }\n  };\n\n  TreeNode.prototype.contains = function (node) {\n    if (node === this) {\n      return true;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].contains(node);\n\n      if (res) {\n        return res;\n      }\n    }\n  };\n  /**\r\n   * @param includeSelf Default false.\r\n   * @return order: [root, child, grandchild, ...]\r\n   */\n\n\n  TreeNode.prototype.getAncestors = function (includeSelf) {\n    var ancestors = [];\n    var node = includeSelf ? this : this.parentNode;\n\n    while (node) {\n      ancestors.push(node);\n      node = node.parentNode;\n    }\n\n    ancestors.reverse();\n    return ancestors;\n  };\n\n  TreeNode.prototype.getAncestorsIndices = function () {\n    var indices = [];\n    var currNode = this;\n\n    while (currNode) {\n      indices.push(currNode.dataIndex);\n      currNode = currNode.parentNode;\n    }\n\n    indices.reverse();\n    return indices;\n  };\n\n  TreeNode.prototype.getDescendantIndices = function () {\n    var indices = [];\n    this.eachNode(function (childNode) {\n      indices.push(childNode.dataIndex);\n    });\n    return indices;\n  };\n\n  TreeNode.prototype.getValue = function (dimension) {\n    var data = this.hostTree.data;\n    return data.getStore().get(data.getDimensionIndex(dimension || 'value'), this.dataIndex);\n  };\n\n  TreeNode.prototype.setLayout = function (layout, merge) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);\n  };\n  /**\r\n   * @return {Object} layout\r\n   */\n\n\n  TreeNode.prototype.getLayout = function () {\n    return this.hostTree.data.getItemLayout(this.dataIndex);\n  }; // @depcrecated\n  // getModel<T = unknown, S extends keyof T = keyof T>(path: S): Model<T[S]>\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  TreeNode.prototype.getModel = function (path) {\n    if (this.dataIndex < 0) {\n      return;\n    }\n\n    var hostTree = this.hostTree;\n    var itemModel = hostTree.data.getItemModel(this.dataIndex);\n    return itemModel.getModel(path);\n  }; // TODO: TYPE More specific model\n\n\n  TreeNode.prototype.getLevelModel = function () {\n    return (this.hostTree.levelModels || [])[this.depth];\n  };\n\n  TreeNode.prototype.setVisual = function (key, value) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemVisual(this.dataIndex, key, value);\n  };\n  /**\r\n   * Get item visual\r\n   * FIXME: make return type better\r\n   */\n\n\n  TreeNode.prototype.getVisual = function (key) {\n    return this.hostTree.data.getItemVisual(this.dataIndex, key);\n  };\n\n  TreeNode.prototype.getRawIndex = function () {\n    return this.hostTree.data.getRawIndex(this.dataIndex);\n  };\n\n  TreeNode.prototype.getId = function () {\n    return this.hostTree.data.getId(this.dataIndex);\n  };\n  /**\r\n   * index in parent's children\r\n   */\n\n\n  TreeNode.prototype.getChildIndex = function () {\n    if (this.parentNode) {\n      var children = this.parentNode.children;\n\n      for (var i = 0; i < children.length; ++i) {\n        if (children[i] === this) {\n          return i;\n        }\n      }\n\n      return -1;\n    }\n\n    return -1;\n  };\n  /**\r\n   * if this is an ancestor of another node\r\n   *\r\n   * @param node another node\r\n   * @return if is ancestor\r\n   */\n\n\n  TreeNode.prototype.isAncestorOf = function (node) {\n    var parent = node.parentNode;\n\n    while (parent) {\n      if (parent === this) {\n        return true;\n      }\n\n      parent = parent.parentNode;\n    }\n\n    return false;\n  };\n  /**\r\n   * if this is an descendant of another node\r\n   *\r\n   * @param node another node\r\n   * @return if is descendant\r\n   */\n\n\n  TreeNode.prototype.isDescendantOf = function (node) {\n    return node !== this && node.isAncestorOf(this);\n  };\n\n  return TreeNode;\n}();\n\nexport { TreeNode };\n;\n\nvar Tree =\n/** @class */\nfunction () {\n  function Tree(hostModel) {\n    this.type = 'tree';\n    this._nodes = [];\n    this.hostModel = hostModel;\n  }\n\n  Tree.prototype.eachNode = function (options, cb, context) {\n    this.root.eachNode(options, cb, context);\n  };\n\n  Tree.prototype.getNodeByDataIndex = function (dataIndex) {\n    var rawIndex = this.data.getRawIndex(dataIndex);\n    return this._nodes[rawIndex];\n  };\n\n  Tree.prototype.getNodeById = function (name) {\n    return this.root.getNodeById(name);\n  };\n  /**\r\n   * Update item available by list,\r\n   * when list has been performed options like 'filterSelf' or 'map'.\r\n   */\n\n\n  Tree.prototype.update = function () {\n    var data = this.data;\n    var nodes = this._nodes;\n\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      nodes[i].dataIndex = -1;\n    }\n\n    for (var i = 0, len = data.count(); i < len; i++) {\n      nodes[data.getRawIndex(i)].dataIndex = i;\n    }\n  };\n  /**\r\n   * Clear all layouts\r\n   */\n\n\n  Tree.prototype.clearLayouts = function () {\n    this.data.clearItemLayouts();\n  };\n  /**\r\n   * data node format:\r\n   * {\r\n   *     name: ...\r\n   *     value: ...\r\n   *     children: [\r\n   *         {\r\n   *             name: ...\r\n   *             value: ...\r\n   *             children: ...\r\n   *         },\r\n   *         ...\r\n   *     ]\r\n   * }\r\n   */\n\n\n  Tree.createTree = function (dataRoot, hostModel, beforeLink) {\n    var tree = new Tree(hostModel);\n    var listData = [];\n    var dimMax = 1;\n    buildHierarchy(dataRoot);\n\n    function buildHierarchy(dataNode, parentNode) {\n      var value = dataNode.value;\n      dimMax = Math.max(dimMax, zrUtil.isArray(value) ? value.length : 1);\n      listData.push(dataNode);\n      var node = new TreeNode(convertOptionIdName(dataNode.name, ''), tree);\n      parentNode ? addChild(node, parentNode) : tree.root = node;\n\n      tree._nodes.push(node);\n\n      var children = dataNode.children;\n\n      if (children) {\n        for (var i = 0; i < children.length; i++) {\n          buildHierarchy(children[i], node);\n        }\n      }\n    }\n\n    tree.root.updateDepthAndHeight(0);\n    var dimensions = prepareSeriesDataSchema(listData, {\n      coordDimensions: ['value'],\n      dimensionsCount: dimMax\n    }).dimensions;\n    var list = new SeriesData(dimensions, hostModel);\n    list.initData(listData);\n    beforeLink && beforeLink(list);\n    linkSeriesData({\n      mainData: list,\n      struct: tree,\n      structAttr: 'tree'\n    });\n    tree.update();\n    return tree;\n  };\n\n  return Tree;\n}();\n/**\r\n * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,\r\n * so this function is not ready and not necessary to be public.\r\n */\n\n\nfunction addChild(child, node) {\n  var children = node.children;\n\n  if (child.parentNode === node) {\n    return;\n  }\n\n  children.push(child);\n  child.parentNode = node;\n}\n\nexport default Tree;","map":{"version":3,"names":["zrUtil","linkSeriesData","SeriesData","prepareSeriesDataSchema","convertOptionIdName","TreeNode","name","hostTree","depth","height","dataIndex","children","viewChildren","isExpand","prototype","isRemoved","eachNode","options","cb","context","isFunction","isString","order","attr","suppressVisitSub","call","i","length","updateDepthAndHeight","child","getNodeById","id","getId","len","res","contains","node","getAncestors","includeSelf","ancestors","parentNode","push","reverse","getAncestorsIndices","indices","currNode","getDescendantIndices","childNode","getValue","dimension","data","getStore","get","getDimensionIndex","setLayout","layout","merge","setItemLayout","getLayout","getItemLayout","getModel","path","itemModel","getItemModel","getLevelModel","levelModels","setVisual","key","value","setItemVisual","getVisual","getItemVisual","getRawIndex","getChildIndex","isAncestorOf","parent","isDescendantOf","Tree","hostModel","type","_nodes","root","getNodeByDataIndex","rawIndex","update","nodes","count","clearLayouts","clearItemLayouts","createTree","dataRoot","beforeLink","tree","listData","dimMax","buildHierarchy","dataNode","Math","max","isArray","addChild","dimensions","coordDimensions","dimensionsCount","list","initData","mainData","struct","structAttr"],"sources":["E:/各个学科/论文/毕业论文/Atmosphere/eco-friendly/node_modules/echarts/lib/data/Tree.js"],"sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n\r\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n/**\r\n * Tree data structure\r\n */\r\nimport * as zrUtil from 'zrender/lib/core/util.js';\r\nimport linkSeriesData from './helper/linkSeriesData.js';\r\nimport SeriesData from './SeriesData.js';\r\nimport prepareSeriesDataSchema from './helper/createDimensions.js';\r\nimport { convertOptionIdName } from '../util/model.js';\r\n\r\nvar TreeNode =\r\n/** @class */\r\nfunction () {\r\n  function TreeNode(name, hostTree) {\r\n    this.depth = 0;\r\n    this.height = 0;\r\n    /**\r\n     * Reference to list item.\r\n     * Do not persistent dataIndex outside,\r\n     * besause it may be changed by list.\r\n     * If dataIndex -1,\r\n     * this node is logical deleted (filtered) in list.\r\n     */\r\n\r\n    this.dataIndex = -1;\r\n    this.children = [];\r\n    this.viewChildren = [];\r\n    this.isExpand = false;\r\n    this.name = name || '';\r\n    this.hostTree = hostTree;\r\n  }\r\n  /**\r\n   * The node is removed.\r\n   */\r\n\r\n\r\n  TreeNode.prototype.isRemoved = function () {\r\n    return this.dataIndex < 0;\r\n  };\r\n\r\n  TreeNode.prototype.eachNode = function (options, cb, context) {\r\n    if (zrUtil.isFunction(options)) {\r\n      context = cb;\r\n      cb = options;\r\n      options = null;\r\n    }\r\n\r\n    options = options || {};\r\n\r\n    if (zrUtil.isString(options)) {\r\n      options = {\r\n        order: options\r\n      };\r\n    }\r\n\r\n    var order = options.order || 'preorder';\r\n    var children = this[options.attr || 'children'];\r\n    var suppressVisitSub;\r\n    order === 'preorder' && (suppressVisitSub = cb.call(context, this));\r\n\r\n    for (var i = 0; !suppressVisitSub && i < children.length; i++) {\r\n      children[i].eachNode(options, cb, context);\r\n    }\r\n\r\n    order === 'postorder' && cb.call(context, this);\r\n  };\r\n  /**\r\n   * Update depth and height of this subtree.\r\n   */\r\n\r\n\r\n  TreeNode.prototype.updateDepthAndHeight = function (depth) {\r\n    var height = 0;\r\n    this.depth = depth;\r\n\r\n    for (var i = 0; i < this.children.length; i++) {\r\n      var child = this.children[i];\r\n      child.updateDepthAndHeight(depth + 1);\r\n\r\n      if (child.height > height) {\r\n        height = child.height;\r\n      }\r\n    }\r\n\r\n    this.height = height + 1;\r\n  };\r\n\r\n  TreeNode.prototype.getNodeById = function (id) {\r\n    if (this.getId() === id) {\r\n      return this;\r\n    }\r\n\r\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\r\n      var res = children[i].getNodeById(id);\r\n\r\n      if (res) {\r\n        return res;\r\n      }\r\n    }\r\n  };\r\n\r\n  TreeNode.prototype.contains = function (node) {\r\n    if (node === this) {\r\n      return true;\r\n    }\r\n\r\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\r\n      var res = children[i].contains(node);\r\n\r\n      if (res) {\r\n        return res;\r\n      }\r\n    }\r\n  };\r\n  /**\r\n   * @param includeSelf Default false.\r\n   * @return order: [root, child, grandchild, ...]\r\n   */\r\n\r\n\r\n  TreeNode.prototype.getAncestors = function (includeSelf) {\r\n    var ancestors = [];\r\n    var node = includeSelf ? this : this.parentNode;\r\n\r\n    while (node) {\r\n      ancestors.push(node);\r\n      node = node.parentNode;\r\n    }\r\n\r\n    ancestors.reverse();\r\n    return ancestors;\r\n  };\r\n\r\n  TreeNode.prototype.getAncestorsIndices = function () {\r\n    var indices = [];\r\n    var currNode = this;\r\n\r\n    while (currNode) {\r\n      indices.push(currNode.dataIndex);\r\n      currNode = currNode.parentNode;\r\n    }\r\n\r\n    indices.reverse();\r\n    return indices;\r\n  };\r\n\r\n  TreeNode.prototype.getDescendantIndices = function () {\r\n    var indices = [];\r\n    this.eachNode(function (childNode) {\r\n      indices.push(childNode.dataIndex);\r\n    });\r\n    return indices;\r\n  };\r\n\r\n  TreeNode.prototype.getValue = function (dimension) {\r\n    var data = this.hostTree.data;\r\n    return data.getStore().get(data.getDimensionIndex(dimension || 'value'), this.dataIndex);\r\n  };\r\n\r\n  TreeNode.prototype.setLayout = function (layout, merge) {\r\n    this.dataIndex >= 0 && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);\r\n  };\r\n  /**\r\n   * @return {Object} layout\r\n   */\r\n\r\n\r\n  TreeNode.prototype.getLayout = function () {\r\n    return this.hostTree.data.getItemLayout(this.dataIndex);\r\n  }; // @depcrecated\r\n  // getModel<T = unknown, S extends keyof T = keyof T>(path: S): Model<T[S]>\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\r\n\r\n  TreeNode.prototype.getModel = function (path) {\r\n    if (this.dataIndex < 0) {\r\n      return;\r\n    }\r\n\r\n    var hostTree = this.hostTree;\r\n    var itemModel = hostTree.data.getItemModel(this.dataIndex);\r\n    return itemModel.getModel(path);\r\n  }; // TODO: TYPE More specific model\r\n\r\n\r\n  TreeNode.prototype.getLevelModel = function () {\r\n    return (this.hostTree.levelModels || [])[this.depth];\r\n  };\r\n\r\n  TreeNode.prototype.setVisual = function (key, value) {\r\n    this.dataIndex >= 0 && this.hostTree.data.setItemVisual(this.dataIndex, key, value);\r\n  };\r\n  /**\r\n   * Get item visual\r\n   * FIXME: make return type better\r\n   */\r\n\r\n\r\n  TreeNode.prototype.getVisual = function (key) {\r\n    return this.hostTree.data.getItemVisual(this.dataIndex, key);\r\n  };\r\n\r\n  TreeNode.prototype.getRawIndex = function () {\r\n    return this.hostTree.data.getRawIndex(this.dataIndex);\r\n  };\r\n\r\n  TreeNode.prototype.getId = function () {\r\n    return this.hostTree.data.getId(this.dataIndex);\r\n  };\r\n  /**\r\n   * index in parent's children\r\n   */\r\n\r\n\r\n  TreeNode.prototype.getChildIndex = function () {\r\n    if (this.parentNode) {\r\n      var children = this.parentNode.children;\r\n\r\n      for (var i = 0; i < children.length; ++i) {\r\n        if (children[i] === this) {\r\n          return i;\r\n        }\r\n      }\r\n\r\n      return -1;\r\n    }\r\n\r\n    return -1;\r\n  };\r\n  /**\r\n   * if this is an ancestor of another node\r\n   *\r\n   * @param node another node\r\n   * @return if is ancestor\r\n   */\r\n\r\n\r\n  TreeNode.prototype.isAncestorOf = function (node) {\r\n    var parent = node.parentNode;\r\n\r\n    while (parent) {\r\n      if (parent === this) {\r\n        return true;\r\n      }\r\n\r\n      parent = parent.parentNode;\r\n    }\r\n\r\n    return false;\r\n  };\r\n  /**\r\n   * if this is an descendant of another node\r\n   *\r\n   * @param node another node\r\n   * @return if is descendant\r\n   */\r\n\r\n\r\n  TreeNode.prototype.isDescendantOf = function (node) {\r\n    return node !== this && node.isAncestorOf(this);\r\n  };\r\n\r\n  return TreeNode;\r\n}();\r\n\r\nexport { TreeNode };\r\n;\r\n\r\nvar Tree =\r\n/** @class */\r\nfunction () {\r\n  function Tree(hostModel) {\r\n    this.type = 'tree';\r\n    this._nodes = [];\r\n    this.hostModel = hostModel;\r\n  }\r\n\r\n  Tree.prototype.eachNode = function (options, cb, context) {\r\n    this.root.eachNode(options, cb, context);\r\n  };\r\n\r\n  Tree.prototype.getNodeByDataIndex = function (dataIndex) {\r\n    var rawIndex = this.data.getRawIndex(dataIndex);\r\n    return this._nodes[rawIndex];\r\n  };\r\n\r\n  Tree.prototype.getNodeById = function (name) {\r\n    return this.root.getNodeById(name);\r\n  };\r\n  /**\r\n   * Update item available by list,\r\n   * when list has been performed options like 'filterSelf' or 'map'.\r\n   */\r\n\r\n\r\n  Tree.prototype.update = function () {\r\n    var data = this.data;\r\n    var nodes = this._nodes;\r\n\r\n    for (var i = 0, len = nodes.length; i < len; i++) {\r\n      nodes[i].dataIndex = -1;\r\n    }\r\n\r\n    for (var i = 0, len = data.count(); i < len; i++) {\r\n      nodes[data.getRawIndex(i)].dataIndex = i;\r\n    }\r\n  };\r\n  /**\r\n   * Clear all layouts\r\n   */\r\n\r\n\r\n  Tree.prototype.clearLayouts = function () {\r\n    this.data.clearItemLayouts();\r\n  };\r\n  /**\r\n   * data node format:\r\n   * {\r\n   *     name: ...\r\n   *     value: ...\r\n   *     children: [\r\n   *         {\r\n   *             name: ...\r\n   *             value: ...\r\n   *             children: ...\r\n   *         },\r\n   *         ...\r\n   *     ]\r\n   * }\r\n   */\r\n\r\n\r\n  Tree.createTree = function (dataRoot, hostModel, beforeLink) {\r\n    var tree = new Tree(hostModel);\r\n    var listData = [];\r\n    var dimMax = 1;\r\n    buildHierarchy(dataRoot);\r\n\r\n    function buildHierarchy(dataNode, parentNode) {\r\n      var value = dataNode.value;\r\n      dimMax = Math.max(dimMax, zrUtil.isArray(value) ? value.length : 1);\r\n      listData.push(dataNode);\r\n      var node = new TreeNode(convertOptionIdName(dataNode.name, ''), tree);\r\n      parentNode ? addChild(node, parentNode) : tree.root = node;\r\n\r\n      tree._nodes.push(node);\r\n\r\n      var children = dataNode.children;\r\n\r\n      if (children) {\r\n        for (var i = 0; i < children.length; i++) {\r\n          buildHierarchy(children[i], node);\r\n        }\r\n      }\r\n    }\r\n\r\n    tree.root.updateDepthAndHeight(0);\r\n    var dimensions = prepareSeriesDataSchema(listData, {\r\n      coordDimensions: ['value'],\r\n      dimensionsCount: dimMax\r\n    }).dimensions;\r\n    var list = new SeriesData(dimensions, hostModel);\r\n    list.initData(listData);\r\n    beforeLink && beforeLink(list);\r\n    linkSeriesData({\r\n      mainData: list,\r\n      struct: tree,\r\n      structAttr: 'tree'\r\n    });\r\n    tree.update();\r\n    return tree;\r\n  };\r\n\r\n  return Tree;\r\n}();\r\n/**\r\n * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,\r\n * so this function is not ready and not necessary to be public.\r\n */\r\n\r\n\r\nfunction addChild(child, node) {\r\n  var children = node.children;\r\n\r\n  if (child.parentNode === node) {\r\n    return;\r\n  }\r\n\r\n  children.push(child);\r\n  child.parentNode = node;\r\n}\r\n\r\nexport default Tree;"],"mappings":"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"},"metadata":{},"sourceType":"module"}