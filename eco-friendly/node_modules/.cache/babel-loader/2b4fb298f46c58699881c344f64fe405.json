{"ast":null,"code":"export default {\n  components: {},\n\n  data() {\n    return {\n      //商家信息(包含坐标信息)\n      businessDetail: {},\n      //地图数据\n      mapData: {\n        //中心坐标\n        center: {\n          lng: 0,\n          lat: 0\n        },\n        //缩放级别\n        zoom: 13\n      },\n      //BMap类\n      BMap: null,\n      //地图对象\n      map: null\n    };\n  },\n\n  created() {},\n\n  methods: {\n    //地图预处理\n    async mapHandler({\n      BMap,\n      map\n    }) {\n      if (this.businessId) {\n        //可以在此处请求接口获取坐标数据\n        await this.getMallBusinessDetail();\n      } //保存百度地图类\n\n\n      this.BMap = BMap; //保存地图对象\n\n      this.map = map; //如果一开始坐标存在(编辑的时候)\n\n      if (this.businessDetail.longitude && this.businessDetail.latitude) {\n        //设置坐标\n        this.mapData.center.lng = this.businessDetail.longitude;\n        this.mapData.center.lat = this.businessDetail.latitude;\n      } else {\n        //如果坐标不存在则动态获取当前浏览器坐标（创建的时候）\n        let geolocation = new BMap.Geolocation(); //获取当前的坐标（使用promise 将异步转换为同步）\n\n        await new Promise(resolve => {\n          geolocation.getCurrentPosition(r => {\n            this.mapData.center.lng = this.businessDetail.longitude = r.point.lng;\n            this.mapData.center.lat = this.businessDetail.latitude = r.point.lat;\n            resolve();\n          });\n        });\n      } //创建定位标记\n\n\n      let marker = new BMap.Marker(new BMap.Point(this.businessDetail.longitude, this.businessDetail.latitude)); //将标记添加到地图上\n\n      map.addOverlay(marker);\n    },\n\n    //在地图上选择区域\n    getLocation(e) {\n      //设置经度\n      this.businessDetail.longitude = e.point.lng; //设置纬度\n\n      this.businessDetail.latitude = e.point.lat; //百度地图类\n\n      let BMapGL = this.BMap; //地图对象\n\n      let map = this.map; //清除地图上所有的覆盖物(保证每次点击只有一个标记)\n\n      map.clearOverlays(); //创建定位标记\n\n      let marker = new BMapGL.Marker(new BMapGL.Point(e.point.lng, e.point.lat)); //将标记添加到地图上\n\n      map.addOverlay(marker); //创建坐标解析对象\n\n      let geoc = new BMapGL.Geocoder(); //解析当前的坐标成地址\n\n      geoc.getLocation(e.point, rs => {\n        //获取地址对象\n        let addressComp = rs.addressComponents; //拼接出详细地址\n\n        this.businessDetail.address = addressComp.province + addressComp.city + addressComp.district + addressComp.street + addressComp.streetNumber;\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAoBA;EACAA,cADA;;EAIAC;IACA;MACA;MACAC,kBAFA;MAGA;MACAC;QACA;QACAC;UAAAC;UAAAC;QAAA,CAFA;QAGA;QACAC;MAJA,CAJA;MAUA;MACAC,UAXA;MAYA;MACAC;IAbA;EAeA,CApBA;;EAsBAC,WACA,CAvBA;;EAyBAC;IACA;IACA;MAAAH;MAAAC;IAAA;MACA;QACA;QACA;MACA,CAJA,CAKA;;;MACA,iBANA,CAOA;;MACA,eARA,CASA;;MACA;QACA;QACA;QACA;MACA,CAJA,MAIA;QACA;QACA,yCAFA,CAGA;;QACA;UACAG;YACA,0DACAC,WADA;YAEA;YACAC;UACA,CALA;QAMA,CAPA;MAQA,CA1BA,CA2BA;;;MACA,6BACA,eACA,6BADA,EAEA,4BAFA,CADA,EA5BA,CAkCA;;MACAL;IACA,CAtCA;;IAuCA;IACAM;MACA;MACA,4CAFA,CAGA;;MACA,2CAJA,CAKA;;MACA,uBANA,CAOA;;MACA,mBARA,CASA;;MACAN,oBAVA,CAWA;;MACA,2EAZA,CAaA;;MACAA,uBAdA,CAeA;;MACA,iCAhBA,CAiBA;;MACAO;QACA;QACA,uCAFA,CAGA;;QACA,8BACAC,uBACAA,gBADA,GAEAA,oBAFA,GAGAA,kBAHA,GAIAA,wBALA;MAMA,CAVA;IAWA;;EArEA;AAzBA","names":["components","data","businessDetail","mapData","center","lng","lat","zoom","BMap","map","created","methods","geolocation","r","resolve","getLocation","geoc","addressComp"],"sourceRoot":"src/views","sources":["TrackingOfPollutants.vue"],"sourcesContent":["<template>\r\n  <baidu-map\r\n      class=\"map-wrap\"\r\n      :center=\"mapData.center\"\r\n      :zoom=\"mapData.zoom\"\r\n      @ready=\"mapHandler\"\r\n      @click=\"getLocation\"\r\n  >\r\n    <bm-navigation anchor=\"BMAP_ANCHOR_TOP_LEFT\"></bm-navigation>\r\n    <bm-city-list anchor=\"BMAP_ANCHOR_TOP_RIGHT\"></bm-city-list>\r\n    <bm-geolocation\r\n        anchor=\"BMAP_ANCHOR_BOTTOM_RIGHT\"\r\n        :showAddressBar=\"true\"\r\n        :autoLocation=\"true\"\r\n    ></bm-geolocation>\r\n  </baidu-map>\r\n</template>\r\n<script>\r\n\r\n\r\nexport default {\r\n  components: {\r\n\r\n  },\r\n  data() {\r\n    return {\r\n      //商家信息(包含坐标信息)\r\n      businessDetail:{},\r\n      //地图数据\r\n      mapData: {\r\n        //中心坐标\r\n        center: { lng: 0, lat: 0 },\r\n        //缩放级别\r\n        zoom: 13\r\n      },\r\n      //BMap类\r\n      BMap: null,\r\n      //地图对象\r\n      map: null\r\n    }\r\n  },\r\n\r\n  created() {\r\n  },\r\n\r\n  methods: {\r\n    //地图预处理\r\n    async mapHandler({ BMap, map }) {\r\n      if (this.businessId) {\r\n        //可以在此处请求接口获取坐标数据\r\n        await this.getMallBusinessDetail()\r\n      }\r\n      //保存百度地图类\r\n      this.BMap = BMap\r\n      //保存地图对象\r\n      this.map = map\r\n      //如果一开始坐标存在(编辑的时候)\r\n      if (this.businessDetail.longitude && this.businessDetail.latitude) {\r\n        //设置坐标\r\n        this.mapData.center.lng = this.businessDetail.longitude\r\n        this.mapData.center.lat = this.businessDetail.latitude\r\n      } else {\r\n        //如果坐标不存在则动态获取当前浏览器坐标（创建的时候）\r\n        let geolocation = new BMap.Geolocation()\r\n        //获取当前的坐标（使用promise 将异步转换为同步）\r\n        await new Promise((resolve) => {\r\n          geolocation.getCurrentPosition((r) => {\r\n            this.mapData.center.lng = this.businessDetail.longitude =\r\n                r.point.lng\r\n            this.mapData.center.lat = this.businessDetail.latitude = r.point.lat\r\n            resolve()\r\n          })\r\n        })\r\n      }\r\n      //创建定位标记\r\n      let marker = new BMap.Marker(\r\n          new BMap.Point(\r\n              this.businessDetail.longitude,\r\n              this.businessDetail.latitude\r\n          )\r\n      )\r\n      //将标记添加到地图上\r\n      map.addOverlay(marker)\r\n    },\r\n    //在地图上选择区域\r\n    getLocation(e) {\r\n      //设置经度\r\n      this.businessDetail.longitude = e.point.lng\r\n      //设置纬度\r\n      this.businessDetail.latitude = e.point.lat\r\n      //百度地图类\r\n      let BMapGL = this.BMap\r\n      //地图对象\r\n      let map = this.map\r\n      //清除地图上所有的覆盖物(保证每次点击只有一个标记)\r\n      map.clearOverlays()\r\n      //创建定位标记\r\n      let marker = new BMapGL.Marker(new BMapGL.Point(e.point.lng, e.point.lat))\r\n      //将标记添加到地图上\r\n      map.addOverlay(marker)\r\n      //创建坐标解析对象\r\n      let geoc = new BMapGL.Geocoder()\r\n      //解析当前的坐标成地址\r\n      geoc.getLocation(e.point, (rs) => {\r\n        //获取地址对象\r\n        let addressComp = rs.addressComponents\r\n        //拼接出详细地址\r\n        this.businessDetail.address =\r\n            addressComp.province +\r\n            addressComp.city +\r\n            addressComp.district +\r\n            addressComp.street +\r\n            addressComp.streetNumber\r\n      })\r\n    },\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n<style>\r\n.map-wrap {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n.BMap_cpyCtrl {\r\n  display: none;\r\n}\r\n.anchorBL {\r\n  display: none!important;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}