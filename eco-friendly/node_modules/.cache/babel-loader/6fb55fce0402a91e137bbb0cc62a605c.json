{"ast":null,"code":"import commonMixin from '../base/mixins/common.js';\nimport bindEvents from '../base/bindEvent.js';\nimport { createPoint, createSize } from '../base/factory.js';\nexport default {\n  name: 'bm-info-window',\n  mixins: [commonMixin('overlay')],\n  props: {\n    show: {\n      type: Boolean\n    },\n    position: {\n      type: Object\n    },\n    title: {\n      type: String\n    },\n    width: {\n      type: Number\n    },\n    height: {\n      type: Number\n    },\n    maxWidth: {\n      type: Number\n    },\n    offset: {\n      type: Object\n    },\n    maximize: {\n      type: Boolean\n    },\n    autoPan: {\n      type: Boolean\n    },\n    closeOnClick: {\n      type: Boolean,\n      default: true\n    },\n    message: {\n      type: String\n    }\n  },\n  watch: {\n    show(val) {\n      val ? this.openInfoWindow() : this.closeInfoWindow();\n    },\n\n    'position.lng'(val, oldVal) {\n      this.reload();\n    },\n\n    'position.lat'(val, oldVal) {\n      this.reload();\n    },\n\n    'offset.width'(val, oldVal) {\n      this.reload();\n    },\n\n    'offset.height'(val) {\n      this.reload();\n    },\n\n    maxWidth() {\n      this.reload();\n    },\n\n    width(val) {\n      this.originInstance.setWidth(val);\n    },\n\n    height(val) {\n      this.originInstance.setHeight(val);\n    },\n\n    title(val) {\n      this.originInstance.setTitle(val);\n    },\n\n    maximize(val) {\n      val ? this.originInstance.enableMaximize() : this.originInstance.disableMaximize();\n    },\n\n    autoPan(val) {\n      val ? this.originInstance.enableAutoPan() : this.originInstance.disableAutoPan();\n    },\n\n    closeOnClick(val) {\n      val ? this.originInstance.enableCloseOnClick() : this.originInstance.disableCloseOnClick();\n    }\n\n  },\n  methods: {\n    redraw() {\n      this.originInstance.redraw();\n    },\n\n    load() {\n      const {\n        BMap,\n        map,\n        show,\n        title,\n        width,\n        height,\n        maxWidth,\n        offset,\n        autoPan,\n        closeOnClick,\n        message,\n        maximize,\n        bindObserver,\n        $parent\n      } = this;\n      const $content = this.$el;\n      const overlay = new BMap.InfoWindow($content, {\n        width,\n        height,\n        title,\n        maxWidth,\n        offset: createSize(BMap, offset),\n        enableAutoPan: autoPan,\n        enableCloseOnClick: closeOnClick,\n        enableMessage: typeof message === 'undefined',\n        message\n      });\n      maximize ? overlay.enableMaximize() : overlay.disableMaximize();\n      bindEvents.call(this, overlay);\n      this.originInstance = overlay;\n      overlay.redraw();\n      [].forEach.call($content.querySelectorAll('img'), $img => {\n        $img.onload = () => overlay.redraw();\n      });\n      bindObserver();\n      this.$container = $parent.originInstance && $parent.originInstance.openInfoWindow ? $parent.originInstance : map;\n      show && this.openInfoWindow();\n    },\n\n    bindObserver() {\n      const MutationObserver = global.MutationObserver;\n\n      if (!MutationObserver) {\n        return;\n      }\n\n      const {\n        $el,\n        originInstance\n      } = this;\n      this.observer = new MutationObserver(mutations => originInstance.redraw());\n      this.observer.observe($el, {\n        attributes: true,\n        childList: true,\n        characterData: true,\n        subtree: true\n      });\n    },\n\n    openInfoWindow() {\n      const {\n        BMap,\n        $container,\n        position,\n        originInstance\n      } = this;\n      $container.openInfoWindow(originInstance, createPoint(BMap, position));\n    },\n\n    closeInfoWindow() {\n      this.$container.closeInfoWindow(this.originInstance);\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAOA;AACA;AACA;AAEA;EACAA,sBADA;EAEAC,gCAFA;EAGAC;IACAC;MACAC;IADA,CADA;IAIAC;MACAD;IADA,CAJA;IAOAE;MACAF;IADA,CAPA;IAUAG;MACAH;IADA,CAVA;IAaAI;MACAJ;IADA,CAbA;IAgBAK;MACAL;IADA,CAhBA;IAmBAM;MACAN;IADA,CAnBA;IAsBAO;MACAP;IADA,CAtBA;IAyBAQ;MACAR;IADA,CAzBA;IA4BAS;MACAT,aADA;MAEAU;IAFA,CA5BA;IAgCAC;MACAX;IADA;EAhCA,CAHA;EAuCAY;IACAb;MACAc;IACA,CAHA;;IAIA;MACA;IACA,CANA;;IAOA;MACA;IACA,CATA;;IAUA;MACA;IACA,CAZA;;IAaA;MACA;IACA,CAfA;;IAgBAR;MACA;IACA,CAlBA;;IAmBAF;MACA;IACA,CArBA;;IAsBAC;MACA;IACA,CAxBA;;IAyBAF;MACA;IACA,CA3BA;;IA4BAK;MACAM;IACA,CA9BA;;IA+BAL;MACAK;IACA,CAjCA;;IAkCAJ;MACAI;IACA;;EApCA,CAvCA;EA6EAC;IACAC;MACA;IACA,CAHA;;IAIAC;MACA;QAAAC;QAAAC;QAAAnB;QAAAG;QAAAC;QAAAC;QAAAC;QAAAC;QAAAE;QAAAC;QAAAE;QAAAJ;QAAAY;QAAAC;MAAA;MACA;MACA;QACAjB,KADA;QAEAC,MAFA;QAGAF,KAHA;QAIAG,QAJA;QAKAC,gCALA;QAMAe,sBANA;QAOAC,gCAPA;QAQAC,6CARA;QASAZ;MATA;MAYAJ;MACAiB;MACA;MACAC;MACA;QACAC;MACA,CAFA;MAGAP;MACA;MACApB;IACA,CA7BA;;IA8BAoB;MACA;;MACA;QACA;MACA;;MACA;QAAAQ;QAAAC;MAAA;MACA;MACA;QAAAC;QAAAC;QAAAC;QAAAC;MAAA;IACA,CAtCA;;IAuCAC;MACA;QAAAhB;QAAAiB;QAAAjC;QAAA2B;MAAA;MACAM;IACA,CA1CA;;IA2CAC;MACA;IACA;;EA7CA;AA7EA","names":["name","mixins","props","show","type","position","title","width","height","maxWidth","offset","maximize","autoPan","closeOnClick","default","message","watch","val","methods","redraw","load","BMap","map","bindObserver","$parent","enableAutoPan","enableCloseOnClick","enableMessage","bindEvents","overlay","$img","$el","originInstance","attributes","childList","characterData","subtree","openInfoWindow","$container","closeInfoWindow"],"sourceRoot":"node_modules/vue-baidu-map/components/overlays","sources":["InfoWindow.vue"],"sourcesContent":["<template>\n<div v-show=\"show\">\n  <slot></slot>\n</div>\n</template>\n\n<script>\nimport commonMixin from '../base/mixins/common.js'\nimport bindEvents from '../base/bindEvent.js'\nimport {createPoint, createSize} from '../base/factory.js'\n\nexport default {\n  name: 'bm-info-window',\n  mixins: [commonMixin('overlay')],\n  props: {\n    show: {\n      type: Boolean\n    },\n    position: {\n      type: Object\n    },\n    title: {\n      type: String\n    },\n    width: {\n      type: Number\n    },\n    height: {\n      type: Number\n    },\n    maxWidth: {\n      type: Number\n    },\n    offset: {\n      type: Object\n    },\n    maximize: {\n      type: Boolean\n    },\n    autoPan: {\n      type: Boolean\n    },\n    closeOnClick: {\n      type: Boolean,\n      default: true\n    },\n    message: {\n      type: String\n    }\n  },\n  watch: {\n    show (val) {\n      val ? this.openInfoWindow() : this.closeInfoWindow()\n    },\n    'position.lng' (val, oldVal) {\n      this.reload()\n    },\n    'position.lat' (val, oldVal) {\n      this.reload()\n    },\n    'offset.width' (val, oldVal) {\n      this.reload()\n    },\n    'offset.height' (val) {\n      this.reload()\n    },\n    maxWidth () {\n      this.reload()\n    },\n    width (val) {\n      this.originInstance.setWidth(val)\n    },\n    height (val) {\n      this.originInstance.setHeight(val)\n    },\n    title (val) {\n      this.originInstance.setTitle(val)\n    },\n    maximize (val) {\n      val ? this.originInstance.enableMaximize() : this.originInstance.disableMaximize()\n    },\n    autoPan (val) {\n      val ? this.originInstance.enableAutoPan() : this.originInstance.disableAutoPan()\n    },\n    closeOnClick (val) {\n      val ? this.originInstance.enableCloseOnClick() : this.originInstance.disableCloseOnClick()\n    }\n  },\n  methods: {\n    redraw () {\n      this.originInstance.redraw()\n    },\n    load () {\n      const {BMap, map, show, title, width, height, maxWidth, offset, autoPan, closeOnClick, message, maximize, bindObserver, $parent} = this\n      const $content = this.$el\n      const overlay = new BMap.InfoWindow($content, {\n        width,\n        height,\n        title,\n        maxWidth,\n        offset: createSize(BMap, offset),\n        enableAutoPan: autoPan,\n        enableCloseOnClick: closeOnClick,\n        enableMessage: typeof message === 'undefined',\n        message\n      })\n\n      maximize ? overlay.enableMaximize() : overlay.disableMaximize()\n      bindEvents.call(this, overlay)\n      this.originInstance = overlay\n      overlay.redraw()\n      ;[].forEach.call($content.querySelectorAll('img'), $img => {\n        $img.onload = () => overlay.redraw()\n      })\n      bindObserver()\n      this.$container = $parent.originInstance && $parent.originInstance.openInfoWindow ? $parent.originInstance : map\n      show && this.openInfoWindow()\n    },\n    bindObserver () {\n      const MutationObserver = global.MutationObserver\n      if (!MutationObserver) {\n        return\n      }\n      const {$el, originInstance} = this\n      this.observer = new MutationObserver(mutations => originInstance.redraw())\n      this.observer.observe($el, {attributes: true, childList: true, characterData: true, subtree: true})\n    },\n    openInfoWindow () {\n      const {BMap, $container, position, originInstance} = this\n      $container.openInfoWindow(originInstance, createPoint(BMap, position))\n    },\n    closeInfoWindow () {\n      this.$container.closeInfoWindow(this.originInstance)\n    }\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}