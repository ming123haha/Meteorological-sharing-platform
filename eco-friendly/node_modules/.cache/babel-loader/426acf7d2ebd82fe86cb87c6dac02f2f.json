{"ast":null,"code":"import Map from \"@arcgis/core/Map\";\nimport FeatureLayer from \"@arcgis/core/layers/FeatureLayer.js\";\nimport MapView from \"@arcgis/core/views/MapView\";\nimport FeatureForm from \"@arcgis/core/widgets/FeatureForm\";\nexport default {\n  name: \"Home\",\n\n  data() {\n    return {\n      areaName: \"\",\n      visible: false,\n      result: {},\n      items: [\"test1\", \"test2\", \"test3\"]\n    };\n  },\n\n  mounted() {\n    this.initMap();\n  },\n\n  methods: {\n    initMap() {\n      let highlight, editFeature;\n      const template = {\n        //titie:\"站点信息\",\n        content: [{\n          type: \"fields\",\n          fieldInfos: [{\n            fieldName: \"city\",\n            label: \"地区名称\"\n          }, {\n            fieldName: \"station\",\n            label: \"站点名称\"\n          }]\n        }]\n      };\n      const featurelayer = new FeatureLayer({\n        outFields: [\"city\", \"station\"],\n        url: \"http://localhost:6080/arcgis/rest/services/安徽站点/MapServer\",\n        popupTemplate: template\n      });\n      const map = new Map({\n        basemap: \"dark-gray-vector\",\n        layers: [featurelayer]\n      }); //这个view相当于地图视图容器，指定了div等等属性\n\n      const view = new MapView({\n        container: \"viewDiv\",\n        map: map,\n        center: [117, 32],\n        zoom: 8\n      }); //监听地图点击事件\n\n      view.on('click', event => {\n        view.hitTest(event).then(response => {\n          if ( //如果点击的是目标矢量图层 并且图层图形数量大于1 完成对目标矢量图层的筛选\n          response.results.length > 0 && response.results[0].graphic && response.results[0].graphic.layer === featurelayer) {\n            //console.log(response.results[0].graphic.attributes.city)\n            this.areaName = response.results[0].graphic.attributes.city + \"(\" + response.results[0].graphic.attributes.station + \")\"; //数据双向绑定 获取点击图块的名称\n            //调用selecFeature方法\n\n            selectFeature(response.results[0].graphic.attributes[featurelayer.objectIdField]);\n            this.request.get(\"/nowatmospheredata/data?stationName=\" + response.results[0].graphic.attributes.station).then(res => {\n              console.log(res.aqi);\n            });\n            console.log(this.items);\n            this.visible = true; //let lat = Math.round(event.mapPoint.latitude * 1000000) / 1000000;\n            //let lon = Math.round(event.mapPoint.longitude * 1000000) / 1000000;\n            //alert(lon + \", \" + lat);\n          } else {\n            this.visible = false;\n          }\n        });\n      });\n\n      function selectFeature(objectId) {\n        featurelayer.queryFeatures({\n          objectIds: [objectId]\n        }).then(results => {\n          if (results.features.length > 0) {\n            //console.log(results.features[0])\n            console.log(results.fields.length);\n          }\n        });\n      }\n\n      view.ui.components = [];\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAsBA;AACA;AACA;AACA;AACA;EACAA,YADA;;EAEAC;IACA;MACAC,YADA;MAEAC,cAFA;MAGAC,UAHA;MAIAC;IAJA;EAMA,CATA;;EAUAC;IACA;EACA,CAZA;;EAeAC;IAEAC;MACA;MAGA;QACA;QACAC,UACA;UACAC,cADA;UAEAC,aACA;YACAC,iBADA;YAEAC;UAFA,CADA,EAKA;YACAD,oBADA;YAEAC;UAFA,CALA;QAFA,CADA;MAFA;MAmBA;QACAC,8BADA;QAEAC,gEAFA;QAGAC;MAHA;MAKA;QAEAC,2BAFA;QAGAC;MAHA,GA5BA,CAiCA;;MACA;QACAC,oBADA;QAEAC,QAFA;QAGAC,iBAHA;QAIAC;MAJA,GAlCA,CA0CA;;MACAC;QACAA;UACA;UACAC,+BACAA,2BADA,IAEAA,kDAHA,EAIA;YACA;YACA,yHAFA,CAEA;YACA;;YACAC;YAEA;cACAC;YACA,CAFA;YAGAA;YACA,oBAVA,CAaA;YACA;YACA;UACA,CApBA,MAqBA;YACA;UACA;QACA,CAzBA;MA0BA,CA3BA;;MA8BA;QAEAC;UACAC;QADA,GAEAC,IAFA,CAEAC;UACA;YACA;YACAJ;UACA;QACA,CAPA;MAQA;;MACAH;IACA;;EAvFA;AAfA","names":["name","data","areaName","visible","result","items","mounted","methods","initMap","content","type","fieldInfos","fieldName","label","outFields","url","popupTemplate","basemap","layers","container","map","center","zoom","view","response","selectFeature","console","featurelayer","objectIds","then","results"],"sourceRoot":"src/views","sources":["HomeView.vue"],"sourcesContent":["<template>\r\n  <div id=\"viewDiv\" style=\"width: 100%;height: 100%\">\r\n    <div v-show=\"visible\" style=\"position: absolute;right: 20px; bottom:400px\">\r\n      <el-card class=\"box-card\">\r\n        <div slot=\"header\" class=\"clearfix\">\r\n          <span>{{ areaName }}</span>\r\n        </div>\r\n        <div v-for=\"(item,i) in items\" :key=\"item\" class=\"text item\">\r\n          {{item}}\r\n        </div>\r\n      </el-card>\r\n    </div>\r\n<!-- arcgisapi样式  -->\r\n    <link\r\n        rel=\"stylesheet\"\r\n        href=\"https://js.arcgis.com/4.24/esri/themes/dark/main.css\"\r\n    />\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport Map from \"@arcgis/core/Map\";\r\nimport FeatureLayer from \"@arcgis/core/layers/FeatureLayer.js\"\r\nimport MapView from \"@arcgis/core/views/MapView\";\r\nimport FeatureForm from \"@arcgis/core/widgets/FeatureForm\";\r\nexport default {\r\n  name: \"Home\",\r\n  data() {\r\n    return {\r\n      areaName:\"\",\r\n      visible:false,\r\n      result:{},\r\n      items:[\"test1\",\"test2\",\"test3\"]\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n  },\r\n\r\n\r\n  methods: {\r\n\r\n    initMap(){\r\n      let highlight,editFeature\r\n\r\n\r\n      const template={\r\n        //titie:\"站点信息\",\r\n        content:[\r\n          {\r\n            type:\"fields\",\r\n            fieldInfos:[\r\n              {\r\n                fieldName:\"city\",\r\n                label:\"地区名称\"\r\n              },\r\n              {\r\n                fieldName:\"station\",\r\n                label:\"站点名称\"\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n\r\n      const featurelayer=new FeatureLayer({\r\n        outFields:[\"city\",\"station\"],\r\n        url:\"http://localhost:6080/arcgis/rest/services/安徽站点/MapServer\",\r\n        popupTemplate:template\r\n      });\r\n      const map=new Map({\r\n\r\n        basemap: \"dark-gray-vector\",\r\n        layers: [featurelayer]\r\n      })\r\n      //这个view相当于地图视图容器，指定了div等等属性\r\n      const view=new MapView({\r\n        container: \"viewDiv\",\r\n        map: map,\r\n        center: [117, 32],\r\n        zoom: 8,\r\n\r\n      });\r\n\r\n      //监听地图点击事件\r\n      view.on('click', event => {\r\n        view.hitTest(event).then((response) => {\r\n          if (    //如果点击的是目标矢量图层 并且图层图形数量大于1 完成对目标矢量图层的筛选\r\n              response.results.length > 0 &&\r\n              response.results[0].graphic &&\r\n              response.results[0].graphic.layer === featurelayer\r\n          ){\r\n            //console.log(response.results[0].graphic.attributes.city)\r\n            this.areaName=response.results[0].graphic.attributes.city+\"(\"+response.results[0].graphic.attributes.station+\")\"   //数据双向绑定 获取点击图块的名称\r\n            //调用selecFeature方法\r\n            selectFeature(response.results[0].graphic.attributes[featurelayer.objectIdField])\r\n\r\n            this.request.get(\"/nowatmospheredata/data?stationName=\"+response.results[0].graphic.attributes.station).then(res => {\r\n               console.log(res.aqi)\r\n            })\r\n            console.log(this.items)\r\n            this.visible=true\r\n\r\n\r\n            //let lat = Math.round(event.mapPoint.latitude * 1000000) / 1000000;\r\n            //let lon = Math.round(event.mapPoint.longitude * 1000000) / 1000000;\r\n            //alert(lon + \", \" + lat);\r\n          }\r\n          else{\r\n            this.visible=false\r\n          }\r\n        });\r\n      });\r\n\r\n\r\n      function selectFeature(objectId){\r\n\r\n        featurelayer.queryFeatures({\r\n          objectIds:[objectId],\r\n        }).then((results=>{\r\n          if(results.features.length>0){\r\n            //console.log(results.features[0])\r\n            console.log(results.fields.length)\r\n          }\r\n        }))\r\n      }\r\n      view.ui.components=[];\r\n    },\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.text {\r\n  font-size: 14px;\r\n}\r\n\r\n.item {\r\n  margin-bottom: 18px;\r\n}\r\n\r\n.clearfix:before,\r\n.clearfix:after {\r\n  display: table;\r\n  content: \"\";\r\n}\r\n.clearfix:after {\r\n  clear: both\r\n}\r\n\r\n.box-card {\r\n  width: 240px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}