{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.includes.js\";\n\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.25/esri/copyright.txt for details.\n*/\nimport \"./has.js\";\nimport { strict as e } from \"./jsonMap.js\";\nimport { isSome as s, unwrapOr as t, isNone as r } from \"./maybe.js\";\nimport { getReferenceEllipsoid as i } from \"../geometry/projectionEllipsoid.js\";\nimport { earth as n, mars as a, moon as u } from \"../geometry/support/Ellipsoid.js\";\nimport { isEarth as c, isWKIDFromMars as o, isWKIDFromMoon as l } from \"../geometry/support/spatialReferenceUtils.js\";\nimport m from \"../geometry/support/WKIDUnitConversion.js\";\n\nconst f = 39.37,\n      d = n.radius * Math.PI / 200,\n      U = /UNIT\\[([^\\]]+)\\]\\]$/i,\n      q = m,\n      h = /UNIT\\[([^\\]]+)\\]/i,\n      B = new Set([4261, 4305, 4807, 4810, 4811, 4812, 4816, 4819, 4821, 4901, 4902, 37225, 104139, 104140]),\n      p = e()({\n  meter: \"meters\",\n  foot: \"feet\",\n  foot_us: \"us-feet\",\n  foot_clarke: \"clarke-feet\",\n  yard_clarke: \"clarke-yards\",\n  link_clarke: \"clarke-links\",\n  yard_sears: \"sears-yards\",\n  foot_sears: \"sears-feet\",\n  chain_sears: \"sears-chains\",\n  chain_benoit_1895_b: \"benoit-1895-b-chains\",\n  yard_indian: \"indian-yards\",\n  yard_indian_1937: \"indian-1937-yards\",\n  foot_gold_coast: \"gold-coast-feet\",\n  chain_sears_1922_truncated: \"sears-1922-truncated-chains\",\n  \"50_kilometers\": \"50-kilometers\",\n  \"150_kilometers\": \"150-kilometers\"\n}),\n      k = e => e * e,\n      b = e => e * e * e,\n      y = {\n  length: {\n    baseUnit: \"meters\",\n    units: {\n      millimeters: {\n        inBaseUnits: .001\n      },\n      centimeters: {\n        inBaseUnits: .01\n      },\n      decimeters: {\n        inBaseUnits: .1\n      },\n      meters: {\n        inBaseUnits: 1\n      },\n      kilometers: {\n        inBaseUnits: 1e3\n      },\n      inches: {\n        inBaseUnits: .0254\n      },\n      feet: {\n        inBaseUnits: .3048\n      },\n      yards: {\n        inBaseUnits: .9144\n      },\n      miles: {\n        inBaseUnits: 1609.344\n      },\n      \"nautical-miles\": {\n        inBaseUnits: 1852\n      },\n      \"us-feet\": {\n        inBaseUnits: 1200 / 3937\n      }\n    }\n  },\n  area: {\n    baseUnit: \"square-meters\",\n    units: {\n      \"square-millimeters\": {\n        inBaseUnits: k(.001)\n      },\n      \"square-centimeters\": {\n        inBaseUnits: k(.01)\n      },\n      \"square-decimeters\": {\n        inBaseUnits: k(.1)\n      },\n      \"square-meters\": {\n        inBaseUnits: 1\n      },\n      \"square-kilometers\": {\n        inBaseUnits: k(1e3)\n      },\n      \"square-inches\": {\n        inBaseUnits: k(.0254)\n      },\n      \"square-feet\": {\n        inBaseUnits: k(.3048)\n      },\n      \"square-yards\": {\n        inBaseUnits: k(.9144)\n      },\n      \"square-miles\": {\n        inBaseUnits: k(1609.344)\n      },\n      \"square-us-feet\": {\n        inBaseUnits: k(1200 / 3937)\n      },\n      acres: {\n        inBaseUnits: .0015625 * k(1609.344)\n      },\n      ares: {\n        inBaseUnits: 100\n      },\n      hectares: {\n        inBaseUnits: 1e4\n      }\n    }\n  },\n  volume: {\n    baseUnit: \"liters\",\n    units: {\n      liters: {\n        inBaseUnits: 1\n      },\n      \"cubic-millimeters\": {\n        inBaseUnits: 1e3 * b(.001)\n      },\n      \"cubic-centimeters\": {\n        inBaseUnits: 1e3 * b(.01)\n      },\n      \"cubic-decimeters\": {\n        inBaseUnits: 1e3 * b(.1)\n      },\n      \"cubic-meters\": {\n        inBaseUnits: 1e3\n      },\n      \"cubic-kilometers\": {\n        inBaseUnits: 1e3 * b(1e3)\n      },\n      \"cubic-inches\": {\n        inBaseUnits: 1e3 * b(.0254)\n      },\n      \"cubic-feet\": {\n        inBaseUnits: 1e3 * b(.3048)\n      },\n      \"cubic-yards\": {\n        inBaseUnits: 1e3 * b(.9144)\n      },\n      \"cubic-miles\": {\n        inBaseUnits: 1e3 * b(1609.344)\n      }\n    }\n  },\n  angle: {\n    baseUnit: \"radians\",\n    units: {\n      radians: {\n        inBaseUnits: 1\n      },\n      degrees: {\n        inBaseUnits: Math.PI / 180\n      }\n    }\n  }\n},\n      _ = (() => {\n  const e = {};\n\n  for (const s in y) for (const t in y[s].units) e[t] = s;\n\n  return e;\n})();\n\nfunction M(e, s, t) {\n  return e * y[t].units[s].inBaseUnits;\n}\n\nfunction g(e, s, t) {\n  return e / y[t].units[s].inBaseUnits;\n}\n\nconst w = [\"metric\", \"imperial\", \"square-inches\", \"square-feet\", \"square-yards\", \"square-miles\", \"square-us-feet\", \"square-meters\", \"square-kilometers\", \"acres\", \"ares\", \"hectares\"],\n      S = [\"metric\", \"imperial\", \"inches\", \"feet\", \"yards\", \"miles\", \"nautical-miles\", \"us-feet\", \"meters\", \"kilometers\"],\n      I = new Map([[\"meters\", \"square-meters\"], [\"feet\", \"square-feet\"], [\"us-feet\", \"square-us-feet\"]]);\n\nfunction j(e) {\n  return \"imperial\" === e || \"metric\" === e;\n}\n\nfunction P(e) {\n  const s = _[e];\n  if (!s) throw new Error(\"unknown type\");\n  return s;\n}\n\nfunction C(e) {\n  return y[e].baseUnit;\n}\n\nfunction D(e) {\n  return C(P(e));\n}\n\nfunction x(e, s = null) {\n  return s = s || P(e), y[s].baseUnit === e;\n}\n\nfunction E(e, s, t) {\n  if (s === t) return e;\n  const r = P(s);\n  if (r !== P(t)) throw new Error(\"incompatible units\");\n  const i = x(s, r) ? e : M(e, s, r);\n  return x(t, r) ? i : g(i, t, r);\n}\n\nfunction N(e, s, t) {\n  switch (t) {\n    case \"metric\":\n      return O(e, s);\n\n    case \"imperial\":\n      return K(e, s);\n\n    default:\n      return t;\n  }\n}\n\nfunction v(e, s, t) {\n  switch (t) {\n    case \"metric\":\n      return J(e, s);\n\n    case \"imperial\":\n      return R(e, s);\n\n    default:\n      return t;\n  }\n}\n\nfunction F(e, s, t) {\n  switch (t) {\n    case \"metric\":\n      return A(e, s);\n\n    case \"imperial\":\n      return T(e, s);\n\n    default:\n      return t;\n  }\n}\n\nfunction O(e, s) {\n  const t = E(e, s, \"meters\");\n  return Math.abs(t) < 3e3 ? \"meters\" : \"kilometers\";\n}\n\nfunction J(e, s) {\n  const t = E(e, s, \"meters\");\n  return Math.abs(t) < 1e5 ? \"meters\" : \"kilometers\";\n}\n\nfunction K(e, s) {\n  const t = E(e, s, \"feet\");\n  return Math.abs(t) < 1e3 ? \"feet\" : \"miles\";\n}\n\nfunction R(e, s) {\n  const t = E(e, s, \"feet\");\n  return Math.abs(t) < 1e5 ? \"feet\" : \"miles\";\n}\n\nfunction A(e, s) {\n  const t = E(e, s, \"square-meters\");\n  return Math.abs(t) < 3e6 ? \"square-meters\" : \"square-kilometers\";\n}\n\nfunction T(e, s) {\n  const t = E(e, s, \"square-feet\");\n  return Math.abs(t) < 1e6 ? \"square-feet\" : \"square-miles\";\n}\n\nfunction Y(e, s, t) {\n  return E(e, s, \"meters\") / (t * Math.PI / 180);\n}\n\nfunction G(e) {\n  return p.fromJSON(e.toLowerCase()) || null;\n}\n\nfunction H(e) {\n  return p.toJSON(e) || null;\n}\n\nfunction L(e) {\n  if (s(e) && !c(e)) return 1;\n  const t = $(e);\n  return t > 1e5 ? 1 : t;\n}\n\nfunction W(e) {\n  return $(e) >= i(e).metersPerDegree ? \"meters\" : X(e);\n}\n\nfunction $(e, s = n.metersPerDegree) {\n  return t(z(e, !0), s);\n}\n\nfunction z(e, t = !1) {\n  const r = s(e) ? e.wkid : null,\n        i = s(e) ? e.wkt : null;\n  let n = null;\n\n  if (r) {\n    if (o(r)) return a.metersPerDegree;\n    if (l(r)) return u.metersPerDegree;\n    n = q.values[q[r]], !n && t && B.has(r) && (n = d);\n  } else i && (re(i) ? n = Q(U.exec(i), n) : te(i) && (n = Q(h.exec(i), n)));\n\n  return n;\n}\n\nfunction Q(e, s) {\n  return e && e[1] ? V(e[1]) : s;\n}\n\nfunction V(e) {\n  return parseFloat(e.split(\",\")[1]);\n}\n\nfunction X(e) {\n  const t = s(e) ? e.wkid : null,\n        r = s(e) ? e.wkt : null;\n  let i = null;\n  if (t) i = q.units[q[t]];else if (r) {\n    const e = re(r) ? U : te(r) ? h : null;\n\n    if (e) {\n      const s = e.exec(r);\n      s && s[1] && (i = ne(s[1]));\n    }\n  }\n  return s(i) ? G(i) : null;\n}\n\nfunction Z(e) {\n  const s = X(e);\n  return r(s) || !S.includes(s) ? null : s;\n}\n\nfunction ee(e) {\n  const s = W(e);\n  return r(s) || !S.includes(s) ? null : s;\n}\n\nfunction se(e) {\n  const s = X(e);\n  return r(s) ? null : I.get(s);\n}\n\nfunction te(e) {\n  return /^GEOCCS/i.test(e);\n}\n\nfunction re(e) {\n  return /^PROJCS/i.test(e);\n}\n\nconst ie = 1e-7;\n\nfunction ne(e) {\n  const s = /[\\\\\"\\\\']{1}([^\\\\\"\\\\']+)/.exec(e);\n  let t = s && s[1];\n\n  if (!t || !q.units.includes(t)) {\n    const s = V(e);\n    t = null;\n    const r = q.values;\n\n    for (let e = 0; e < r.length; ++e) if (Math.abs(s - r[e]) < ie) {\n      t = q.units[e];\n      break;\n    }\n  }\n\n  return t;\n}\n\nfunction ae(e) {\n  const s = X(e);\n  if (r(s)) return null;\n\n  switch (s) {\n    case \"feet\":\n    case \"us-feet\":\n    case \"clarke-feet\":\n    case \"clarke-yards\":\n    case \"clarke-links\":\n    case \"sears-yards\":\n    case \"sears-feet\":\n    case \"sears-chains\":\n    case \"benoit-1895-b-chains\":\n    case \"indian-yards\":\n    case \"indian-1937-yards\":\n    case \"gold-coast-feet\":\n    case \"sears-1922-truncated-chains\":\n      return \"imperial\";\n\n    case \"50-kilometers\":\n    case \"150-kilometers\":\n    case \"meters\":\n      return \"metric\";\n  }\n\n  return null;\n}\n\nfunction ue(e) {\n  const s = \"metric\";\n  if (r(e)) return s;\n  const i = e.map,\n        n = i && \"portalItem\" in i ? i.portalItem?.portal : null;\n\n  if (n) {\n    switch (n?.user?.units ?? n.units) {\n      case s:\n        return s;\n\n      case \"english\":\n        return \"imperial\";\n    }\n  }\n\n  return t(ae(e.spatialReference), s);\n}\n\nconst ce = {\n  esriAcres: \"acres\",\n  esriAres: \"ares\",\n  esriHectares: \"hectares\",\n  esriSquareCentimeters: \"square-centimeters\",\n  esriSquareDecimeters: \"square-decimeters\",\n  esriSquareFeet: \"square-feet\",\n  esriSquareInches: \"square-inches\",\n  esriSquareKilometers: \"square-kilometers\",\n  esriSquareMeters: \"square-meters\",\n  esriSquareMiles: \"square-miles\",\n  esriSquareMillimeters: \"square-millimeters\",\n  esriSquareUsFeet: \"square-us-feet\",\n  esriSquareYards: \"square-yards\"\n},\n      oe = {\n  esriCentimeters: \"centimeters\",\n  esriDecimeters: \"decimeters\",\n  esriFeet: \"feet\",\n  esriInches: \"inches\",\n  esriKilometers: \"kilometers\",\n  esriMeters: \"meters\",\n  esriMiles: \"miles\",\n  esriMillimeters: \"millimeters\",\n  esriNauticalMiles: \"nautical-miles\",\n  esriYards: \"yards\"\n},\n      le = e()(ce),\n      me = e()(oe),\n      fe = e()({ ...ce,\n  ...oe\n});\nexport { se as areaUnitFromSpatialReference, le as areaUnitsJSONMap, D as baseUnitForUnit, C as baseUnitForUnitType, E as convertUnit, ue as getDefaultUnitForView, ae as getDefaultUnitSystem, z as getMetersPerUnit, $ as getMetersPerUnitForSR, L as getMetersPerVerticalUnitForSR, X as getUnitString, W as getVerticalUnitStringForSR, f as inchesPerMeter, x as isBaseUnit, j as isMeasurementSystem, Y as lengthToDegrees, Z as lengthUnitFromSpatialReference, me as lengthUnitsJSONMap, w as measurementAreaUnits, S as measurementLengthUnits, F as preferredAreaUnit, T as preferredImperialAreaUnit, K as preferredImperialLengthUnit, R as preferredImperialVerticalLengthUnit, N as preferredLengthUnit, A as preferredMetricAreaUnit, O as preferredMetricLengthUnit, J as preferredMetricVerticalLengthUnit, v as preferredVerticalLengthUnit, G as unitFromRESTJSON, H as unitToRESTJSON, P as unitType, fe as unitsJSONMap, ee as verticalLengthUnitFromSpatialReference };","map":{"version":3,"names":["strict","e","isSome","s","unwrapOr","t","isNone","r","getReferenceEllipsoid","i","earth","n","mars","a","moon","u","isEarth","c","isWKIDFromMars","o","isWKIDFromMoon","l","m","f","d","radius","Math","PI","U","q","h","B","Set","p","meter","foot","foot_us","foot_clarke","yard_clarke","link_clarke","yard_sears","foot_sears","chain_sears","chain_benoit_1895_b","yard_indian","yard_indian_1937","foot_gold_coast","chain_sears_1922_truncated","k","b","y","length","baseUnit","units","millimeters","inBaseUnits","centimeters","decimeters","meters","kilometers","inches","feet","yards","miles","area","acres","ares","hectares","volume","liters","angle","radians","degrees","_","M","g","w","S","I","Map","j","P","Error","C","D","x","E","N","O","K","v","J","R","F","A","T","abs","Y","G","fromJSON","toLowerCase","H","toJSON","L","$","W","metersPerDegree","X","z","wkid","wkt","values","has","re","Q","exec","te","V","parseFloat","split","ne","Z","includes","ee","se","get","test","ie","ae","ue","map","portalItem","portal","user","spatialReference","ce","esriAcres","esriAres","esriHectares","esriSquareCentimeters","esriSquareDecimeters","esriSquareFeet","esriSquareInches","esriSquareKilometers","esriSquareMeters","esriSquareMiles","esriSquareMillimeters","esriSquareUsFeet","esriSquareYards","oe","esriCentimeters","esriDecimeters","esriFeet","esriInches","esriKilometers","esriMeters","esriMiles","esriMillimeters","esriNauticalMiles","esriYards","le","me","fe","areaUnitFromSpatialReference","areaUnitsJSONMap","baseUnitForUnit","baseUnitForUnitType","convertUnit","getDefaultUnitForView","getDefaultUnitSystem","getMetersPerUnit","getMetersPerUnitForSR","getMetersPerVerticalUnitForSR","getUnitString","getVerticalUnitStringForSR","inchesPerMeter","isBaseUnit","isMeasurementSystem","lengthToDegrees","lengthUnitFromSpatialReference","lengthUnitsJSONMap","measurementAreaUnits","measurementLengthUnits","preferredAreaUnit","preferredImperialAreaUnit","preferredImperialLengthUnit","preferredImperialVerticalLengthUnit","preferredLengthUnit","preferredMetricAreaUnit","preferredMetricLengthUnit","preferredMetricVerticalLengthUnit","preferredVerticalLengthUnit","unitFromRESTJSON","unitToRESTJSON","unitType","unitsJSONMap","verticalLengthUnitFromSpatialReference"],"sources":["E:/各个学科/论文/毕业论文/Atmosphere/eco-friendly/node_modules/@arcgis/core/core/unitUtils.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.25/esri/copyright.txt for details.\n*/\nimport\"./has.js\";import{strict as e}from\"./jsonMap.js\";import{isSome as s,unwrapOr as t,isNone as r}from\"./maybe.js\";import{getReferenceEllipsoid as i}from\"../geometry/projectionEllipsoid.js\";import{earth as n,mars as a,moon as u}from\"../geometry/support/Ellipsoid.js\";import{isEarth as c,isWKIDFromMars as o,isWKIDFromMoon as l}from\"../geometry/support/spatialReferenceUtils.js\";import m from\"../geometry/support/WKIDUnitConversion.js\";const f=39.37,d=n.radius*Math.PI/200,U=/UNIT\\[([^\\]]+)\\]\\]$/i,q=m,h=/UNIT\\[([^\\]]+)\\]/i,B=new Set([4261,4305,4807,4810,4811,4812,4816,4819,4821,4901,4902,37225,104139,104140]),p=e()({meter:\"meters\",foot:\"feet\",foot_us:\"us-feet\",foot_clarke:\"clarke-feet\",yard_clarke:\"clarke-yards\",link_clarke:\"clarke-links\",yard_sears:\"sears-yards\",foot_sears:\"sears-feet\",chain_sears:\"sears-chains\",chain_benoit_1895_b:\"benoit-1895-b-chains\",yard_indian:\"indian-yards\",yard_indian_1937:\"indian-1937-yards\",foot_gold_coast:\"gold-coast-feet\",chain_sears_1922_truncated:\"sears-1922-truncated-chains\",\"50_kilometers\":\"50-kilometers\",\"150_kilometers\":\"150-kilometers\"}),k=e=>e*e,b=e=>e*e*e,y={length:{baseUnit:\"meters\",units:{millimeters:{inBaseUnits:.001},centimeters:{inBaseUnits:.01},decimeters:{inBaseUnits:.1},meters:{inBaseUnits:1},kilometers:{inBaseUnits:1e3},inches:{inBaseUnits:.0254},feet:{inBaseUnits:.3048},yards:{inBaseUnits:.9144},miles:{inBaseUnits:1609.344},\"nautical-miles\":{inBaseUnits:1852},\"us-feet\":{inBaseUnits:1200/3937}}},area:{baseUnit:\"square-meters\",units:{\"square-millimeters\":{inBaseUnits:k(.001)},\"square-centimeters\":{inBaseUnits:k(.01)},\"square-decimeters\":{inBaseUnits:k(.1)},\"square-meters\":{inBaseUnits:1},\"square-kilometers\":{inBaseUnits:k(1e3)},\"square-inches\":{inBaseUnits:k(.0254)},\"square-feet\":{inBaseUnits:k(.3048)},\"square-yards\":{inBaseUnits:k(.9144)},\"square-miles\":{inBaseUnits:k(1609.344)},\"square-us-feet\":{inBaseUnits:k(1200/3937)},acres:{inBaseUnits:.0015625*k(1609.344)},ares:{inBaseUnits:100},hectares:{inBaseUnits:1e4}}},volume:{baseUnit:\"liters\",units:{liters:{inBaseUnits:1},\"cubic-millimeters\":{inBaseUnits:1e3*b(.001)},\"cubic-centimeters\":{inBaseUnits:1e3*b(.01)},\"cubic-decimeters\":{inBaseUnits:1e3*b(.1)},\"cubic-meters\":{inBaseUnits:1e3},\"cubic-kilometers\":{inBaseUnits:1e3*b(1e3)},\"cubic-inches\":{inBaseUnits:1e3*b(.0254)},\"cubic-feet\":{inBaseUnits:1e3*b(.3048)},\"cubic-yards\":{inBaseUnits:1e3*b(.9144)},\"cubic-miles\":{inBaseUnits:1e3*b(1609.344)}}},angle:{baseUnit:\"radians\",units:{radians:{inBaseUnits:1},degrees:{inBaseUnits:Math.PI/180}}}},_=(()=>{const e={};for(const s in y)for(const t in y[s].units)e[t]=s;return e})();function M(e,s,t){return e*y[t].units[s].inBaseUnits}function g(e,s,t){return e/y[t].units[s].inBaseUnits}const w=[\"metric\",\"imperial\",\"square-inches\",\"square-feet\",\"square-yards\",\"square-miles\",\"square-us-feet\",\"square-meters\",\"square-kilometers\",\"acres\",\"ares\",\"hectares\"],S=[\"metric\",\"imperial\",\"inches\",\"feet\",\"yards\",\"miles\",\"nautical-miles\",\"us-feet\",\"meters\",\"kilometers\"],I=new Map([[\"meters\",\"square-meters\"],[\"feet\",\"square-feet\"],[\"us-feet\",\"square-us-feet\"]]);function j(e){return\"imperial\"===e||\"metric\"===e}function P(e){const s=_[e];if(!s)throw new Error(\"unknown type\");return s}function C(e){return y[e].baseUnit}function D(e){return C(P(e))}function x(e,s=null){return s=s||P(e),y[s].baseUnit===e}function E(e,s,t){if(s===t)return e;const r=P(s);if(r!==P(t))throw new Error(\"incompatible units\");const i=x(s,r)?e:M(e,s,r);return x(t,r)?i:g(i,t,r)}function N(e,s,t){switch(t){case\"metric\":return O(e,s);case\"imperial\":return K(e,s);default:return t}}function v(e,s,t){switch(t){case\"metric\":return J(e,s);case\"imperial\":return R(e,s);default:return t}}function F(e,s,t){switch(t){case\"metric\":return A(e,s);case\"imperial\":return T(e,s);default:return t}}function O(e,s){const t=E(e,s,\"meters\");return Math.abs(t)<3e3?\"meters\":\"kilometers\"}function J(e,s){const t=E(e,s,\"meters\");return Math.abs(t)<1e5?\"meters\":\"kilometers\"}function K(e,s){const t=E(e,s,\"feet\");return Math.abs(t)<1e3?\"feet\":\"miles\"}function R(e,s){const t=E(e,s,\"feet\");return Math.abs(t)<1e5?\"feet\":\"miles\"}function A(e,s){const t=E(e,s,\"square-meters\");return Math.abs(t)<3e6?\"square-meters\":\"square-kilometers\"}function T(e,s){const t=E(e,s,\"square-feet\");return Math.abs(t)<1e6?\"square-feet\":\"square-miles\"}function Y(e,s,t){return E(e,s,\"meters\")/(t*Math.PI/180)}function G(e){return p.fromJSON(e.toLowerCase())||null}function H(e){return p.toJSON(e)||null}function L(e){if(s(e)&&!c(e))return 1;const t=$(e);return t>1e5?1:t}function W(e){return $(e)>=i(e).metersPerDegree?\"meters\":X(e)}function $(e,s=n.metersPerDegree){return t(z(e,!0),s)}function z(e,t=!1){const r=s(e)?e.wkid:null,i=s(e)?e.wkt:null;let n=null;if(r){if(o(r))return a.metersPerDegree;if(l(r))return u.metersPerDegree;n=q.values[q[r]],!n&&t&&B.has(r)&&(n=d)}else i&&(re(i)?n=Q(U.exec(i),n):te(i)&&(n=Q(h.exec(i),n)));return n}function Q(e,s){return e&&e[1]?V(e[1]):s}function V(e){return parseFloat(e.split(\",\")[1])}function X(e){const t=s(e)?e.wkid:null,r=s(e)?e.wkt:null;let i=null;if(t)i=q.units[q[t]];else if(r){const e=re(r)?U:te(r)?h:null;if(e){const s=e.exec(r);s&&s[1]&&(i=ne(s[1]))}}return s(i)?G(i):null}function Z(e){const s=X(e);return r(s)||!S.includes(s)?null:s}function ee(e){const s=W(e);return r(s)||!S.includes(s)?null:s}function se(e){const s=X(e);return r(s)?null:I.get(s)}function te(e){return/^GEOCCS/i.test(e)}function re(e){return/^PROJCS/i.test(e)}const ie=1e-7;function ne(e){const s=/[\\\\\"\\\\']{1}([^\\\\\"\\\\']+)/.exec(e);let t=s&&s[1];if(!t||!q.units.includes(t)){const s=V(e);t=null;const r=q.values;for(let e=0;e<r.length;++e)if(Math.abs(s-r[e])<ie){t=q.units[e];break}}return t}function ae(e){const s=X(e);if(r(s))return null;switch(s){case\"feet\":case\"us-feet\":case\"clarke-feet\":case\"clarke-yards\":case\"clarke-links\":case\"sears-yards\":case\"sears-feet\":case\"sears-chains\":case\"benoit-1895-b-chains\":case\"indian-yards\":case\"indian-1937-yards\":case\"gold-coast-feet\":case\"sears-1922-truncated-chains\":return\"imperial\";case\"50-kilometers\":case\"150-kilometers\":case\"meters\":return\"metric\"}return null}function ue(e){const s=\"metric\";if(r(e))return s;const i=e.map,n=i&&\"portalItem\"in i?i.portalItem?.portal:null;if(n){switch(n?.user?.units??n.units){case s:return s;case\"english\":return\"imperial\"}}return t(ae(e.spatialReference),s)}const ce={esriAcres:\"acres\",esriAres:\"ares\",esriHectares:\"hectares\",esriSquareCentimeters:\"square-centimeters\",esriSquareDecimeters:\"square-decimeters\",esriSquareFeet:\"square-feet\",esriSquareInches:\"square-inches\",esriSquareKilometers:\"square-kilometers\",esriSquareMeters:\"square-meters\",esriSquareMiles:\"square-miles\",esriSquareMillimeters:\"square-millimeters\",esriSquareUsFeet:\"square-us-feet\",esriSquareYards:\"square-yards\"},oe={esriCentimeters:\"centimeters\",esriDecimeters:\"decimeters\",esriFeet:\"feet\",esriInches:\"inches\",esriKilometers:\"kilometers\",esriMeters:\"meters\",esriMiles:\"miles\",esriMillimeters:\"millimeters\",esriNauticalMiles:\"nautical-miles\",esriYards:\"yards\"},le=e()(ce),me=e()(oe),fe=e()({...ce,...oe});export{se as areaUnitFromSpatialReference,le as areaUnitsJSONMap,D as baseUnitForUnit,C as baseUnitForUnitType,E as convertUnit,ue as getDefaultUnitForView,ae as getDefaultUnitSystem,z as getMetersPerUnit,$ as getMetersPerUnitForSR,L as getMetersPerVerticalUnitForSR,X as getUnitString,W as getVerticalUnitStringForSR,f as inchesPerMeter,x as isBaseUnit,j as isMeasurementSystem,Y as lengthToDegrees,Z as lengthUnitFromSpatialReference,me as lengthUnitsJSONMap,w as measurementAreaUnits,S as measurementLengthUnits,F as preferredAreaUnit,T as preferredImperialAreaUnit,K as preferredImperialLengthUnit,R as preferredImperialVerticalLengthUnit,N as preferredLengthUnit,A as preferredMetricAreaUnit,O as preferredMetricLengthUnit,J as preferredMetricVerticalLengthUnit,v as preferredVerticalLengthUnit,G as unitFromRESTJSON,H as unitToRESTJSON,P as unitType,fe as unitsJSONMap,ee as verticalLengthUnitFromSpatialReference};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}