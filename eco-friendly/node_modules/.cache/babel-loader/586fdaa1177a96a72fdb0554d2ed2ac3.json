{"ast":null,"code":"import commonMixin from '../base/mixins/common.js';\nimport bindEvents from '../base/bindEvent.js';\nimport { createLabel, createIcon, createPoint } from '../base/factory.js';\nexport default {\n  name: 'bm-marker',\n  mixins: [commonMixin('overlay')],\n  props: {\n    position: {},\n    offset: {},\n    icon: {},\n    massClear: {\n      type: Boolean,\n      default: true\n    },\n    dragging: {\n      type: Boolean,\n      default: false\n    },\n    clicking: {\n      type: Boolean,\n      default: true\n    },\n    raiseOnDrag: {\n      type: Boolean,\n      default: false\n    },\n    draggingCursor: {\n      type: String\n    },\n    rotation: {\n      type: Number\n    },\n    shadow: {\n      type: Object\n    },\n    title: {\n      type: String\n    },\n    label: {\n      type: Object\n    },\n    animation: {\n      type: String\n    },\n    top: {\n      type: Boolean,\n      default: false\n    },\n    zIndex: {\n      type: Number,\n      default: 0\n    }\n  },\n  watch: {\n    'position.lng'(val, oldVal) {\n      const {\n        BMap,\n        originInstance,\n        position,\n        renderByParent,\n        $parent\n      } = this;\n\n      if (val !== oldVal && val >= -180 && val <= 180) {\n        originInstance.setPosition(createPoint(BMap, {\n          lng: val,\n          lat: position.lat\n        }));\n      }\n\n      renderByParent && $parent.reload();\n    },\n\n    'position.lat'(val, oldVal) {\n      const {\n        BMap,\n        originInstance,\n        position,\n        renderByParent,\n        $parent\n      } = this;\n\n      if (val !== oldVal && val >= -74 && val <= 74) {\n        originInstance.setPosition(createPoint(BMap, {\n          lng: position.lng,\n          lat: val\n        }));\n      }\n\n      renderByParent && $parent.reload();\n    },\n\n    'offset.width'(val, oldVal) {\n      const {\n        BMap,\n        originInstance\n      } = this;\n\n      if (val !== oldVal) {\n        originInstance.setOffset(new BMap.Size(val, this.offset.height));\n      }\n    },\n\n    'offset.height'(val, oldVal) {\n      const {\n        BMap,\n        originInstance\n      } = this;\n\n      if (val !== oldVal) {\n        originInstance.setOffset(new BMap.Size(this.offset.width, val));\n      }\n    },\n\n    icon: {\n      deep: true,\n\n      handler(val) {\n        const {\n          BMap,\n          originInstance,\n          rotation\n        } = this;\n        originInstance && originInstance.setIcon(createIcon(BMap, val));\n        rotation && originInstance && originInstance.setRotation(rotation);\n      }\n\n    },\n\n    massClear(val) {\n      val ? this.originInstance.enableMassClear() : this.originInstance.disableMassClear();\n    },\n\n    dragging(val) {\n      val ? this.originInstance.enableDragging() : this.originInstance.disableDragging();\n    },\n\n    clicking() {\n      this.reload();\n    },\n\n    raiseOnDrag() {\n      this.reload();\n    },\n\n    draggingCursor(val) {\n      this.originInstance.setDraggingCursor(val);\n    },\n\n    rotation(val) {\n      this.originInstance.setRotation(val);\n    },\n\n    shadow(val) {\n      this.originInstance.setShadow(val);\n    },\n\n    title(val) {\n      this.originInstance.setTitle(val);\n    },\n\n    label(val) {\n      this.reload();\n    },\n\n    animation(val) {\n      this.originInstance.setAnimation(global[val]);\n    },\n\n    top(val) {\n      this.originInstance.setTop(val);\n    },\n\n    zIndex(val) {\n      this.originInstance.setZIndex(val);\n    }\n\n  },\n  methods: {\n    load() {\n      const {\n        BMap,\n        map,\n        position,\n        offset,\n        icon,\n        massClear,\n        dragging,\n        clicking,\n        raiseOnDrag,\n        draggingCursor,\n        rotation,\n        shadow,\n        title,\n        label,\n        animation,\n        top,\n        renderByParent,\n        $parent,\n        zIndex\n      } = this;\n      const overlay = new BMap.Marker(new BMap.Point(position.lng, position.lat), {\n        offset,\n        icon: icon && createIcon(BMap, icon),\n        enableMassClear: massClear,\n        enableDragging: dragging,\n        enableClicking: clicking,\n        raiseOnDrag,\n        draggingCursor,\n        rotation,\n        shadow,\n        title\n      });\n      this.originInstance = overlay;\n      label && overlay && overlay.setLabel(createLabel(BMap, label));\n      overlay.setTop(top);\n      overlay.setZIndex(zIndex);\n      bindEvents.call(this, overlay);\n\n      if (renderByParent) {\n        $parent.reload();\n      } else {\n        map.addOverlay(overlay);\n      }\n\n      overlay.setAnimation(global[animation]);\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAOA;AACA;AACA;AAEA;EACAA,iBADA;EAEAC,gCAFA;EAGAC;IACAC,YADA;IAEAC,UAFA;IAGAC,QAHA;IAIAC;MACAC,aADA;MAEAC;IAFA,CAJA;IAQAC;MACAF,aADA;MAEAC;IAFA,CARA;IAYAE;MACAH,aADA;MAEAC;IAFA,CAZA;IAgBAG;MACAJ,aADA;MAEAC;IAFA,CAhBA;IAoBAI;MACAL;IADA,CApBA;IAuBAM;MACAN;IADA,CAvBA;IA0BAO;MACAP;IADA,CA1BA;IA6BAQ;MACAR;IADA,CA7BA;IAgCAS;MACAT;IADA,CAhCA;IAmCAU;MACAV;IADA,CAnCA;IAsCAW;MACAX,aADA;MAEAC;IAFA,CAtCA;IA0CAW;MACAZ,YADA;MAEAC;IAFA;EA1CA,CAHA;EAkDAY;IACA;MACA;QAAAC;QAAAC;QAAAnB;QAAAoB;QAAAC;MAAA;;MACA;QACAF;UAAAG;UAAAC;QAAA;MACA;;MACAH;IACA,CAPA;;IAQA;MACA;QAAAF;QAAAC;QAAAnB;QAAAoB;QAAAC;MAAA;;MACA;QACAF;UAAAG;UAAAC;QAAA;MACA;;MACAH;IACA,CAdA;;IAeA;MACA;QAAAF;QAAAC;MAAA;;MACA;QACAA;MACA;IACA,CApBA;;IAqBA;MACA;QAAAD;QAAAC;MAAA;;MACA;QACAA;MACA;IACA,CA1BA;;IA2BAjB;MACAsB,UADA;;MAEAC;QACA;UAAAP;UAAAC;UAAAT;QAAA;QACAS;QACAT;MACA;;IANA,CA3BA;;IAmCAP;MACAuB;IACA,CArCA;;IAsCApB;MACAoB;IACA,CAxCA;;IAyCAnB;MACA;IACA,CA3CA;;IA4CAC;MACA;IACA,CA9CA;;IA+CAC;MACA;IACA,CAjDA;;IAkDAC;MACA;IACA,CApDA;;IAqDAC;MACA;IACA,CAvDA;;IAwDAC;MACA;IACA,CA1DA;;IA2DAC;MACA;IACA,CA7DA;;IA8DAC;MACA;IACA,CAhEA;;IAiEAC;MACA;IACA,CAnEA;;IAoEAC;MACA;IACA;;EAtEA,CAlDA;EA0HAW;IACAC;MACA;QAAAV;QAAAW;QAAA7B;QAAAC;QAAAC;QAAAC;QAAAG;QAAAC;QAAAC;QAAAC;QAAAC;QAAAC;QAAAC;QAAAC;QAAAC;QAAAC;QAAAK;QAAAC;QAAAL;MAAA;MACA;QACAf,MADA;QAEAC,oCAFA;QAGA4B,0BAHA;QAIAC,wBAJA;QAKAC,wBALA;QAMAxB,WANA;QAOAC,cAPA;QAQAC,QARA;QASAC,MATA;QAUAC;MAVA;MAYA;MACAC;MACAoB;MACAA;MACAC;;MACA;QACAb;MACA,CAFA,MAEA;QACAQ;MACA;;MACAI;IACA;;EA1BA;AA1HA","names":["name","mixins","props","position","offset","icon","massClear","type","default","dragging","clicking","raiseOnDrag","draggingCursor","rotation","shadow","title","label","animation","top","zIndex","watch","BMap","originInstance","renderByParent","$parent","lng","lat","deep","handler","val","methods","load","map","enableMassClear","enableDragging","enableClicking","overlay","bindEvents"],"sourceRoot":"node_modules/vue-baidu-map/components/overlays","sources":["Marker.vue"],"sourcesContent":["<template>\n<div>\n  <slot></slot>\n</div>\n</template>\n\n<script>\nimport commonMixin from '../base/mixins/common.js'\nimport bindEvents from '../base/bindEvent.js'\nimport {createLabel, createIcon, createPoint} from '../base/factory.js'\n\nexport default {\n  name: 'bm-marker',\n  mixins: [commonMixin('overlay')],\n  props: {\n    position: {},\n    offset: {},\n    icon: {},\n    massClear: {\n      type: Boolean,\n      default: true\n    },\n    dragging: {\n      type: Boolean,\n      default: false\n    },\n    clicking: {\n      type: Boolean,\n      default: true\n    },\n    raiseOnDrag: {\n      type: Boolean,\n      default: false\n    },\n    draggingCursor: {\n      type: String\n    },\n    rotation: {\n      type: Number\n    },\n    shadow: {\n      type: Object\n    },\n    title: {\n      type: String\n    },\n    label: {\n      type: Object\n    },\n    animation: {\n      type: String\n    },\n    top: {\n      type: Boolean,\n      default: false\n    },\n    zIndex: {\n      type: Number,\n      default: 0\n    }\n  },\n  watch: {\n    'position.lng' (val, oldVal) {\n      const {BMap, originInstance, position, renderByParent, $parent} = this\n      if (val !== oldVal && val >= -180 && val <= 180) {\n        originInstance.setPosition(createPoint(BMap, {lng: val, lat: position.lat}))\n      }\n      renderByParent && $parent.reload()\n    },\n    'position.lat' (val, oldVal) {\n      const {BMap, originInstance, position, renderByParent, $parent} = this\n      if (val !== oldVal && val >= -74 && val <= 74) {\n        originInstance.setPosition(createPoint(BMap, {lng: position.lng, lat: val}))\n      }\n      renderByParent && $parent.reload()\n    },\n    'offset.width' (val, oldVal) {\n      const {BMap, originInstance} = this\n      if (val !== oldVal) {\n        originInstance.setOffset(new BMap.Size(val, this.offset.height))\n      }\n    },\n    'offset.height' (val, oldVal) {\n      const {BMap, originInstance} = this\n      if (val !== oldVal) {\n        originInstance.setOffset(new BMap.Size(this.offset.width, val))\n      }\n    },\n    icon: {\n      deep: true,\n      handler (val) {\n        const {BMap, originInstance, rotation} = this\n        originInstance && originInstance.setIcon(createIcon(BMap, val))\n        rotation && originInstance && originInstance.setRotation(rotation)\n      }\n    },\n    massClear (val) {\n      val ? this.originInstance.enableMassClear() : this.originInstance.disableMassClear()\n    },\n    dragging (val) {\n      val ? this.originInstance.enableDragging() : this.originInstance.disableDragging()\n    },\n    clicking () {\n      this.reload()\n    },\n    raiseOnDrag () {\n      this.reload()\n    },\n    draggingCursor (val) {\n      this.originInstance.setDraggingCursor(val)\n    },\n    rotation (val) {\n      this.originInstance.setRotation(val)\n    },\n    shadow (val) {\n      this.originInstance.setShadow(val)\n    },\n    title (val) {\n      this.originInstance.setTitle(val)\n    },\n    label (val) {\n      this.reload()\n    },\n    animation (val) {\n      this.originInstance.setAnimation(global[val])\n    },\n    top (val) {\n      this.originInstance.setTop(val)\n    },\n    zIndex (val) {\n      this.originInstance.setZIndex(val)\n    }\n  },\n  methods: {\n    load () {\n      const {BMap, map, position, offset, icon, massClear, dragging, clicking, raiseOnDrag, draggingCursor, rotation, shadow, title, label, animation, top, renderByParent, $parent, zIndex} = this\n      const overlay = new BMap.Marker(new BMap.Point(position.lng, position.lat), {\n        offset,\n        icon: icon && createIcon(BMap, icon),\n        enableMassClear: massClear,\n        enableDragging: dragging,\n        enableClicking: clicking,\n        raiseOnDrag,\n        draggingCursor,\n        rotation,\n        shadow,\n        title\n      })\n      this.originInstance = overlay\n      label && overlay && overlay.setLabel(createLabel(BMap, label))\n      overlay.setTop(top)\n      overlay.setZIndex(zIndex)\n      bindEvents.call(this, overlay)\n      if (renderByParent) {\n        $parent.reload()\n      } else {\n        map.addOverlay(overlay)\n      }\n      overlay.setAnimation(global[animation])\n    }\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}