{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.error.cause.js\";\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/snabbdom/snabbdom/blob/master/LICENSE\n *\n * Modified for Stencil's renderer and slot projection\n */\nlet scopeId;\nlet contentRef;\nlet hostTagName;\nlet customError;\nlet i = 0;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet renderingRef = null;\nlet queueCongestion = 0;\nlet queuePending = false;\n/*\n Stencil Client Platform v2.18.1 | MIT Licensed | https://stenciljs.com\n */\n\nimport { BUILD, NAMESPACE } from '@stencil/core/internal/app-data';\nconst Build = {\n  isDev: BUILD.isDev ? true : false,\n  isBrowser: true,\n  isServer: false,\n  isTesting: BUILD.isTesting ? true : false\n};\nconst Context = {};\n\nconst getAssetPath = path => {\n  const assetUrl = new URL(path, plt.$resourcesUrl$);\n  return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\n\nconst setAssetPath = path => plt.$resourcesUrl$ = path;\n\nconst createTime = (fnName, tagName = '') => {\n  if (BUILD.profile && performance.mark) {\n    const key = `st:${fnName}:${tagName}:${i++}`; // Start\n\n    performance.mark(key); // End\n\n    return () => performance.measure(`[Stencil] ${fnName}() <${tagName}>`, key);\n  } else {\n    return () => {\n      return;\n    };\n  }\n};\n\nconst uniqueTime = (key, measureText) => {\n  if (BUILD.profile && performance.mark) {\n    if (performance.getEntriesByName(key).length === 0) {\n      performance.mark(key);\n    }\n\n    return () => {\n      if (performance.getEntriesByName(measureText).length === 0) {\n        performance.measure(measureText, key);\n      }\n    };\n  } else {\n    return () => {\n      return;\n    };\n  }\n};\n\nconst inspect = ref => {\n  const hostRef = getHostRef(ref);\n\n  if (!hostRef) {\n    return undefined;\n  }\n\n  const flags = hostRef.$flags$;\n  const hostElement = hostRef.$hostElement$;\n  return {\n    renderCount: hostRef.$renderCount$,\n    flags: {\n      hasRendered: !!(flags & 2\n      /* HOST_FLAGS.hasRendered */\n      ),\n      hasConnected: !!(flags & 1\n      /* HOST_FLAGS.hasConnected */\n      ),\n      isWaitingForChildren: !!(flags & 4\n      /* HOST_FLAGS.isWaitingForChildren */\n      ),\n      isConstructingInstance: !!(flags & 8\n      /* HOST_FLAGS.isConstructingInstance */\n      ),\n      isQueuedForUpdate: !!(flags & 16\n      /* HOST_FLAGS.isQueuedForUpdate */\n      ),\n      hasInitializedComponent: !!(flags & 32\n      /* HOST_FLAGS.hasInitializedComponent */\n      ),\n      hasLoadedComponent: !!(flags & 64\n      /* HOST_FLAGS.hasLoadedComponent */\n      ),\n      isWatchReady: !!(flags & 128\n      /* HOST_FLAGS.isWatchReady */\n      ),\n      isListenReady: !!(flags & 256\n      /* HOST_FLAGS.isListenReady */\n      ),\n      needsRerender: !!(flags & 512\n      /* HOST_FLAGS.needsRerender */\n      )\n    },\n    instanceValues: hostRef.$instanceValues$,\n    ancestorComponent: hostRef.$ancestorComponent$,\n    hostElement,\n    lazyInstance: hostRef.$lazyInstance$,\n    vnode: hostRef.$vnode$,\n    modeName: hostRef.$modeName$,\n    onReadyPromise: hostRef.$onReadyPromise$,\n    onReadyResolve: hostRef.$onReadyResolve$,\n    onInstancePromise: hostRef.$onInstancePromise$,\n    onInstanceResolve: hostRef.$onInstanceResolve$,\n    onRenderResolve: hostRef.$onRenderResolve$,\n    queuedListeners: hostRef.$queuedListeners$,\n    rmListeners: hostRef.$rmListeners$,\n    ['s-id']: hostElement['s-id'],\n    ['s-cr']: hostElement['s-cr'],\n    ['s-lr']: hostElement['s-lr'],\n    ['s-p']: hostElement['s-p'],\n    ['s-rc']: hostElement['s-rc'],\n    ['s-sc']: hostElement['s-sc']\n  };\n};\n\nconst installDevTools = () => {\n  if (BUILD.devTools) {\n    const stencil = win.stencil = win.stencil || {};\n    const originalInspect = stencil.inspect;\n\n    stencil.inspect = ref => {\n      let result = inspect(ref);\n\n      if (!result && typeof originalInspect === 'function') {\n        result = originalInspect(ref);\n      }\n\n      return result;\n    };\n  }\n};\n\nconst CONTENT_REF_ID = 'r';\nconst ORG_LOCATION_ID = 'o';\nconst SLOT_NODE_ID = 's';\nconst TEXT_NODE_ID = 't';\nconst HYDRATE_ID = 's-id';\nconst HYDRATED_STYLE_ID = 'sty-id';\nconst HYDRATE_CHILD_ID = 'c-id';\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst XLINK_NS = 'http://www.w3.org/1999/xlink';\n/**\n * Default style mode id\n */\n\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\n\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\n\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\n\nconst isDef = v => v != null;\n\nconst isComplexType = o => {\n  // https://jsperf.com/typeof-fn-object/5\n  o = typeof o;\n  return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\n\n\nconst h = (nodeName, vnodeData, ...children) => {\n  let child = null;\n  let key = null;\n  let slotName = null;\n  let simple = false;\n  let lastSimple = false;\n  const vNodeChildren = [];\n\n  const walk = c => {\n    for (let i = 0; i < c.length; i++) {\n      child = c[i];\n\n      if (Array.isArray(child)) {\n        walk(child);\n      } else if (child != null && typeof child !== 'boolean') {\n        if (simple = typeof nodeName !== 'function' && !isComplexType(child)) {\n          child = String(child);\n        } else if (BUILD.isDev && typeof nodeName !== 'function' && child.$flags$ === undefined) {\n          consoleDevError(`vNode passed as children has unexpected type.\nMake sure it's using the correct h() function.\nEmpty objects can also be the cause, look for JSX comments that became objects.`);\n        }\n\n        if (simple && lastSimple) {\n          // If the previous child was simple (string), we merge both\n          vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n        } else {\n          // Append a new vNode, if it's text, we create a text vNode\n          vNodeChildren.push(simple ? newVNode(null, child) : child);\n        }\n\n        lastSimple = simple;\n      }\n    }\n  };\n\n  walk(children);\n\n  if (vnodeData) {\n    if (BUILD.isDev && nodeName === 'input') {\n      validateInputProperties(vnodeData);\n    } // normalize class / classname attributes\n\n\n    if (BUILD.vdomKey && vnodeData.key) {\n      key = vnodeData.key;\n    }\n\n    if (BUILD.slotRelocation && vnodeData.name) {\n      slotName = vnodeData.name;\n    }\n\n    if (BUILD.vdomClass) {\n      const classData = vnodeData.className || vnodeData.class;\n\n      if (classData) {\n        vnodeData.class = typeof classData !== 'object' ? classData : Object.keys(classData).filter(k => classData[k]).join(' ');\n      }\n    }\n  }\n\n  if (BUILD.isDev && vNodeChildren.some(isHost)) {\n    consoleDevError(`The <Host> must be the single root component. Make sure:\n- You are NOT using hostData() and <Host> in the same component.\n- <Host> is used once, and it's the single root component of the render() function.`);\n  }\n\n  if (BUILD.vdomFunctional && typeof nodeName === 'function') {\n    // nodeName is a functional component\n    return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n  }\n\n  const vnode = newVNode(nodeName, null);\n  vnode.$attrs$ = vnodeData;\n\n  if (vNodeChildren.length > 0) {\n    vnode.$children$ = vNodeChildren;\n  }\n\n  if (BUILD.vdomKey) {\n    vnode.$key$ = key;\n  }\n\n  if (BUILD.slotRelocation) {\n    vnode.$name$ = slotName;\n  }\n\n  return vnode;\n};\n\nconst newVNode = (tag, text) => {\n  const vnode = {\n    $flags$: 0,\n    $tag$: tag,\n    $text$: text,\n    $elm$: null,\n    $children$: null\n  };\n\n  if (BUILD.vdomAttribute) {\n    vnode.$attrs$ = null;\n  }\n\n  if (BUILD.vdomKey) {\n    vnode.$key$ = null;\n  }\n\n  if (BUILD.slotRelocation) {\n    vnode.$name$ = null;\n  }\n\n  return vnode;\n};\n\nconst Host = {};\n\nconst isHost = node => node && node.$tag$ === Host;\n\nconst vdomFnUtils = {\n  forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\n  map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate)\n};\n\nconst convertToPublic = node => ({\n  vattrs: node.$attrs$,\n  vchildren: node.$children$,\n  vkey: node.$key$,\n  vname: node.$name$,\n  vtag: node.$tag$,\n  vtext: node.$text$\n});\n\nconst convertToPrivate = node => {\n  if (typeof node.vtag === 'function') {\n    const vnodeData = Object.assign({}, node.vattrs);\n\n    if (node.vkey) {\n      vnodeData.key = node.vkey;\n    }\n\n    if (node.vname) {\n      vnodeData.name = node.vname;\n    }\n\n    return h(node.vtag, vnodeData, ...(node.vchildren || []));\n  }\n\n  const vnode = newVNode(node.vtag, node.vtext);\n  vnode.$attrs$ = node.vattrs;\n  vnode.$children$ = node.vchildren;\n  vnode.$key$ = node.vkey;\n  vnode.$name$ = node.vname;\n  return vnode;\n};\n/**\n * Validates the ordering of attributes on an input element\n * @param inputElm the element to validate\n */\n\n\nconst validateInputProperties = inputElm => {\n  const props = Object.keys(inputElm);\n  const value = props.indexOf('value');\n\n  if (value === -1) {\n    return;\n  }\n\n  const typeIndex = props.indexOf('type');\n  const minIndex = props.indexOf('min');\n  const maxIndex = props.indexOf('max');\n  const stepIndex = props.indexOf('step');\n\n  if (value < typeIndex || value < minIndex || value < maxIndex || value < stepIndex) {\n    consoleDevWarn(`The \"value\" prop of <input> should be set after \"min\", \"max\", \"type\" and \"step\"`);\n  }\n};\n\nconst initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {\n  const endHydrate = createTime('hydrateClient', tagName);\n  const shadowRoot = hostElm.shadowRoot;\n  const childRenderNodes = [];\n  const slotNodes = [];\n  const shadowRootNodes = BUILD.shadowDom && shadowRoot ? [] : null;\n  const vnode = hostRef.$vnode$ = newVNode(tagName, null);\n\n  if (!plt.$orgLocNodes$) {\n    initializeDocumentHydrate(doc.body, plt.$orgLocNodes$ = new Map());\n  }\n\n  hostElm[HYDRATE_ID] = hostId;\n  hostElm.removeAttribute(HYDRATE_ID);\n  clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);\n  childRenderNodes.map(c => {\n    const orgLocationId = c.$hostId$ + '.' + c.$nodeId$;\n    const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);\n    const node = c.$elm$;\n\n    if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {\n      orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);\n    }\n\n    if (!shadowRoot) {\n      node['s-hn'] = tagName;\n\n      if (orgLocationNode) {\n        node['s-ol'] = orgLocationNode;\n        node['s-ol']['s-nr'] = node;\n      }\n    }\n\n    plt.$orgLocNodes$.delete(orgLocationId);\n  });\n\n  if (BUILD.shadowDom && shadowRoot) {\n    shadowRootNodes.map(shadowRootNode => {\n      if (shadowRootNode) {\n        shadowRoot.appendChild(shadowRootNode);\n      }\n    });\n  }\n\n  endHydrate();\n};\n\nconst clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) => {\n  let childNodeType;\n  let childIdSplt;\n  let childVNode;\n  let i;\n\n  if (node.nodeType === 1\n  /* NODE_TYPE.ElementNode */\n  ) {\n    childNodeType = node.getAttribute(HYDRATE_CHILD_ID);\n\n    if (childNodeType) {\n      // got the node data from the element's attribute\n      // `${hostId}.${nodeId}.${depth}.${index}`\n      childIdSplt = childNodeType.split('.');\n\n      if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {\n        childVNode = {\n          $flags$: 0,\n          $hostId$: childIdSplt[0],\n          $nodeId$: childIdSplt[1],\n          $depth$: childIdSplt[2],\n          $index$: childIdSplt[3],\n          $tag$: node.tagName.toLowerCase(),\n          $elm$: node,\n          $attrs$: null,\n          $children$: null,\n          $key$: null,\n          $name$: null,\n          $text$: null\n        };\n        childRenderNodes.push(childVNode);\n        node.removeAttribute(HYDRATE_CHILD_ID); // this is a new child vnode\n        // so ensure its parent vnode has the vchildren array\n\n        if (!parentVNode.$children$) {\n          parentVNode.$children$ = [];\n        } // add our child vnode to a specific index of the vnode's children\n\n\n        parentVNode.$children$[childVNode.$index$] = childVNode; // this is now the new parent vnode for all the next child checks\n\n        parentVNode = childVNode;\n\n        if (shadowRootNodes && childVNode.$depth$ === '0') {\n          shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n        }\n      }\n    } // recursively drill down, end to start so we can remove nodes\n\n\n    for (i = node.childNodes.length - 1; i >= 0; i--) {\n      clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);\n    }\n\n    if (node.shadowRoot) {\n      // keep drilling down through the shadow root nodes\n      for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {\n        clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);\n      }\n    }\n  } else if (node.nodeType === 8\n  /* NODE_TYPE.CommentNode */\n  ) {\n    // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`\n    childIdSplt = node.nodeValue.split('.');\n\n    if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {\n      // comment node for either the host id or a 0 host id\n      childNodeType = childIdSplt[0];\n      childVNode = {\n        $flags$: 0,\n        $hostId$: childIdSplt[1],\n        $nodeId$: childIdSplt[2],\n        $depth$: childIdSplt[3],\n        $index$: childIdSplt[4],\n        $elm$: node,\n        $attrs$: null,\n        $children$: null,\n        $key$: null,\n        $name$: null,\n        $tag$: null,\n        $text$: null\n      };\n\n      if (childNodeType === TEXT_NODE_ID) {\n        childVNode.$elm$ = node.nextSibling;\n\n        if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3\n        /* NODE_TYPE.TextNode */\n        ) {\n          childVNode.$text$ = childVNode.$elm$.textContent;\n          childRenderNodes.push(childVNode); // remove the text comment since it's no longer needed\n\n          node.remove();\n\n          if (!parentVNode.$children$) {\n            parentVNode.$children$ = [];\n          }\n\n          parentVNode.$children$[childVNode.$index$] = childVNode;\n\n          if (shadowRootNodes && childVNode.$depth$ === '0') {\n            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n          }\n        }\n      } else if (childVNode.$hostId$ === hostId) {\n        // this comment node is specifcally for this host id\n        if (childNodeType === SLOT_NODE_ID) {\n          // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;\n          childVNode.$tag$ = 'slot';\n\n          if (childIdSplt[5]) {\n            node['s-sn'] = childVNode.$name$ = childIdSplt[5];\n          } else {\n            node['s-sn'] = '';\n          }\n\n          node['s-sr'] = true;\n\n          if (BUILD.shadowDom && shadowRootNodes) {\n            // browser support shadowRoot and this is a shadow dom component\n            // create an actual slot element\n            childVNode.$elm$ = doc.createElement(childVNode.$tag$);\n\n            if (childVNode.$name$) {\n              // add the slot name attribute\n              childVNode.$elm$.setAttribute('name', childVNode.$name$);\n            } // insert the new slot element before the slot comment\n\n\n            node.parentNode.insertBefore(childVNode.$elm$, node); // remove the slot comment since it's not needed for shadow\n\n            node.remove();\n\n            if (childVNode.$depth$ === '0') {\n              shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n            }\n          }\n\n          slotNodes.push(childVNode);\n\n          if (!parentVNode.$children$) {\n            parentVNode.$children$ = [];\n          }\n\n          parentVNode.$children$[childVNode.$index$] = childVNode;\n        } else if (childNodeType === CONTENT_REF_ID) {\n          // `${CONTENT_REF_ID}.${hostId}`;\n          if (BUILD.shadowDom && shadowRootNodes) {\n            // remove the content ref comment since it's not needed for shadow\n            node.remove();\n          } else if (BUILD.slotRelocation) {\n            hostElm['s-cr'] = node;\n            node['s-cn'] = true;\n          }\n        }\n      }\n    }\n  } else if (parentVNode && parentVNode.$tag$ === 'style') {\n    const vnode = newVNode(null, node.textContent);\n    vnode.$elm$ = node;\n    vnode.$index$ = '0';\n    parentVNode.$children$ = [vnode];\n  }\n};\n\nconst initializeDocumentHydrate = (node, orgLocNodes) => {\n  if (node.nodeType === 1\n  /* NODE_TYPE.ElementNode */\n  ) {\n    let i = 0;\n\n    for (; i < node.childNodes.length; i++) {\n      initializeDocumentHydrate(node.childNodes[i], orgLocNodes);\n    }\n\n    if (node.shadowRoot) {\n      for (i = 0; i < node.shadowRoot.childNodes.length; i++) {\n        initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);\n      }\n    }\n  } else if (node.nodeType === 8\n  /* NODE_TYPE.CommentNode */\n  ) {\n    const childIdSplt = node.nodeValue.split('.');\n\n    if (childIdSplt[0] === ORG_LOCATION_ID) {\n      orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);\n      node.nodeValue = ''; // useful to know if the original location is\n      // the root light-dom of a shadow dom component\n\n      node['s-en'] = childIdSplt[3];\n    }\n  }\n}; // Private\n\n\nconst computeMode = elm => modeResolutionChain.map(h => h(elm)).find(m => !!m); // Public\n\n\nconst setMode = handler => modeResolutionChain.push(handler);\n\nconst getMode = ref => getHostRef(ref).$modeName$;\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\n\n\nconst parsePropertyValue = (propValue, propType) => {\n  // ensure this value is of the correct prop type\n  if (propValue != null && !isComplexType(propValue)) {\n    if (BUILD.propBoolean && propType & 4\n    /* MEMBER_FLAGS.Boolean */\n    ) {\n      // per the HTML spec, any string value means it is a boolean true value\n      // but we'll cheat here and say that the string \"false\" is the boolean false\n      return propValue === 'false' ? false : propValue === '' || !!propValue;\n    }\n\n    if (BUILD.propNumber && propType & 2\n    /* MEMBER_FLAGS.Number */\n    ) {\n      // force it to be a number\n      return parseFloat(propValue);\n    }\n\n    if (BUILD.propString && propType & 1\n    /* MEMBER_FLAGS.String */\n    ) {\n      // could have been passed as a number or boolean\n      // but we still want it as a string\n      return String(propValue);\n    } // redundant return here for better minification\n\n\n    return propValue;\n  } // not sure exactly what type we want\n  // so no need to change to a different type\n\n\n  return propValue;\n};\n\nconst getElement = ref => BUILD.lazyLoad ? getHostRef(ref).$hostElement$ : ref;\n\nconst createEvent = (ref, name, flags) => {\n  const elm = getElement(ref);\n  return {\n    emit: detail => {\n      if (BUILD.isDev && !elm.isConnected) {\n        consoleDevWarn(`The \"${name}\" event was emitted, but the dispatcher node is no longer connected to the dom.`);\n      }\n\n      return emitEvent(elm, name, {\n        bubbles: !!(flags & 4\n        /* EVENT_FLAGS.Bubbles */\n        ),\n        composed: !!(flags & 2\n        /* EVENT_FLAGS.Composed */\n        ),\n        cancelable: !!(flags & 1\n        /* EVENT_FLAGS.Cancellable */\n        ),\n        detail\n      });\n    }\n  };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\n\n\nconst emitEvent = (elm, name, opts) => {\n  const ev = plt.ce(name, opts);\n  elm.dispatchEvent(ev);\n  return ev;\n};\n\nconst rootAppliedStyles = /*@__PURE__*/new WeakMap();\n\nconst registerStyle = (scopeId, cssText, allowCS) => {\n  let style = styles.get(scopeId);\n\n  if (supportsConstructableStylesheets && allowCS) {\n    style = style || new CSSStyleSheet();\n\n    if (typeof style === 'string') {\n      style = cssText;\n    } else {\n      style.replaceSync(cssText);\n    }\n  } else {\n    style = cssText;\n  }\n\n  styles.set(scopeId, style);\n};\n\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n  let scopeId = getScopeId(cmpMeta, mode);\n  const style = styles.get(scopeId);\n\n  if (!BUILD.attachStyles) {\n    return scopeId;\n  } // if an element is NOT connected then getRootNode() will return the wrong root node\n  // so the fallback is to always use the document for the root node in those cases\n\n\n  styleContainerNode = styleContainerNode.nodeType === 11\n  /* NODE_TYPE.DocumentFragment */\n  ? styleContainerNode : doc;\n\n  if (style) {\n    if (typeof style === 'string') {\n      styleContainerNode = styleContainerNode.head || styleContainerNode;\n      let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n      let styleElm;\n\n      if (!appliedStyles) {\n        rootAppliedStyles.set(styleContainerNode, appliedStyles = new Set());\n      }\n\n      if (!appliedStyles.has(scopeId)) {\n        if (BUILD.hydrateClientSide && styleContainerNode.host && (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}=\"${scopeId}\"]`))) {\n          // This is only happening on native shadow-dom, do not needs CSS var shim\n          styleElm.innerHTML = style;\n        } else {\n          if (BUILD.cssVarShim && plt.$cssShim$) {\n            styleElm = plt.$cssShim$.createHostStyle(hostElm, scopeId, style, !!(cmpMeta.$flags$ & 10\n            /* CMP_FLAGS.needsScopedEncapsulation */\n            ));\n            const newScopeId = styleElm['s-sc'];\n\n            if (newScopeId) {\n              scopeId = newScopeId; // we don't want to add this styleID to the appliedStyles Set\n              // since the cssVarShim might need to apply several different\n              // stylesheets for the same component\n\n              appliedStyles = null;\n            }\n          } else {\n            styleElm = doc.createElement('style');\n            styleElm.innerHTML = style;\n          }\n\n          if (BUILD.hydrateServerSide || BUILD.hotModuleReplacement) {\n            styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId);\n          }\n\n          styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n        }\n\n        if (appliedStyles) {\n          appliedStyles.add(scopeId);\n        }\n      }\n    } else if (BUILD.constructableCSS && !styleContainerNode.adoptedStyleSheets.includes(style)) {\n      styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n    }\n  }\n\n  return scopeId;\n};\n\nconst attachStyles = hostRef => {\n  const cmpMeta = hostRef.$cmpMeta$;\n  const elm = hostRef.$hostElement$;\n  const flags = cmpMeta.$flags$;\n  const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n  const scopeId = addStyle(BUILD.shadowDom && supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$, elm);\n\n  if ((BUILD.shadowDom || BUILD.scoped) && BUILD.cssAnnotations && flags & 10\n  /* CMP_FLAGS.needsScopedEncapsulation */\n  ) {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    // DOM WRITE!!\n    elm['s-sc'] = scopeId;\n    elm.classList.add(scopeId + '-h');\n\n    if (BUILD.scoped && flags & 2\n    /* CMP_FLAGS.scopedCssEncapsulation */\n    ) {\n      elm.classList.add(scopeId + '-s');\n    }\n  }\n\n  endAttachStyles();\n};\n\nconst getScopeId = (cmp, mode) => 'sc-' + (BUILD.mode && mode && cmp.$flags$ & 32\n/* CMP_FLAGS.hasMode */\n? cmp.$tagName$ + '-' + mode : cmp.$tagName$);\n\nconst convertScopedToShadow = css => css.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g, '$1{');\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n\n\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n  if (oldValue !== newValue) {\n    let isProp = isMemberInElement(elm, memberName);\n    let ln = memberName.toLowerCase();\n\n    if (BUILD.vdomClass && memberName === 'class') {\n      const classList = elm.classList;\n      const oldClasses = parseClassList(oldValue);\n      const newClasses = parseClassList(newValue);\n      classList.remove(...oldClasses.filter(c => c && !newClasses.includes(c)));\n      classList.add(...newClasses.filter(c => c && !oldClasses.includes(c)));\n    } else if (BUILD.vdomStyle && memberName === 'style') {\n      // update style attribute, css properties and values\n      if (BUILD.updatable) {\n        for (const prop in oldValue) {\n          if (!newValue || newValue[prop] == null) {\n            if (!BUILD.hydrateServerSide && prop.includes('-')) {\n              elm.style.removeProperty(prop);\n            } else {\n              elm.style[prop] = '';\n            }\n          }\n        }\n      }\n\n      for (const prop in newValue) {\n        if (!oldValue || newValue[prop] !== oldValue[prop]) {\n          if (!BUILD.hydrateServerSide && prop.includes('-')) {\n            elm.style.setProperty(prop, newValue[prop]);\n          } else {\n            elm.style[prop] = newValue[prop];\n          }\n        }\n      }\n    } else if (BUILD.vdomKey && memberName === 'key') ;else if (BUILD.vdomRef && memberName === 'ref') {\n      // minifier will clean this up\n      if (newValue) {\n        newValue(elm);\n      }\n    } else if (BUILD.vdomListener && (BUILD.lazyLoad ? !isProp : !elm.__lookupSetter__(memberName)) && memberName[0] === 'o' && memberName[1] === 'n') {\n      // Event Handlers\n      // so if the member name starts with \"on\" and the 3rd characters is\n      // a capital letter, and it's not already a member on the element,\n      // then we're assuming it's an event listener\n      if (memberName[2] === '-') {\n        // on- prefixed events\n        // allows to be explicit about the dom event to listen without any magic\n        // under the hood:\n        // <my-cmp on-click> // listens for \"click\"\n        // <my-cmp on-Click> // listens for \"Click\"\n        // <my-cmp on-ionChange> // listens for \"ionChange\"\n        // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n        memberName = memberName.slice(3);\n      } else if (isMemberInElement(win, ln)) {\n        // standard event\n        // the JSX attribute could have been \"onMouseOver\" and the\n        // member name \"onmouseover\" is on the window's prototype\n        // so let's add the listener \"mouseover\", which is all lowercased\n        memberName = ln.slice(2);\n      } else {\n        // custom event\n        // the JSX attribute could have been \"onMyCustomEvent\"\n        // so let's trim off the \"on\" prefix and lowercase the first character\n        // and add the listener \"myCustomEvent\"\n        // except for the first character, we keep the event name case\n        memberName = ln[2] + memberName.slice(3);\n      }\n\n      if (oldValue) {\n        plt.rel(elm, memberName, oldValue, false);\n      }\n\n      if (newValue) {\n        plt.ael(elm, memberName, newValue, false);\n      }\n    } else if (BUILD.vdomPropOrAttr) {\n      // Set property if it exists and it's not a SVG\n      const isComplex = isComplexType(newValue);\n\n      if ((isProp || isComplex && newValue !== null) && !isSvg) {\n        try {\n          if (!elm.tagName.includes('-')) {\n            const n = newValue == null ? '' : newValue; // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n\n            if (memberName === 'list') {\n              isProp = false;\n            } else if (oldValue == null || elm[memberName] != n) {\n              elm[memberName] = n;\n            }\n          } else {\n            elm[memberName] = newValue;\n          }\n        } catch (e) {}\n      }\n      /**\n       * Need to manually update attribute if:\n       * - memberName is not an attribute\n       * - if we are rendering the host element in order to reflect attribute\n       * - if it's a SVG, since properties might not work in <svg>\n       * - if the newValue is null/undefined or 'false'.\n       */\n\n\n      let xlink = false;\n\n      if (BUILD.vdomXlink) {\n        if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n          memberName = ln;\n          xlink = true;\n        }\n      }\n\n      if (newValue == null || newValue === false) {\n        if (newValue !== false || elm.getAttribute(memberName) === '') {\n          if (BUILD.vdomXlink && xlink) {\n            elm.removeAttributeNS(XLINK_NS, memberName);\n          } else {\n            elm.removeAttribute(memberName);\n          }\n        }\n      } else if ((!isProp || flags & 4\n      /* VNODE_FLAGS.isHost */\n      || isSvg) && !isComplex) {\n        newValue = newValue === true ? '' : newValue;\n\n        if (BUILD.vdomXlink && xlink) {\n          elm.setAttributeNS(XLINK_NS, memberName, newValue);\n        } else {\n          elm.setAttribute(memberName, newValue);\n        }\n      }\n    }\n  }\n};\n\nconst parseClassListRegex = /\\s/;\n\nconst parseClassList = value => !value ? [] : value.split(parseClassListRegex);\n\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n  // if the element passed in is a shadow root, which is a document fragment\n  // then we want to be adding attrs/props to the shadow root's \"host\" element\n  // if it's not a shadow root, then we add attrs/props to the same element\n  const elm = newVnode.$elm$.nodeType === 11\n  /* NODE_TYPE.DocumentFragment */\n  && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n  const oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || EMPTY_OBJ;\n  const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n\n  if (BUILD.updatable) {\n    // remove attributes no longer present on the vnode by setting them to undefined\n    for (memberName in oldVnodeAttrs) {\n      if (!(memberName in newVnodeAttrs)) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n      }\n    }\n  } // add new & update changed attributes\n\n\n  for (memberName in newVnodeAttrs) {\n    setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n  }\n};\n/**\n * Create a DOM Node corresponding to one of the children of a given VNode.\n *\n * @param oldParentVNode the parent VNode from the previous render\n * @param newParentVNode the parent VNode from the current render\n * @param childIndex the index of the VNode, in the _new_ parent node's\n * children, for which we will create a new DOM node\n * @param parentElm the parent DOM node which our new node will be a child of\n * @returns the newly created node\n */\n\n\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n  // tslint:disable-next-line: prefer-const\n  const newVNode = newParentVNode.$children$[childIndex];\n  let i = 0;\n  let elm;\n  let childNode;\n  let oldVNode;\n\n  if (BUILD.slotRelocation && !useNativeShadowDom) {\n    // remember for later we need to check to relocate nodes\n    checkSlotRelocate = true;\n\n    if (newVNode.$tag$ === 'slot') {\n      if (scopeId) {\n        // scoped css needs to add its scoped id to the parent element\n        parentElm.classList.add(scopeId + '-s');\n      }\n\n      newVNode.$flags$ |= newVNode.$children$ ? // slot element has fallback content\n      2\n      /* VNODE_FLAGS.isSlotFallback */\n      : // slot element does not have fallback content\n      1\n      /* VNODE_FLAGS.isSlotReference */\n      ;\n    }\n  }\n\n  if (BUILD.isDev && newVNode.$elm$) {\n    consoleDevError(`The JSX ${newVNode.$text$ !== null ? `\"${newVNode.$text$}\" text` : `\"${newVNode.$tag$}\" element`} node should not be shared within the same renderer. The renderer caches element lookups in order to improve performance. However, a side effect from this is that the exact same JSX node should not be reused. For more information please see https://stenciljs.com/docs/templating-jsx#avoid-shared-jsx-nodes`);\n  }\n\n  if (BUILD.vdomText && newVNode.$text$ !== null) {\n    // create text node\n    elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n  } else if (BUILD.slotRelocation && newVNode.$flags$ & 1\n  /* VNODE_FLAGS.isSlotReference */\n  ) {\n    // create a slot reference node\n    elm = newVNode.$elm$ = BUILD.isDebug || BUILD.hydrateServerSide ? slotReferenceDebugNode(newVNode) : doc.createTextNode('');\n  } else {\n    if (BUILD.svg && !isSvgMode) {\n      isSvgMode = newVNode.$tag$ === 'svg';\n    } // create element\n\n\n    elm = newVNode.$elm$ = BUILD.svg ? doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, BUILD.slotRelocation && newVNode.$flags$ & 2\n    /* VNODE_FLAGS.isSlotFallback */\n    ? 'slot-fb' : newVNode.$tag$) : doc.createElement(BUILD.slotRelocation && newVNode.$flags$ & 2\n    /* VNODE_FLAGS.isSlotFallback */\n    ? 'slot-fb' : newVNode.$tag$);\n\n    if (BUILD.svg && isSvgMode && newVNode.$tag$ === 'foreignObject') {\n      isSvgMode = false;\n    } // add css classes, attrs, props, listeners, etc.\n\n\n    if (BUILD.vdomAttribute) {\n      updateElement(null, newVNode, isSvgMode);\n    }\n\n    if ((BUILD.shadowDom || BUILD.scoped) && isDef(scopeId) && elm['s-si'] !== scopeId) {\n      // if there is a scopeId and this is the initial render\n      // then let's add the scopeId as a css class\n      elm.classList.add(elm['s-si'] = scopeId);\n    }\n\n    if (newVNode.$children$) {\n      for (i = 0; i < newVNode.$children$.length; ++i) {\n        // create the node\n        childNode = createElm(oldParentVNode, newVNode, i, elm); // return node could have been null\n\n        if (childNode) {\n          // append our new node\n          elm.appendChild(childNode);\n        }\n      }\n    }\n\n    if (BUILD.svg) {\n      if (newVNode.$tag$ === 'svg') {\n        // Only reset the SVG context when we're exiting <svg> element\n        isSvgMode = false;\n      } else if (elm.tagName === 'foreignObject') {\n        // Reenter SVG context when we're exiting <foreignObject> element\n        isSvgMode = true;\n      }\n    }\n  }\n\n  if (BUILD.slotRelocation) {\n    elm['s-hn'] = hostTagName;\n\n    if (newVNode.$flags$ & (2\n    /* VNODE_FLAGS.isSlotFallback */\n    | 1\n    /* VNODE_FLAGS.isSlotReference */\n    )) {\n      // remember the content reference comment\n      elm['s-sr'] = true; // remember the content reference comment\n\n      elm['s-cr'] = contentRef; // remember the slot name, or empty string for default slot\n\n      elm['s-sn'] = newVNode.$name$ || ''; // check if we've got an old vnode for this slot\n\n      oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n\n      if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n        // we've got an old slot vnode and the wrapper is being replaced\n        // so let's move the old slot content back to it's original location\n        putBackInOriginalLocation(oldParentVNode.$elm$, false);\n      }\n    }\n  }\n\n  return elm;\n};\n\nconst putBackInOriginalLocation = (parentElm, recursive) => {\n  plt.$flags$ |= 1\n  /* PLATFORM_FLAGS.isTmpDisconnected */\n  ;\n  const oldSlotChildNodes = parentElm.childNodes;\n\n  for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n    const childNode = oldSlotChildNodes[i];\n\n    if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n      // // this child node in the old element is from another component\n      // // remove this node from the old slot's parent\n      // childNode.remove();\n      // and relocate it back to it's original location\n      parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode)); // remove the old original location comment entirely\n      // later on the patch function will know what to do\n      // and move this to the correct spot in need be\n\n      childNode['s-ol'].remove();\n      childNode['s-ol'] = undefined;\n      checkSlotRelocate = true;\n    }\n\n    if (recursive) {\n      putBackInOriginalLocation(childNode, recursive);\n    }\n  }\n\n  plt.$flags$ &= ~1\n  /* PLATFORM_FLAGS.isTmpDisconnected */\n  ;\n};\n\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n  let containerElm = BUILD.slotRelocation && parentElm['s-cr'] && parentElm['s-cr'].parentNode || parentElm;\n  let childNode;\n\n  if (BUILD.shadowDom && containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n    containerElm = containerElm.shadowRoot;\n  }\n\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnodes[startIdx]) {\n      childNode = createElm(null, parentVNode, startIdx, parentElm);\n\n      if (childNode) {\n        vnodes[startIdx].$elm$ = childNode;\n        containerElm.insertBefore(childNode, BUILD.slotRelocation ? referenceNode(before) : before);\n      }\n    }\n  }\n};\n\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnode = vnodes[startIdx]) {\n      elm = vnode.$elm$;\n      callNodeRefs(vnode);\n\n      if (BUILD.slotRelocation) {\n        // we're removing this element\n        // so it's possible we need to show slot fallback content now\n        checkSlotFallbackVisibility = true;\n\n        if (elm['s-ol']) {\n          // remove the original location comment\n          elm['s-ol'].remove();\n        } else {\n          // it's possible that child nodes of the node\n          // that's being removed are slot nodes\n          putBackInOriginalLocation(elm, true);\n        }\n      } // remove the vnode's element from the dom\n\n\n      elm.remove();\n    }\n  }\n};\n/**\n * Reconcile the children of a new VNode with the children of an old VNode by\n * traversing the two collections of children, identifying nodes that are\n * conserved or changed, calling out to `patch` to make any necessary\n * updates to the DOM, and rearranging DOM nodes as needed.\n *\n * The algorithm for reconciling children works by analyzing two 'windows' onto\n * the two arrays of children (`oldCh` and `newCh`). We keep track of the\n * 'windows' by storing start and end indices and references to the\n * corresponding array entries. Initially the two 'windows' are basically equal\n * to the entire array, but we progressively narrow the windows until there are\n * no children left to update by doing the following:\n *\n * 1. Skip any `null` entries at the beginning or end of the two arrays, so\n *    that if we have an initial array like the following we'll end up dealing\n *    only with a window bounded by the highlighted elements:\n *\n *    [null, null, VNode1 , ... , VNode2, null, null]\n *                 ^^^^^^         ^^^^^^\n *\n * 2. Check to see if the elements at the head and tail positions are equal\n *    across the windows. This will basically detect elements which haven't\n *    been added, removed, or changed position, i.e. if you had the following\n *    VNode elements (represented as HTML):\n *\n *    oldVNode: `<div><p><span>HEY</span></p></div>`\n *    newVNode: `<div><p><span>THERE</span></p></div>`\n *\n *    Then when comparing the children of the `<div>` tag we check the equality\n *    of the VNodes corresponding to the `<p>` tags and, since they are the\n *    same tag in the same position, we'd be able to avoid completely\n *    re-rendering the subtree under them with a new DOM element and would just\n *    call out to `patch` to handle reconciling their children and so on.\n *\n * 3. Check, for both windows, to see if the element at the beginning of the\n *    window corresponds to the element at the end of the other window. This is\n *    a heuristic which will let us identify _some_ situations in which\n *    elements have changed position, for instance it _should_ detect that the\n *    children nodes themselves have not changed but merely moved in the\n *    following example:\n *\n *    oldVNode: `<div><element-one /><element-two /></div>`\n *    newVNode: `<div><element-two /><element-one /></div>`\n *\n *    If we find cases like this then we also need to move the concrete DOM\n *    elements corresponding to the moved children to write the re-order to the\n *    DOM.\n *\n * 4. Finally, if VNodes have the `key` attribute set on them we check for any\n *    nodes in the old children which have the same key as the first element in\n *    our window on the new children. If we find such a node we handle calling\n *    out to `patch`, moving relevant DOM nodes, and so on, in accordance with\n *    what we find.\n *\n * Finally, once we've narrowed our 'windows' to the point that either of them\n * collapse (i.e. they have length 0) we then handle any remaining VNode\n * insertion or deletion that needs to happen to get a DOM state that correctly\n * reflects the new child VNodes. If, for instance, after our window on the old\n * children has collapsed we still have more nodes on the new children that\n * we haven't dealt with yet then we need to add them, or if the new children\n * collapse but we still have unhandled _old_ children then we need to make\n * sure the corresponding DOM nodes are removed.\n *\n * @param parentElm the node into which the parent VNode is rendered\n * @param oldCh the old children of the parent node\n * @param newVNode the new VNode which will replace the parent\n * @param newCh the new children of the parent node\n */\n\n\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n  let oldStartIdx = 0;\n  let newStartIdx = 0;\n  let idxInOld = 0;\n  let i = 0;\n  let oldEndIdx = oldCh.length - 1;\n  let oldStartVnode = oldCh[0];\n  let oldEndVnode = oldCh[oldEndIdx];\n  let newEndIdx = newCh.length - 1;\n  let newStartVnode = newCh[0];\n  let newEndVnode = newCh[newEndIdx];\n  let node;\n  let elmToMove;\n\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    if (oldStartVnode == null) {\n      // VNode might have been moved left\n      oldStartVnode = oldCh[++oldStartIdx];\n    } else if (oldEndVnode == null) {\n      oldEndVnode = oldCh[--oldEndIdx];\n    } else if (newStartVnode == null) {\n      newStartVnode = newCh[++newStartIdx];\n    } else if (newEndVnode == null) {\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newStartVnode)) {\n      // if the start nodes are the same then we should patch the new VNode\n      // onto the old one, and increment our `newStartIdx` and `oldStartIdx`\n      // indices to reflect that. We don't need to move any DOM Nodes around\n      // since things are matched up in order.\n      patch(oldStartVnode, newStartVnode);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else if (isSameVnode(oldEndVnode, newEndVnode)) {\n      // likewise, if the end nodes are the same we patch new onto old and\n      // decrement our end indices, and also likewise in this case we don't\n      // need to move any DOM Nodes.\n      patch(oldEndVnode, newEndVnode);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newEndVnode)) {\n      // case: \"Vnode moved right\"\n      //\n      // We've found that the last node in our window on the new children is\n      // the same VNode as the _first_ node in our window on the old children\n      // we're dealing with now. Visually, this is the layout of these two\n      // nodes:\n      //\n      // newCh: [..., newStartVnode , ... , newEndVnode , ...]\n      //                                    ^^^^^^^^^^^\n      // oldCh: [..., oldStartVnode , ... , oldEndVnode , ...]\n      //              ^^^^^^^^^^^^^\n      //\n      // In this situation we need to patch `newEndVnode` onto `oldStartVnode`\n      // and move the DOM element for `oldStartVnode`.\n      if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n        putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n      }\n\n      patch(oldStartVnode, newEndVnode); // We need to move the element for `oldStartVnode` into a position which\n      // will be appropriate for `newEndVnode`. For this we can use\n      // `.insertBefore` and `oldEndVnode.$elm$.nextSibling`. If there is a\n      // sibling for `oldEndVnode.$elm$` then we want to move the DOM node for\n      // `oldStartVnode` between `oldEndVnode` and it's sibling, like so:\n      //\n      // <old-start-node />\n      // <some-intervening-node />\n      // <old-end-node />\n      // <!-- ->              <-- `oldStartVnode.$elm$` should be inserted here\n      // <next-sibling />\n      //\n      // If instead `oldEndVnode.$elm$` has no sibling then we just want to put\n      // the node for `oldStartVnode` at the end of the children of\n      // `parentElm`. Luckily, `Node.nextSibling` will return `null` if there\n      // aren't any siblings, and passing `null` to `Node.insertBefore` will\n      // append it to the children of the parent element.\n\n      parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldEndVnode, newStartVnode)) {\n      // case: \"Vnode moved left\"\n      //\n      // We've found that the first node in our window on the new children is\n      // the same VNode as the _last_ node in our window on the old children.\n      // Visually, this is the layout of these two nodes:\n      //\n      // newCh: [..., newStartVnode , ... , newEndVnode , ...]\n      //              ^^^^^^^^^^^^^\n      // oldCh: [..., oldStartVnode , ... , oldEndVnode , ...]\n      //                                    ^^^^^^^^^^^\n      //\n      // In this situation we need to patch `newStartVnode` onto `oldEndVnode`\n      // (which will handle updating any changed attributes, reconciling their\n      // children etc) but we also need to move the DOM node to which\n      // `oldEndVnode` corresponds.\n      if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n        putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n      }\n\n      patch(oldEndVnode, newStartVnode); // We've already checked above if `oldStartVnode` and `newStartVnode` are\n      // the same node, so since we're here we know that they are not. Thus we\n      // can move the element for `oldEndVnode` _before_ the element for\n      // `oldStartVnode`, leaving `oldStartVnode` to be reconciled in the\n      // future.\n\n      parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else {\n      // Here we do some checks to match up old and new nodes based on the\n      // `$key$` attribute, which is set by putting a `key=\"my-key\"` attribute\n      // in the JSX for a DOM element in the implementation of a Stencil\n      // component.\n      //\n      // First we check to see if there are any nodes in the array of old\n      // children which have the same key as the first node in the new\n      // children.\n      idxInOld = -1;\n\n      if (BUILD.vdomKey) {\n        for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n          if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n            idxInOld = i;\n            break;\n          }\n        }\n      }\n\n      if (BUILD.vdomKey && idxInOld >= 0) {\n        // We found a node in the old children which matches up with the first\n        // node in the new children! So let's deal with that\n        elmToMove = oldCh[idxInOld];\n\n        if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n          // the tag doesn't match so we'll need a new DOM element\n          node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\n        } else {\n          patch(elmToMove, newStartVnode); // invalidate the matching old node so that we won't try to update it\n          // again later on\n\n          oldCh[idxInOld] = undefined;\n          node = elmToMove.$elm$;\n        }\n\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        // We either didn't find an element in the old children that matches\n        // the key of the first new child OR the build is not using `key`\n        // attributes at all. In either case we need to create a new element\n        // for the new node.\n        node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n        newStartVnode = newCh[++newStartIdx];\n      }\n\n      if (node) {\n        // if we created a new node then handle inserting it to the DOM\n        if (BUILD.slotRelocation) {\n          parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n        } else {\n          oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n        }\n      }\n    }\n  }\n\n  if (oldStartIdx > oldEndIdx) {\n    // we have some more new nodes to add which don't match up with old nodes\n    addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n  } else if (BUILD.updatable && newStartIdx > newEndIdx) {\n    // there are nodes in the `oldCh` array which no longer correspond to nodes\n    // in the new array, so lets remove them (which entails cleaning up the\n    // relevant DOM nodes)\n    removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n  }\n};\n/**\n * Compare two VNodes to determine if they are the same\n *\n * **NB**: This function is an equality _heuristic_ based on the available\n * information set on the two VNodes and can be misleading under certain\n * circumstances. In particular, if the two nodes do not have `key` attrs\n * (available under `$key$` on VNodes) then the function falls back on merely\n * checking that they have the same tag.\n *\n * So, in other words, if `key` attrs are not set on VNodes which may be\n * changing order within a `children` array or something along those lines then\n * we could obtain a false positive and then have to do needless re-rendering.\n *\n * @param leftVNode the first VNode to check\n * @param rightVNode the second VNode to check\n * @returns whether they're equal or not\n */\n\n\nconst isSameVnode = (leftVNode, rightVNode) => {\n  // compare if two vnode to see if they're \"technically\" the same\n  // need to have the same element tag, and same key to be the same\n  if (leftVNode.$tag$ === rightVNode.$tag$) {\n    if (BUILD.slotRelocation && leftVNode.$tag$ === 'slot') {\n      return leftVNode.$name$ === rightVNode.$name$;\n    } // this will be set if components in the build have `key` attrs set on them\n\n\n    if (BUILD.vdomKey) {\n      return leftVNode.$key$ === rightVNode.$key$;\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nconst referenceNode = node => {\n  // this node was relocated to a new location in the dom\n  // because of some other component's slot\n  // but we still have an html comment in place of where\n  // it's original location was according to it's original vdom\n  return node && node['s-ol'] || node;\n};\n\nconst parentReferenceNode = node => (node['s-ol'] ? node['s-ol'] : node).parentNode;\n/**\n * Handle reconciling an outdated VNode with a new one which corresponds to\n * it. This function handles flushing updates to the DOM and reconciling the\n * children of the two nodes (if any).\n *\n * @param oldVNode an old VNode whose DOM element and children we want to update\n * @param newVNode a new VNode representing an updated version of the old one\n */\n\n\nconst patch = (oldVNode, newVNode) => {\n  const elm = newVNode.$elm$ = oldVNode.$elm$;\n  const oldChildren = oldVNode.$children$;\n  const newChildren = newVNode.$children$;\n  const tag = newVNode.$tag$;\n  const text = newVNode.$text$;\n  let defaultHolder;\n\n  if (!BUILD.vdomText || text === null) {\n    if (BUILD.svg) {\n      // test if we're rendering an svg element, or still rendering nodes inside of one\n      // only add this to the when the compiler sees we're using an svg somewhere\n      isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n    }\n\n    if (BUILD.vdomAttribute || BUILD.reflect) {\n      if (BUILD.slot && tag === 'slot') ;else {\n        // either this is the first render of an element OR it's an update\n        // AND we already know it's possible it could have changed\n        // this updates the element's css classes, attrs, props, listeners, etc.\n        updateElement(oldVNode, newVNode, isSvgMode);\n      }\n    }\n\n    if (BUILD.updatable && oldChildren !== null && newChildren !== null) {\n      // looks like there's child vnodes for both the old and new vnodes\n      // so we need to call `updateChildren` to reconcile them\n      updateChildren(elm, oldChildren, newVNode, newChildren);\n    } else if (newChildren !== null) {\n      // no old child vnodes, but there are new child vnodes to add\n      if (BUILD.updatable && BUILD.vdomText && oldVNode.$text$ !== null) {\n        // the old vnode was text, so be sure to clear it out\n        elm.textContent = '';\n      } // add the new vnode children\n\n\n      addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n    } else if (BUILD.updatable && oldChildren !== null) {\n      // no new child vnodes, but there are old child vnodes to remove\n      removeVnodes(oldChildren, 0, oldChildren.length - 1);\n    }\n\n    if (BUILD.svg && isSvgMode && tag === 'svg') {\n      isSvgMode = false;\n    }\n  } else if (BUILD.vdomText && BUILD.slotRelocation && (defaultHolder = elm['s-cr'])) {\n    // this element has slotted content\n    defaultHolder.parentNode.textContent = text;\n  } else if (BUILD.vdomText && oldVNode.$text$ !== text) {\n    // update the text content for the text only vnode\n    // and also only if the text is different than before\n    elm.data = text;\n  }\n};\n\nconst updateFallbackSlotVisibility = elm => {\n  // tslint:disable-next-line: prefer-const\n  const childNodes = elm.childNodes;\n  let childNode;\n  let i;\n  let ilen;\n  let j;\n  let slotNameAttr;\n  let nodeType;\n\n  for (i = 0, ilen = childNodes.length; i < ilen; i++) {\n    childNode = childNodes[i];\n\n    if (childNode.nodeType === 1\n    /* NODE_TYPE.ElementNode */\n    ) {\n      if (childNode['s-sr']) {\n        // this is a slot fallback node\n        // get the slot name for this slot reference node\n        slotNameAttr = childNode['s-sn']; // by default always show a fallback slot node\n        // then hide it if there are other slots in the light dom\n\n        childNode.hidden = false;\n\n        for (j = 0; j < ilen; j++) {\n          nodeType = childNodes[j].nodeType;\n\n          if (childNodes[j]['s-hn'] !== childNode['s-hn'] || slotNameAttr !== '') {\n            // this sibling node is from a different component OR is a named fallback slot node\n            if (nodeType === 1\n            /* NODE_TYPE.ElementNode */\n            && slotNameAttr === childNodes[j].getAttribute('slot')) {\n              childNode.hidden = true;\n              break;\n            }\n          } else {\n            // this is a default fallback slot node\n            // any element or text node (with content)\n            // should hide the default fallback slot node\n            if (nodeType === 1\n            /* NODE_TYPE.ElementNode */\n            || nodeType === 3\n            /* NODE_TYPE.TextNode */\n            && childNodes[j].textContent.trim() !== '') {\n              childNode.hidden = true;\n              break;\n            }\n          }\n        }\n      } // keep drilling down\n\n\n      updateFallbackSlotVisibility(childNode);\n    }\n  }\n};\n\nconst relocateNodes = [];\n\nconst relocateSlotContent = elm => {\n  // tslint:disable-next-line: prefer-const\n  let childNode;\n  let node;\n  let hostContentNodes;\n  let slotNameAttr;\n  let relocateNodeData;\n  let j;\n  let i = 0;\n  const childNodes = elm.childNodes;\n  const ilen = childNodes.length;\n\n  for (; i < ilen; i++) {\n    childNode = childNodes[i];\n\n    if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n      // first got the content reference comment node\n      // then we got it's parent, which is where all the host content is in now\n      hostContentNodes = node.parentNode.childNodes;\n      slotNameAttr = childNode['s-sn'];\n\n      for (j = hostContentNodes.length - 1; j >= 0; j--) {\n        node = hostContentNodes[j];\n\n        if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n          // let's do some relocating to its new home\n          // but never relocate a content reference node\n          // that is suppose to always represent the original content location\n          if (isNodeLocatedInSlot(node, slotNameAttr)) {\n            // it's possible we've already decided to relocate this node\n            relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node); // made some changes to slots\n            // let's make sure we also double check\n            // fallbacks are correctly hidden or shown\n\n            checkSlotFallbackVisibility = true;\n            node['s-sn'] = node['s-sn'] || slotNameAttr;\n\n            if (relocateNodeData) {\n              // previously we never found a slot home for this node\n              // but turns out we did, so let's remember it now\n              relocateNodeData.$slotRefNode$ = childNode;\n            } else {\n              // add to our list of nodes to relocate\n              relocateNodes.push({\n                $slotRefNode$: childNode,\n                $nodeToRelocate$: node\n              });\n            }\n\n            if (node['s-sr']) {\n              relocateNodes.map(relocateNode => {\n                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                  relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node);\n\n                  if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                    relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                  }\n                }\n              });\n            }\n          } else if (!relocateNodes.some(r => r.$nodeToRelocate$ === node)) {\n            // so far this element does not have a slot home, not setting slotRefNode on purpose\n            // if we never find a home for this element then we'll need to hide it\n            relocateNodes.push({\n              $nodeToRelocate$: node\n            });\n          }\n        }\n      }\n    }\n\n    if (childNode.nodeType === 1\n    /* NODE_TYPE.ElementNode */\n    ) {\n      relocateSlotContent(childNode);\n    }\n  }\n};\n\nconst isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr) => {\n  if (nodeToRelocate.nodeType === 1\n  /* NODE_TYPE.ElementNode */\n  ) {\n    if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {\n      return true;\n    }\n\n    if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (nodeToRelocate['s-sn'] === slotNameAttr) {\n    return true;\n  }\n\n  return slotNameAttr === '';\n};\n\nconst callNodeRefs = vNode => {\n  if (BUILD.vdomRef) {\n    vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n    vNode.$children$ && vNode.$children$.map(callNodeRefs);\n  }\n};\n\nconst renderVdom = (hostRef, renderFnResults) => {\n  const hostElm = hostRef.$hostElement$;\n  const cmpMeta = hostRef.$cmpMeta$;\n  const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n  const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n  hostTagName = hostElm.tagName; // <Host> runtime check\n\n  if (BUILD.isDev && Array.isArray(renderFnResults) && renderFnResults.some(isHost)) {\n    throw new Error(`The <Host> must be the single root component.\nLooks like the render() function of \"${hostTagName.toLowerCase()}\" is returning an array that contains the <Host>.\n\nThe render() function should look like this instead:\n\nrender() {\n  // Do not return an array\n  return (\n    <Host>{content}</Host>\n  );\n}\n  `);\n  }\n\n  if (BUILD.reflect && cmpMeta.$attrsToReflect$) {\n    rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n    cmpMeta.$attrsToReflect$.map(([propName, attribute]) => rootVnode.$attrs$[attribute] = hostElm[propName]);\n  }\n\n  rootVnode.$tag$ = null;\n  rootVnode.$flags$ |= 4\n  /* VNODE_FLAGS.isHost */\n  ;\n  hostRef.$vnode$ = rootVnode;\n  rootVnode.$elm$ = oldVNode.$elm$ = BUILD.shadowDom ? hostElm.shadowRoot || hostElm : hostElm;\n\n  if (BUILD.scoped || BUILD.shadowDom) {\n    scopeId = hostElm['s-sc'];\n  }\n\n  if (BUILD.slotRelocation) {\n    contentRef = hostElm['s-cr'];\n    useNativeShadowDom = supportsShadow && (cmpMeta.$flags$ & 1\n    /* CMP_FLAGS.shadowDomEncapsulation */\n    ) !== 0; // always reset\n\n    checkSlotFallbackVisibility = false;\n  } // synchronous patch\n\n\n  patch(oldVNode, rootVnode);\n\n  if (BUILD.slotRelocation) {\n    // while we're moving nodes around existing nodes, temporarily disable\n    // the disconnectCallback from working\n    plt.$flags$ |= 1\n    /* PLATFORM_FLAGS.isTmpDisconnected */\n    ;\n\n    if (checkSlotRelocate) {\n      relocateSlotContent(rootVnode.$elm$);\n      let relocateData;\n      let nodeToRelocate;\n      let orgLocationNode;\n      let parentNodeRef;\n      let insertBeforeNode;\n      let refNode;\n      let i = 0;\n\n      for (; i < relocateNodes.length; i++) {\n        relocateData = relocateNodes[i];\n        nodeToRelocate = relocateData.$nodeToRelocate$;\n\n        if (!nodeToRelocate['s-ol']) {\n          // add a reference node marking this node's original location\n          // keep a reference to this node for later lookups\n          orgLocationNode = BUILD.isDebug || BUILD.hydrateServerSide ? originalLocationDebugNode(nodeToRelocate) : doc.createTextNode('');\n          orgLocationNode['s-nr'] = nodeToRelocate;\n          nodeToRelocate.parentNode.insertBefore(nodeToRelocate['s-ol'] = orgLocationNode, nodeToRelocate);\n        }\n      }\n\n      for (i = 0; i < relocateNodes.length; i++) {\n        relocateData = relocateNodes[i];\n        nodeToRelocate = relocateData.$nodeToRelocate$;\n\n        if (relocateData.$slotRefNode$) {\n          // by default we're just going to insert it directly\n          // after the slot reference node\n          parentNodeRef = relocateData.$slotRefNode$.parentNode;\n          insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n          orgLocationNode = nodeToRelocate['s-ol'];\n\n          while (orgLocationNode = orgLocationNode.previousSibling) {\n            refNode = orgLocationNode['s-nr'];\n\n            if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n              refNode = refNode.nextSibling;\n\n              if (!refNode || !refNode['s-nr']) {\n                insertBeforeNode = refNode;\n                break;\n              }\n            }\n          }\n\n          if (!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode || nodeToRelocate.nextSibling !== insertBeforeNode) {\n            // we've checked that it's worth while to relocate\n            // since that the node to relocate\n            // has a different next sibling or parent relocated\n            if (nodeToRelocate !== insertBeforeNode) {\n              if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                // probably a component in the index.html that doesn't have it's hostname set\n                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n              } // add it back to the dom but in its new home\n\n\n              parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n            }\n          }\n        } else {\n          // this node doesn't have a slot home to go to, so let's hide it\n          if (nodeToRelocate.nodeType === 1\n          /* NODE_TYPE.ElementNode */\n          ) {\n            nodeToRelocate.hidden = true;\n          }\n        }\n      }\n    }\n\n    if (checkSlotFallbackVisibility) {\n      updateFallbackSlotVisibility(rootVnode.$elm$);\n    } // done moving nodes around\n    // allow the disconnect callback to work again\n\n\n    plt.$flags$ &= ~1\n    /* PLATFORM_FLAGS.isTmpDisconnected */\n    ; // always reset\n\n    relocateNodes.length = 0;\n  }\n}; // slot comment debug nodes only created with the `--debug` flag\n// otherwise these nodes are text nodes w/out content\n\n\nconst slotReferenceDebugNode = slotVNode => doc.createComment(`<slot${slotVNode.$name$ ? ' name=\"' + slotVNode.$name$ + '\"' : ''}> (host=${hostTagName.toLowerCase()})`);\n\nconst originalLocationDebugNode = nodeToRelocate => doc.createComment(`org-location for ` + (nodeToRelocate.localName ? `<${nodeToRelocate.localName}> (host=${nodeToRelocate['s-hn']})` : `[${nodeToRelocate.textContent}]`));\n\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n  if (BUILD.asyncLoading && ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n    ancestorComponent['s-p'].push(new Promise(r => hostRef.$onRenderResolve$ = r));\n  }\n};\n\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n  if (BUILD.taskQueue && BUILD.updatable) {\n    hostRef.$flags$ |= 16\n    /* HOST_FLAGS.isQueuedForUpdate */\n    ;\n  }\n\n  if (BUILD.asyncLoading && hostRef.$flags$ & 4\n  /* HOST_FLAGS.isWaitingForChildren */\n  ) {\n    hostRef.$flags$ |= 512\n    /* HOST_FLAGS.needsRerender */\n    ;\n    return;\n  }\n\n  attachToAncestor(hostRef, hostRef.$ancestorComponent$); // there is no ancestor component or the ancestor component\n  // has already fired off its lifecycle update then\n  // fire off the initial update\n\n  const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n\n  return BUILD.taskQueue ? writeTask(dispatch) : dispatch();\n};\n\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n  const elm = hostRef.$hostElement$;\n  const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n  const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n  let promise;\n\n  if (isInitialLoad) {\n    if (BUILD.lazyLoad && BUILD.hostListener) {\n      hostRef.$flags$ |= 256\n      /* HOST_FLAGS.isListenReady */\n      ;\n\n      if (hostRef.$queuedListeners$) {\n        hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));\n        hostRef.$queuedListeners$ = null;\n      }\n    }\n\n    emitLifecycleEvent(elm, 'componentWillLoad');\n\n    if (BUILD.cmpWillLoad) {\n      promise = safeCall(instance, 'componentWillLoad');\n    }\n  } else {\n    emitLifecycleEvent(elm, 'componentWillUpdate');\n\n    if (BUILD.cmpWillUpdate) {\n      promise = safeCall(instance, 'componentWillUpdate');\n    }\n  }\n\n  emitLifecycleEvent(elm, 'componentWillRender');\n\n  if (BUILD.cmpWillRender) {\n    promise = then(promise, () => safeCall(instance, 'componentWillRender'));\n  }\n\n  endSchedule();\n  return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\n\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n  // updateComponent\n  const elm = hostRef.$hostElement$;\n  const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n  const rc = elm['s-rc'];\n\n  if (BUILD.style && isInitialLoad) {\n    // DOM WRITE!\n    attachStyles(hostRef);\n  }\n\n  const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n\n  if (BUILD.isDev) {\n    hostRef.$flags$ |= 1024\n    /* HOST_FLAGS.devOnRender */\n    ;\n  }\n\n  if (BUILD.hydrateServerSide) {\n    await callRender(hostRef, instance, elm);\n  } else {\n    callRender(hostRef, instance, elm);\n  }\n\n  if (BUILD.cssVarShim && plt.$cssShim$) {\n    plt.$cssShim$.updateHost(elm);\n  }\n\n  if (BUILD.isDev) {\n    hostRef.$renderCount$++;\n    hostRef.$flags$ &= ~1024\n    /* HOST_FLAGS.devOnRender */\n    ;\n  }\n\n  if (BUILD.hydrateServerSide) {\n    try {\n      // manually connected child components during server-side hydrate\n      serverSideConnected(elm);\n\n      if (isInitialLoad) {\n        // using only during server-side hydrate\n        if (hostRef.$cmpMeta$.$flags$ & 1\n        /* CMP_FLAGS.shadowDomEncapsulation */\n        ) {\n          elm['s-en'] = '';\n        } else if (hostRef.$cmpMeta$.$flags$ & 2\n        /* CMP_FLAGS.scopedCssEncapsulation */\n        ) {\n          elm['s-en'] = 'c';\n        }\n      }\n    } catch (e) {\n      consoleError(e, elm);\n    }\n  }\n\n  if (BUILD.asyncLoading && rc) {\n    // ok, so turns out there are some child host elements\n    // waiting on this parent element to load\n    // let's fire off all update callbacks waiting\n    rc.map(cb => cb());\n    elm['s-rc'] = undefined;\n  }\n\n  endRender();\n  endUpdate();\n\n  if (BUILD.asyncLoading) {\n    const childrenPromises = elm['s-p'];\n\n    const postUpdate = () => postUpdateComponent(hostRef);\n\n    if (childrenPromises.length === 0) {\n      postUpdate();\n    } else {\n      Promise.all(childrenPromises).then(postUpdate);\n      hostRef.$flags$ |= 4\n      /* HOST_FLAGS.isWaitingForChildren */\n      ;\n      childrenPromises.length = 0;\n    }\n  } else {\n    postUpdateComponent(hostRef);\n  }\n};\n\nconst callRender = (hostRef, instance, elm) => {\n  // in order for bundlers to correctly treeshake the BUILD object\n  // we need to ensure BUILD is not deoptimized within a try/catch\n  // https://rollupjs.org/guide/en/#treeshake tryCatchDeoptimization\n  const allRenderFn = BUILD.allRenderFn ? true : false;\n  const lazyLoad = BUILD.lazyLoad ? true : false;\n  const taskQueue = BUILD.taskQueue ? true : false;\n  const updatable = BUILD.updatable ? true : false;\n\n  try {\n    renderingRef = instance;\n    instance = allRenderFn ? instance.render() : instance.render && instance.render();\n\n    if (updatable && taskQueue) {\n      hostRef.$flags$ &= ~16\n      /* HOST_FLAGS.isQueuedForUpdate */\n      ;\n    }\n\n    if (updatable || lazyLoad) {\n      hostRef.$flags$ |= 2\n      /* HOST_FLAGS.hasRendered */\n      ;\n    }\n\n    if (BUILD.hasRenderFn || BUILD.reflect) {\n      if (BUILD.vdomRender || BUILD.reflect) {\n        // looks like we've got child nodes to render into this host element\n        // or we need to update the css class/attrs on the host element\n        // DOM WRITE!\n        if (BUILD.hydrateServerSide) {\n          return Promise.resolve(instance).then(value => renderVdom(hostRef, value));\n        } else {\n          renderVdom(hostRef, instance);\n        }\n      } else {\n        elm.textContent = instance;\n      }\n    }\n  } catch (e) {\n    consoleError(e, hostRef.$hostElement$);\n  }\n\n  renderingRef = null;\n  return null;\n};\n\nconst getRenderingRef = () => renderingRef;\n\nconst postUpdateComponent = hostRef => {\n  const tagName = hostRef.$cmpMeta$.$tagName$;\n  const elm = hostRef.$hostElement$;\n  const endPostUpdate = createTime('postUpdate', tagName);\n  const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n  const ancestorComponent = hostRef.$ancestorComponent$;\n\n  if (BUILD.cmpDidRender) {\n    if (BUILD.isDev) {\n      hostRef.$flags$ |= 1024\n      /* HOST_FLAGS.devOnRender */\n      ;\n    }\n\n    safeCall(instance, 'componentDidRender');\n\n    if (BUILD.isDev) {\n      hostRef.$flags$ &= ~1024\n      /* HOST_FLAGS.devOnRender */\n      ;\n    }\n  }\n\n  emitLifecycleEvent(elm, 'componentDidRender');\n\n  if (!(hostRef.$flags$ & 64\n  /* HOST_FLAGS.hasLoadedComponent */\n  )) {\n    hostRef.$flags$ |= 64\n    /* HOST_FLAGS.hasLoadedComponent */\n    ;\n\n    if (BUILD.asyncLoading && BUILD.cssAnnotations) {\n      // DOM WRITE!\n      addHydratedFlag(elm);\n    }\n\n    if (BUILD.cmpDidLoad) {\n      if (BUILD.isDev) {\n        hostRef.$flags$ |= 2048\n        /* HOST_FLAGS.devOnDidLoad */\n        ;\n      }\n\n      safeCall(instance, 'componentDidLoad');\n\n      if (BUILD.isDev) {\n        hostRef.$flags$ &= ~2048\n        /* HOST_FLAGS.devOnDidLoad */\n        ;\n      }\n    }\n\n    emitLifecycleEvent(elm, 'componentDidLoad');\n    endPostUpdate();\n\n    if (BUILD.asyncLoading) {\n      hostRef.$onReadyResolve$(elm);\n\n      if (!ancestorComponent) {\n        appDidLoad(tagName);\n      }\n    }\n  } else {\n    if (BUILD.cmpDidUpdate) {\n      // we've already loaded this component\n      // fire off the user's componentDidUpdate method (if one was provided)\n      // componentDidUpdate runs AFTER render() has been called\n      // and all child components have finished updating\n      if (BUILD.isDev) {\n        hostRef.$flags$ |= 1024\n        /* HOST_FLAGS.devOnRender */\n        ;\n      }\n\n      safeCall(instance, 'componentDidUpdate');\n\n      if (BUILD.isDev) {\n        hostRef.$flags$ &= ~1024\n        /* HOST_FLAGS.devOnRender */\n        ;\n      }\n    }\n\n    emitLifecycleEvent(elm, 'componentDidUpdate');\n    endPostUpdate();\n  }\n\n  if (BUILD.hotModuleReplacement) {\n    elm['s-hmr-load'] && elm['s-hmr-load']();\n  }\n\n  if (BUILD.method && BUILD.lazyLoad) {\n    hostRef.$onInstanceResolve$(elm);\n  } // load events fire from bottom to top\n  // the deepest elements load first then bubbles up\n\n\n  if (BUILD.asyncLoading) {\n    if (hostRef.$onRenderResolve$) {\n      hostRef.$onRenderResolve$();\n      hostRef.$onRenderResolve$ = undefined;\n    }\n\n    if (hostRef.$flags$ & 512\n    /* HOST_FLAGS.needsRerender */\n    ) {\n      nextTick(() => scheduleUpdate(hostRef, false));\n    }\n\n    hostRef.$flags$ &= ~(4\n    /* HOST_FLAGS.isWaitingForChildren */\n    | 512\n    /* HOST_FLAGS.needsRerender */\n    );\n  } // ( •_•)\n  // ( •_•)>⌐■-■\n  // (⌐■_■)\n\n};\n\nconst forceUpdate = ref => {\n  if (BUILD.updatable) {\n    const hostRef = getHostRef(ref);\n    const isConnected = hostRef.$hostElement$.isConnected;\n\n    if (isConnected && (hostRef.$flags$ & (2\n    /* HOST_FLAGS.hasRendered */\n    | 16\n    /* HOST_FLAGS.isQueuedForUpdate */\n    )) === 2\n    /* HOST_FLAGS.hasRendered */\n    ) {\n      scheduleUpdate(hostRef, false);\n    } // Returns \"true\" when the forced update was successfully scheduled\n\n\n    return isConnected;\n  }\n\n  return false;\n};\n\nconst appDidLoad = who => {\n  // on appload\n  // we have finish the first big initial render\n  if (BUILD.cssAnnotations) {\n    addHydratedFlag(doc.documentElement);\n  }\n\n  if (BUILD.asyncQueue) {\n    plt.$flags$ |= 2\n    /* PLATFORM_FLAGS.appLoaded */\n    ;\n  }\n\n  nextTick(() => emitEvent(win, 'appload', {\n    detail: {\n      namespace: NAMESPACE\n    }\n  }));\n\n  if (BUILD.profile && performance.measure) {\n    performance.measure(`[Stencil] ${NAMESPACE} initial load (by ${who})`, 'st:app:start');\n  }\n};\n\nconst safeCall = (instance, method, arg) => {\n  if (instance && instance[method]) {\n    try {\n      return instance[method](arg);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  return undefined;\n};\n\nconst then = (promise, thenFn) => {\n  return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\n\nconst emitLifecycleEvent = (elm, lifecycleName) => {\n  if (BUILD.lifecycleDOMEvents) {\n    emitEvent(elm, 'stencil_' + lifecycleName, {\n      bubbles: true,\n      composed: true,\n      detail: {\n        namespace: NAMESPACE\n      }\n    });\n  }\n};\n\nconst addHydratedFlag = elm => BUILD.hydratedClass ? elm.classList.add('hydrated') : BUILD.hydratedAttribute ? elm.setAttribute('hydrated', '') : undefined;\n\nconst serverSideConnected = elm => {\n  const children = elm.children;\n\n  if (children != null) {\n    for (let i = 0, ii = children.length; i < ii; i++) {\n      const childElm = children[i];\n\n      if (typeof childElm.connectedCallback === 'function') {\n        childElm.connectedCallback();\n      }\n\n      serverSideConnected(childElm);\n    }\n  }\n};\n\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\n\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n  // check our new property value against our internal value\n  const hostRef = getHostRef(ref);\n  const elm = BUILD.lazyLoad ? hostRef.$hostElement$ : ref;\n  const oldVal = hostRef.$instanceValues$.get(propName);\n  const flags = hostRef.$flags$;\n  const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n  newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]); // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n\n  const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n  const didValueChange = newVal !== oldVal && !areBothNaN;\n\n  if ((!BUILD.lazyLoad || !(flags & 8\n  /* HOST_FLAGS.isConstructingInstance */\n  ) || oldVal === undefined) && didValueChange) {\n    // gadzooks! the property's value has changed!!\n    // set our new value!\n    hostRef.$instanceValues$.set(propName, newVal);\n\n    if (BUILD.isDev) {\n      if (hostRef.$flags$ & 1024\n      /* HOST_FLAGS.devOnRender */\n      ) {\n        consoleDevWarn(`The state/prop \"${propName}\" changed during rendering. This can potentially lead to infinite-loops and other bugs.`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n      } else if (hostRef.$flags$ & 2048\n      /* HOST_FLAGS.devOnDidLoad */\n      ) {\n        consoleDevWarn(`The state/prop \"${propName}\" changed during \"componentDidLoad()\", this triggers extra re-renders, try to setup on \"componentWillLoad()\"`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n      }\n    }\n\n    if (!BUILD.lazyLoad || instance) {\n      // get an array of method names of watch functions to call\n      if (BUILD.watchCallback && cmpMeta.$watchers$ && flags & 128\n      /* HOST_FLAGS.isWatchReady */\n      ) {\n        const watchMethods = cmpMeta.$watchers$[propName];\n\n        if (watchMethods) {\n          // this instance is watching for when this property changed\n          watchMethods.map(watchMethodName => {\n            try {\n              // fire off each of the watch methods that are watching this property\n              instance[watchMethodName](newVal, oldVal, propName);\n            } catch (e) {\n              consoleError(e, elm);\n            }\n          });\n        }\n      }\n\n      if (BUILD.updatable && (flags & (2\n      /* HOST_FLAGS.hasRendered */\n      | 16\n      /* HOST_FLAGS.isQueuedForUpdate */\n      )) === 2\n      /* HOST_FLAGS.hasRendered */\n      ) {\n        if (BUILD.cmpShouldUpdate && instance.componentShouldUpdate) {\n          if (instance.componentShouldUpdate(newVal, oldVal, propName) === false) {\n            return;\n          }\n        } // looks like this value actually changed, so we've got work to do!\n        // but only if we've already rendered, otherwise just chill out\n        // queue that we need to do an update, but don't worry about queuing\n        // up millions cuz this function ensures it only runs once\n\n\n        scheduleUpdate(hostRef, false);\n      }\n    }\n  }\n};\n/**\n * Attach a series of runtime constructs to a compiled Stencil component\n * constructor, including getters and setters for the `@Prop` and `@State`\n * decorators, callbacks for when attributes change, and so on.\n *\n * @param Cstr the constructor for a component that we need to process\n * @param cmpMeta metadata collected previously about the component\n * @param flags a number used to store a series of bit flags\n * @returns a reference to the same constructor passed in (but now mutated)\n */\n\n\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n  if (BUILD.member && cmpMeta.$members$) {\n    if (BUILD.watchCallback && Cstr.watchers) {\n      cmpMeta.$watchers$ = Cstr.watchers;\n    } // It's better to have a const than two Object.entries()\n\n\n    const members = Object.entries(cmpMeta.$members$);\n    const prototype = Cstr.prototype;\n    members.map(([memberName, [memberFlags]]) => {\n      if ((BUILD.prop || BUILD.state) && (memberFlags & 31\n      /* MEMBER_FLAGS.Prop */\n      || (!BUILD.lazyLoad || flags & 2\n      /* PROXY_FLAGS.proxyState */\n      ) && memberFlags & 32\n      /* MEMBER_FLAGS.State */\n      )) {\n        // proxyComponent - prop\n        Object.defineProperty(prototype, memberName, {\n          get() {\n            // proxyComponent, get value\n            return getValue(this, memberName);\n          },\n\n          set(newValue) {\n            // only during dev time\n            if (BUILD.isDev) {\n              const ref = getHostRef(this);\n\n              if ( // we are proxying the instance (not element)\n              (flags & 1\n              /* PROXY_FLAGS.isElementConstructor */\n              ) === 0 && // the element is not constructing\n              (ref.$flags$ & 8\n              /* HOST_FLAGS.isConstructingInstance */\n              ) === 0 && // the member is a prop\n              (memberFlags & 31\n              /* MEMBER_FLAGS.Prop */\n              ) !== 0 && // the member is not mutable\n              (memberFlags & 1024\n              /* MEMBER_FLAGS.Mutable */\n              ) === 0) {\n                consoleDevWarn(`@Prop() \"${memberName}\" on <${cmpMeta.$tagName$}> is immutable but was modified from within the component.\\nMore information: https://stenciljs.com/docs/properties#prop-mutability`);\n              }\n            } // proxyComponent, set value\n\n\n            setValue(this, memberName, newValue, cmpMeta);\n          },\n\n          configurable: true,\n          enumerable: true\n        });\n      } else if (BUILD.lazyLoad && BUILD.method && flags & 1\n      /* PROXY_FLAGS.isElementConstructor */\n      && memberFlags & 64\n      /* MEMBER_FLAGS.Method */\n      ) {\n        // proxyComponent - method\n        Object.defineProperty(prototype, memberName, {\n          value(...args) {\n            const ref = getHostRef(this);\n            return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));\n          }\n\n        });\n      }\n    });\n\n    if (BUILD.observeAttribute && (!BUILD.lazyLoad || flags & 1\n    /* PROXY_FLAGS.isElementConstructor */\n    )) {\n      const attrNameToPropName = new Map();\n\n      prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n        plt.jmp(() => {\n          const propName = attrNameToPropName.get(attrName); //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n          //  in the case where an attribute was set inline.\n          //  ```html\n          //    <my-component some-attribute=\"some-value\"></my-component>\n          //  ```\n          //\n          //  There is an edge case where a developer sets the attribute inline on a custom element and then\n          //  programmatically changes it before it has been upgraded as shown below:\n          //\n          //  ```html\n          //    <!-- this component has _not_ been upgraded yet -->\n          //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n          //    <script>\n          //      // grab non-upgraded component\n          //      el = document.querySelector(\"#test\");\n          //      el.someAttribute = \"another-value\";\n          //      // upgrade component\n          //      customElements.define('my-component', MyComponent);\n          //    </script>\n          //  ```\n          //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n          //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n          //  to the value that was set inline i.e. \"some-value\" from above example. When\n          //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\n          //\n          //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n          //  by connectedCallback as this attributeChangedCallback will not fire.\n          //\n          //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n          //\n          //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n          //  properties here given that this goes against best practices outlined here\n          //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n\n          if (this.hasOwnProperty(propName)) {\n            newValue = this[propName];\n            delete this[propName];\n          } else if (prototype.hasOwnProperty(propName) && typeof this[propName] === 'number' && this[propName] == newValue) {\n            // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n            // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n            // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n            return;\n          }\n\n          this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n        });\n      }; // create an array of attributes to observe\n      // and also create a map of html attribute name to js property name\n\n\n      Cstr.observedAttributes = members.filter(([_, m]) => m[0] & 15\n      /* MEMBER_FLAGS.HasAttribute */\n      ) // filter to only keep props that should match attributes\n      .map(([propName, m]) => {\n        const attrName = m[1] || propName;\n        attrNameToPropName.set(attrName, propName);\n\n        if (BUILD.reflect && m[0] & 512\n        /* MEMBER_FLAGS.ReflectAttr */\n        ) {\n          cmpMeta.$attrsToReflect$.push([propName, attrName]);\n        }\n\n        return attrName;\n      });\n    }\n  }\n\n  return Cstr;\n};\n\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n  // initializeComponent\n  if ((BUILD.lazyLoad || BUILD.hydrateServerSide || BUILD.style) && (hostRef.$flags$ & 32\n  /* HOST_FLAGS.hasInitializedComponent */\n  ) === 0) {\n    if (BUILD.lazyLoad || BUILD.hydrateClientSide) {\n      // we haven't initialized this element yet\n      hostRef.$flags$ |= 32\n      /* HOST_FLAGS.hasInitializedComponent */\n      ; // lazy loaded components\n      // request the component's implementation to be\n      // wired up with the host element\n\n      Cstr = loadModule(cmpMeta, hostRef, hmrVersionId);\n\n      if (Cstr.then) {\n        // Await creates a micro-task avoid if possible\n        const endLoad = uniqueTime(`st:load:${cmpMeta.$tagName$}:${hostRef.$modeName$}`, `[Stencil] Load module for <${cmpMeta.$tagName$}>`);\n        Cstr = await Cstr;\n        endLoad();\n      }\n\n      if ((BUILD.isDev || BUILD.isDebug) && !Cstr) {\n        throw new Error(`Constructor for \"${cmpMeta.$tagName$}#${hostRef.$modeName$}\" was not found`);\n      }\n\n      if (BUILD.member && !Cstr.isProxied) {\n        // we've never proxied this Constructor before\n        // let's add the getters/setters to its prototype before\n        // the first time we create an instance of the implementation\n        if (BUILD.watchCallback) {\n          cmpMeta.$watchers$ = Cstr.watchers;\n        }\n\n        proxyComponent(Cstr, cmpMeta, 2\n        /* PROXY_FLAGS.proxyState */\n        );\n        Cstr.isProxied = true;\n      }\n\n      const endNewInstance = createTime('createInstance', cmpMeta.$tagName$); // ok, time to construct the instance\n      // but let's keep track of when we start and stop\n      // so that the getters/setters don't incorrectly step on data\n\n      if (BUILD.member) {\n        hostRef.$flags$ |= 8\n        /* HOST_FLAGS.isConstructingInstance */\n        ;\n      } // construct the lazy-loaded component implementation\n      // passing the hostRef is very important during\n      // construction in order to directly wire together the\n      // host element and the lazy-loaded instance\n\n\n      try {\n        new Cstr(hostRef);\n      } catch (e) {\n        consoleError(e);\n      }\n\n      if (BUILD.member) {\n        hostRef.$flags$ &= ~8\n        /* HOST_FLAGS.isConstructingInstance */\n        ;\n      }\n\n      if (BUILD.watchCallback) {\n        hostRef.$flags$ |= 128\n        /* HOST_FLAGS.isWatchReady */\n        ;\n      }\n\n      endNewInstance();\n      fireConnectedCallback(hostRef.$lazyInstance$);\n    } else {\n      // sync constructor component\n      Cstr = elm.constructor;\n      hostRef.$flags$ |= 32\n      /* HOST_FLAGS.hasInitializedComponent */\n      ; // wait for the CustomElementRegistry to mark the component as ready before setting `isWatchReady`. Otherwise,\n      // watchers may fire prematurely if `customElements.get()`/`customElements.whenDefined()` resolves _before_\n      // Stencil has completed instantiating the component.\n\n      customElements.whenDefined(cmpMeta.$tagName$).then(() => hostRef.$flags$ |= 128\n      /* HOST_FLAGS.isWatchReady */\n      );\n    }\n\n    if (BUILD.style && Cstr.style) {\n      // this component has styles but we haven't registered them yet\n      let style = Cstr.style;\n\n      if (BUILD.mode && typeof style !== 'string') {\n        style = style[hostRef.$modeName$ = computeMode(elm)];\n\n        if (BUILD.hydrateServerSide && hostRef.$modeName$) {\n          elm.setAttribute('s-mode', hostRef.$modeName$);\n        }\n      }\n\n      const scopeId = getScopeId(cmpMeta, hostRef.$modeName$);\n\n      if (!styles.has(scopeId)) {\n        const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n\n        if (!BUILD.hydrateServerSide && BUILD.shadowDom && BUILD.shadowDomShim && cmpMeta.$flags$ & 8\n        /* CMP_FLAGS.needsShadowDomShim */\n        ) {\n          style = await import('./shadow-css.js').then(m => m.scopeCss(style, scopeId, false));\n        }\n\n        registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1\n        /* CMP_FLAGS.shadowDomEncapsulation */\n        ));\n        endRegisterStyles();\n      }\n    }\n  } // we've successfully created a lazy instance\n\n\n  const ancestorComponent = hostRef.$ancestorComponent$;\n\n  const schedule = () => scheduleUpdate(hostRef, true);\n\n  if (BUILD.asyncLoading && ancestorComponent && ancestorComponent['s-rc']) {\n    // this is the initial load and this component it has an ancestor component\n    // but the ancestor component has NOT fired its will update lifecycle yet\n    // so let's just cool our jets and wait for the ancestor to continue first\n    // this will get fired off when the ancestor component\n    // finally gets around to rendering its lazy self\n    // fire off the initial update\n    ancestorComponent['s-rc'].push(schedule);\n  } else {\n    schedule();\n  }\n};\n\nconst fireConnectedCallback = instance => {\n  if (BUILD.lazyLoad && BUILD.connectedCallback) {\n    safeCall(instance, 'connectedCallback');\n  }\n};\n\nconst connectedCallback = elm => {\n  if ((plt.$flags$ & 1\n  /* PLATFORM_FLAGS.isTmpDisconnected */\n  ) === 0) {\n    const hostRef = getHostRef(elm);\n    const cmpMeta = hostRef.$cmpMeta$;\n    const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n\n    if (BUILD.hostListenerTargetParent) {\n      // only run if we have listeners being attached to a parent\n      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, true);\n    }\n\n    if (!(hostRef.$flags$ & 1\n    /* HOST_FLAGS.hasConnected */\n    )) {\n      // first time this component has connected\n      hostRef.$flags$ |= 1\n      /* HOST_FLAGS.hasConnected */\n      ;\n      let hostId;\n\n      if (BUILD.hydrateClientSide) {\n        hostId = elm.getAttribute(HYDRATE_ID);\n\n        if (hostId) {\n          if (BUILD.shadowDom && supportsShadow && cmpMeta.$flags$ & 1\n          /* CMP_FLAGS.shadowDomEncapsulation */\n          ) {\n            const scopeId = BUILD.mode ? addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute('s-mode')) : addStyle(elm.shadowRoot, cmpMeta);\n            elm.classList.remove(scopeId + '-h', scopeId + '-s');\n          }\n\n          initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);\n        }\n      }\n\n      if (BUILD.slotRelocation && !hostId) {\n        // initUpdate\n        // if the slot polyfill is required we'll need to put some nodes\n        // in here to act as original content anchors as we move nodes around\n        // host element has been connected to the DOM\n        if (BUILD.hydrateServerSide || (BUILD.slot || BUILD.shadowDom) && cmpMeta.$flags$ & (4\n        /* CMP_FLAGS.hasSlotRelocation */\n        | 8\n        /* CMP_FLAGS.needsShadowDomShim */\n        )) {\n          setContentReference(elm);\n        }\n      }\n\n      if (BUILD.asyncLoading) {\n        // find the first ancestor component (if there is one) and register\n        // this component as one of the actively loading child components for its ancestor\n        let ancestorComponent = elm;\n\n        while (ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host) {\n          // climb up the ancestors looking for the first\n          // component that hasn't finished its lifecycle update yet\n          if (BUILD.hydrateClientSide && ancestorComponent.nodeType === 1\n          /* NODE_TYPE.ElementNode */\n          && ancestorComponent.hasAttribute('s-id') && ancestorComponent['s-p'] || ancestorComponent['s-p']) {\n            // we found this components first ancestor component\n            // keep a reference to this component's ancestor component\n            attachToAncestor(hostRef, hostRef.$ancestorComponent$ = ancestorComponent);\n            break;\n          }\n        }\n      } // Lazy properties\n      // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n\n\n      if (BUILD.prop && !BUILD.hydrateServerSide && cmpMeta.$members$) {\n        Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n          if (memberFlags & 31\n          /* MEMBER_FLAGS.Prop */\n          && elm.hasOwnProperty(memberName)) {\n            const value = elm[memberName];\n            delete elm[memberName];\n            elm[memberName] = value;\n          }\n        });\n      }\n\n      if (BUILD.initializeNextTick) {\n        // connectedCallback, taskQueue, initialLoad\n        // angular sets attribute AFTER connectCallback\n        // https://github.com/angular/angular/issues/18909\n        // https://github.com/angular/angular/issues/19940\n        nextTick(() => initializeComponent(elm, hostRef, cmpMeta));\n      } else {\n        initializeComponent(elm, hostRef, cmpMeta);\n      }\n    } else {\n      // not the first time this has connected\n      // reattach any event listeners to the host\n      // since they would have been removed when disconnected\n      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false); // fire off connectedCallback() on component instance\n\n      fireConnectedCallback(hostRef.$lazyInstance$);\n    }\n\n    endConnected();\n  }\n};\n\nconst setContentReference = elm => {\n  // only required when we're NOT using native shadow dom (slot)\n  // or this browser doesn't support native shadow dom\n  // and this host element was NOT created with SSR\n  // let's pick out the inner content for slot projection\n  // create a node to represent where the original\n  // content was first placed, which is useful later on\n  const contentRefElm = elm['s-cr'] = doc.createComment(BUILD.isDebug ? `content-ref (host=${elm.localName})` : '');\n  contentRefElm['s-cn'] = true;\n  elm.insertBefore(contentRefElm, elm.firstChild);\n};\n\nconst disconnectedCallback = elm => {\n  if ((plt.$flags$ & 1\n  /* PLATFORM_FLAGS.isTmpDisconnected */\n  ) === 0) {\n    const hostRef = getHostRef(elm);\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n\n    if (BUILD.hostListener) {\n      if (hostRef.$rmListeners$) {\n        hostRef.$rmListeners$.map(rmListener => rmListener());\n        hostRef.$rmListeners$ = undefined;\n      }\n    } // clear CSS var-shim tracking\n\n\n    if (BUILD.cssVarShim && plt.$cssShim$) {\n      plt.$cssShim$.removeHost(elm);\n    }\n\n    if (BUILD.lazyLoad && BUILD.disconnectedCallback) {\n      safeCall(instance, 'disconnectedCallback');\n    }\n\n    if (BUILD.cmpDidUnload) {\n      safeCall(instance, 'componentDidUnload');\n    }\n  }\n};\n\nconst defineCustomElement = (Cstr, compactMeta) => {\n  customElements.define(compactMeta[1], proxyCustomElement(Cstr, compactMeta));\n};\n\nconst proxyCustomElement = (Cstr, compactMeta) => {\n  const cmpMeta = {\n    $flags$: compactMeta[0],\n    $tagName$: compactMeta[1]\n  };\n\n  if (BUILD.member) {\n    cmpMeta.$members$ = compactMeta[2];\n  }\n\n  if (BUILD.hostListener) {\n    cmpMeta.$listeners$ = compactMeta[3];\n  }\n\n  if (BUILD.watchCallback) {\n    cmpMeta.$watchers$ = Cstr.$watchers$;\n  }\n\n  if (BUILD.reflect) {\n    cmpMeta.$attrsToReflect$ = [];\n  }\n\n  if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1\n  /* CMP_FLAGS.shadowDomEncapsulation */\n  ) {\n    cmpMeta.$flags$ |= 8\n    /* CMP_FLAGS.needsShadowDomShim */\n    ;\n  }\n\n  const originalConnectedCallback = Cstr.prototype.connectedCallback;\n  const originalDisconnectedCallback = Cstr.prototype.disconnectedCallback;\n  Object.assign(Cstr.prototype, {\n    __registerHost() {\n      registerHost(this, cmpMeta);\n    },\n\n    connectedCallback() {\n      connectedCallback(this);\n\n      if (BUILD.connectedCallback && originalConnectedCallback) {\n        originalConnectedCallback.call(this);\n      }\n    },\n\n    disconnectedCallback() {\n      disconnectedCallback(this);\n\n      if (BUILD.disconnectedCallback && originalDisconnectedCallback) {\n        originalDisconnectedCallback.call(this);\n      }\n    },\n\n    __attachShadow() {\n      if (supportsShadow) {\n        if (BUILD.shadowDelegatesFocus) {\n          this.attachShadow({\n            mode: 'open',\n            delegatesFocus: !!(cmpMeta.$flags$ & 16\n            /* CMP_FLAGS.shadowDelegatesFocus */\n            )\n          });\n        } else {\n          this.attachShadow({\n            mode: 'open'\n          });\n        }\n      } else {\n        this.shadowRoot = this;\n      }\n    }\n\n  });\n  Cstr.is = cmpMeta.$tagName$;\n  return proxyComponent(Cstr, cmpMeta, 1\n  /* PROXY_FLAGS.isElementConstructor */\n  | 2\n  /* PROXY_FLAGS.proxyState */\n  );\n};\n\nconst forceModeUpdate = elm => {\n  if (BUILD.style && BUILD.mode && !BUILD.lazyLoad) {\n    const mode = computeMode(elm);\n    const hostRef = getHostRef(elm);\n\n    if (hostRef.$modeName$ !== mode) {\n      const cmpMeta = hostRef.$cmpMeta$;\n      const oldScopeId = elm['s-sc'];\n      const scopeId = getScopeId(cmpMeta, mode);\n      const style = elm.constructor.style[mode];\n      const flags = cmpMeta.$flags$;\n\n      if (style) {\n        if (!styles.has(scopeId)) {\n          registerStyle(scopeId, style, !!(flags & 1\n          /* CMP_FLAGS.shadowDomEncapsulation */\n          ));\n        }\n\n        hostRef.$modeName$ = mode;\n        elm.classList.remove(oldScopeId + '-h', oldScopeId + '-s');\n        attachStyles(hostRef);\n        forceUpdate(elm);\n      }\n    }\n  }\n};\n\nconst patchCloneNode = HostElementPrototype => {\n  const orgCloneNode = HostElementPrototype.cloneNode;\n\n  HostElementPrototype.cloneNode = function (deep) {\n    const srcNode = this;\n    const isShadowDom = BUILD.shadowDom ? srcNode.shadowRoot && supportsShadow : false;\n    const clonedNode = orgCloneNode.call(srcNode, isShadowDom ? deep : false);\n\n    if (BUILD.slot && !isShadowDom && deep) {\n      let i = 0;\n      let slotted, nonStencilNode;\n      const stencilPrivates = ['s-id', 's-cr', 's-lr', 's-rc', 's-sc', 's-p', 's-cn', 's-sr', 's-sn', 's-hn', 's-ol', 's-nr', 's-si'];\n\n      for (; i < srcNode.childNodes.length; i++) {\n        slotted = srcNode.childNodes[i]['s-nr'];\n        nonStencilNode = stencilPrivates.every(privateField => !srcNode.childNodes[i][privateField]);\n\n        if (slotted) {\n          if (BUILD.appendChildSlotFix && clonedNode.__appendChild) {\n            clonedNode.__appendChild(slotted.cloneNode(true));\n          } else {\n            clonedNode.appendChild(slotted.cloneNode(true));\n          }\n        }\n\n        if (nonStencilNode) {\n          clonedNode.appendChild(srcNode.childNodes[i].cloneNode(true));\n        }\n      }\n    }\n\n    return clonedNode;\n  };\n};\n\nconst patchSlotAppendChild = HostElementPrototype => {\n  HostElementPrototype.__appendChild = HostElementPrototype.appendChild;\n\n  HostElementPrototype.appendChild = function (newChild) {\n    const slotName = newChild['s-sn'] = getSlotName(newChild);\n    const slotNode = getHostSlotNode(this.childNodes, slotName);\n\n    if (slotNode) {\n      const slotChildNodes = getHostSlotChildNodes(slotNode, slotName);\n      const appendAfter = slotChildNodes[slotChildNodes.length - 1];\n      return appendAfter.parentNode.insertBefore(newChild, appendAfter.nextSibling);\n    }\n\n    return this.__appendChild(newChild);\n  };\n};\n/**\n * Patches the text content of an unnamed slotted node inside a scoped component\n * @param hostElementPrototype the `Element` to be patched\n * @param cmpMeta component runtime metadata used to determine if the component should be patched or not\n */\n\n\nconst patchTextContent = (hostElementPrototype, cmpMeta) => {\n  if (BUILD.scoped && cmpMeta.$flags$ & 2\n  /* CMP_FLAGS.scopedCssEncapsulation */\n  ) {\n    const descriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'textContent');\n    Object.defineProperty(hostElementPrototype, '__textContent', descriptor);\n    Object.defineProperty(hostElementPrototype, 'textContent', {\n      get() {\n        var _a; // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n        // the empty string\n\n\n        const slotNode = getHostSlotNode(this.childNodes, ''); // when a slot node is found, the textContent _may_ be found in the next sibling (text) node, depending on how\n        // nodes were reordered during the vdom render. first try to get the text content from the sibling.\n\n        if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3\n        /* NODE_TYPES.TEXT_NODE */\n        ) {\n          return slotNode.nextSibling.textContent;\n        } else if (slotNode) {\n          return slotNode.textContent;\n        } else {\n          // fallback to the original implementation\n          return this.__textContent;\n        }\n      },\n\n      set(value) {\n        var _a; // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n        // the empty string\n\n\n        const slotNode = getHostSlotNode(this.childNodes, ''); // when a slot node is found, the textContent _may_ need to be placed in the next sibling (text) node,\n        // depending on how nodes were reordered during the vdom render. first try to set the text content on the\n        // sibling.\n\n        if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3\n        /* NODE_TYPES.TEXT_NODE */\n        ) {\n          slotNode.nextSibling.textContent = value;\n        } else if (slotNode) {\n          slotNode.textContent = value;\n        } else {\n          // we couldn't find a slot, but that doesn't mean that there isn't one. if this check ran before the DOM\n          // loaded, we could have missed it. check for a content reference element on the scoped component and insert\n          // it there\n          this.__textContent = value;\n          const contentRefElm = this['s-cr'];\n\n          if (contentRefElm) {\n            this.insertBefore(contentRefElm, this.firstChild);\n          }\n        }\n      }\n\n    });\n  }\n};\n\nconst patchChildSlotNodes = (elm, cmpMeta) => {\n  class FakeNodeList extends Array {\n    item(n) {\n      return this[n];\n    }\n\n  }\n\n  if (cmpMeta.$flags$ & 8\n  /* CMP_FLAGS.needsShadowDomShim */\n  ) {\n    const childNodesFn = elm.__lookupGetter__('childNodes');\n\n    Object.defineProperty(elm, 'children', {\n      get() {\n        return this.childNodes.map(n => n.nodeType === 1);\n      }\n\n    });\n    Object.defineProperty(elm, 'childElementCount', {\n      get() {\n        return elm.children.length;\n      }\n\n    });\n    Object.defineProperty(elm, 'childNodes', {\n      get() {\n        const childNodes = childNodesFn.call(this);\n\n        if ((plt.$flags$ & 1\n        /* PLATFORM_FLAGS.isTmpDisconnected */\n        ) === 0 && getHostRef(this).$flags$ & 2\n        /* HOST_FLAGS.hasRendered */\n        ) {\n          const result = new FakeNodeList();\n\n          for (let i = 0; i < childNodes.length; i++) {\n            const slot = childNodes[i]['s-nr'];\n\n            if (slot) {\n              result.push(slot);\n            }\n          }\n\n          return result;\n        }\n\n        return FakeNodeList.from(childNodes);\n      }\n\n    });\n  }\n};\n\nconst getSlotName = node => node['s-sn'] || node.nodeType === 1 && node.getAttribute('slot') || '';\n/**\n * Recursively searches a series of child nodes for a slot with the provided name.\n * @param childNodes the nodes to search for a slot with a specific name.\n * @param slotName the name of the slot to match on.\n * @returns a reference to the slot node that matches the provided name, `null` otherwise\n */\n\n\nconst getHostSlotNode = (childNodes, slotName) => {\n  let i = 0;\n  let childNode;\n\n  for (; i < childNodes.length; i++) {\n    childNode = childNodes[i];\n\n    if (childNode['s-sr'] && childNode['s-sn'] === slotName) {\n      return childNode;\n    }\n\n    childNode = getHostSlotNode(childNode.childNodes, slotName);\n\n    if (childNode) {\n      return childNode;\n    }\n  }\n\n  return null;\n};\n\nconst getHostSlotChildNodes = (n, slotName) => {\n  const childNodes = [n];\n\n  while ((n = n.nextSibling) && n['s-sn'] === slotName) {\n    childNodes.push(n);\n  }\n\n  return childNodes;\n};\n\nconst hmrStart = (elm, cmpMeta, hmrVersionId) => {\n  // ¯\\_(ツ)_/¯\n  const hostRef = getHostRef(elm); // reset state flags to only have been connected\n\n  hostRef.$flags$ = 1\n  /* HOST_FLAGS.hasConnected */\n  ; // TODO\n  // detatch any event listeners that may have been added\n  // because we're not passing an exact event name it'll\n  // remove all of this element's event, which is good\n  // create a callback for when this component finishes hmr\n\n  elm['s-hmr-load'] = () => {\n    // finished hmr for this element\n    delete elm['s-hmr-load'];\n  }; // re-initialize the component\n\n\n  initializeComponent(elm, hostRef, cmpMeta, hmrVersionId);\n};\n\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n  if (BUILD.profile && performance.mark) {\n    performance.mark('st:app:start');\n  }\n\n  installDevTools();\n  const endBootstrap = createTime('bootstrapLazy');\n  const cmpTags = [];\n  const exclude = options.exclude || [];\n  const customElements = win.customElements;\n  const head = doc.head;\n  const metaCharset = /*@__PURE__*/head.querySelector('meta[charset]');\n  const visibilityStyle = /*@__PURE__*/doc.createElement('style');\n  const deferredConnectedCallbacks = [];\n  const styles = /*@__PURE__*/doc.querySelectorAll(`[${HYDRATED_STYLE_ID}]`);\n  let appLoadFallback;\n  let isBootstrapping = true;\n  let i = 0;\n  Object.assign(plt, options);\n  plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n\n  if (BUILD.asyncQueue) {\n    if (options.syncQueue) {\n      plt.$flags$ |= 4\n      /* PLATFORM_FLAGS.queueSync */\n      ;\n    }\n  }\n\n  if (BUILD.hydrateClientSide) {\n    // If the app is already hydrated there is not point to disable the\n    // async queue. This will improve the first input delay\n    plt.$flags$ |= 2\n    /* PLATFORM_FLAGS.appLoaded */\n    ;\n  }\n\n  if (BUILD.hydrateClientSide && BUILD.shadowDom) {\n    for (; i < styles.length; i++) {\n      registerStyle(styles[i].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles[i].innerHTML), true);\n    }\n  }\n\n  lazyBundles.map(lazyBundle => {\n    lazyBundle[1].map(compactMeta => {\n      const cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n        $members$: compactMeta[2],\n        $listeners$: compactMeta[3]\n      };\n\n      if (BUILD.member) {\n        cmpMeta.$members$ = compactMeta[2];\n      }\n\n      if (BUILD.hostListener) {\n        cmpMeta.$listeners$ = compactMeta[3];\n      }\n\n      if (BUILD.reflect) {\n        cmpMeta.$attrsToReflect$ = [];\n      }\n\n      if (BUILD.watchCallback) {\n        cmpMeta.$watchers$ = {};\n      }\n\n      if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1\n      /* CMP_FLAGS.shadowDomEncapsulation */\n      ) {\n        cmpMeta.$flags$ |= 8\n        /* CMP_FLAGS.needsShadowDomShim */\n        ;\n      }\n\n      const tagName = BUILD.transformTagName && options.transformTagName ? options.transformTagName(cmpMeta.$tagName$) : cmpMeta.$tagName$;\n      const HostElement = class extends HTMLElement {\n        // StencilLazyHost\n        constructor(self) {\n          // @ts-ignore\n          super(self);\n          self = this;\n          registerHost(self, cmpMeta);\n\n          if (BUILD.shadowDom && cmpMeta.$flags$ & 1\n          /* CMP_FLAGS.shadowDomEncapsulation */\n          ) {\n            // this component is using shadow dom\n            // and this browser supports shadow dom\n            // add the read-only property \"shadowRoot\" to the host element\n            // adding the shadow root build conditionals to minimize runtime\n            if (supportsShadow) {\n              if (BUILD.shadowDelegatesFocus) {\n                self.attachShadow({\n                  mode: 'open',\n                  delegatesFocus: !!(cmpMeta.$flags$ & 16\n                  /* CMP_FLAGS.shadowDelegatesFocus */\n                  )\n                });\n              } else {\n                self.attachShadow({\n                  mode: 'open'\n                });\n              }\n            } else if (!BUILD.hydrateServerSide && !('shadowRoot' in self)) {\n              self.shadowRoot = self;\n            }\n          }\n\n          if (BUILD.slotChildNodesFix) {\n            patchChildSlotNodes(self, cmpMeta);\n          }\n        }\n\n        connectedCallback() {\n          if (appLoadFallback) {\n            clearTimeout(appLoadFallback);\n            appLoadFallback = null;\n          }\n\n          if (isBootstrapping) {\n            // connectedCallback will be processed once all components have been registered\n            deferredConnectedCallbacks.push(this);\n          } else {\n            plt.jmp(() => connectedCallback(this));\n          }\n        }\n\n        disconnectedCallback() {\n          plt.jmp(() => disconnectedCallback(this));\n        }\n\n        componentOnReady() {\n          return getHostRef(this).$onReadyPromise$;\n        }\n\n      };\n\n      if (BUILD.cloneNodeFix) {\n        patchCloneNode(HostElement.prototype);\n      }\n\n      if (BUILD.appendChildSlotFix) {\n        patchSlotAppendChild(HostElement.prototype);\n      }\n\n      if (BUILD.hotModuleReplacement) {\n        HostElement.prototype['s-hmr'] = function (hmrVersionId) {\n          hmrStart(this, cmpMeta, hmrVersionId);\n        };\n      }\n\n      if (BUILD.scopedSlotTextContentFix) {\n        patchTextContent(HostElement.prototype, cmpMeta);\n      }\n\n      cmpMeta.$lazyBundleId$ = lazyBundle[0];\n\n      if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n        cmpTags.push(tagName);\n        customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1\n        /* PROXY_FLAGS.isElementConstructor */\n        ));\n      }\n    });\n  });\n\n  if (BUILD.invisiblePrehydration && (BUILD.hydratedClass || BUILD.hydratedAttribute)) {\n    visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n    visibilityStyle.setAttribute('data-styles', '');\n    head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n  } // Process deferred connectedCallbacks now all components have been registered\n\n\n  isBootstrapping = false;\n\n  if (deferredConnectedCallbacks.length) {\n    deferredConnectedCallbacks.map(host => host.connectedCallback());\n  } else {\n    if (BUILD.profile) {\n      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30, 'timeout'));\n    } else {\n      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30));\n    }\n  } // Fallback appLoad event\n\n\n  endBootstrap();\n};\n\nconst getConnect = (_ref, tagName) => {\n  const componentOnReady = () => {\n    let elm = doc.querySelector(tagName);\n\n    if (!elm) {\n      elm = doc.createElement(tagName);\n      doc.body.appendChild(elm);\n    }\n\n    return typeof elm.componentOnReady === 'function' ? elm.componentOnReady() : Promise.resolve(elm);\n  };\n\n  const create = (...args) => {\n    return componentOnReady().then(el => el.create(...args));\n  };\n\n  return {\n    create,\n    componentOnReady\n  };\n};\n\nconst getContext = (_elm, context) => {\n  if (context in Context) {\n    return Context[context];\n  } else if (context === 'window') {\n    return win;\n  } else if (context === 'document') {\n    return doc;\n  } else if (context === 'isServer' || context === 'isPrerender') {\n    return BUILD.hydrateServerSide ? true : false;\n  } else if (context === 'isClient') {\n    return BUILD.hydrateServerSide ? false : true;\n  } else if (context === 'resourcesUrl' || context === 'publicPath') {\n    return getAssetPath('.');\n  } else if (context === 'queue') {\n    return {\n      write: writeTask,\n      read: readTask,\n      tick: {\n        then(cb) {\n          return nextTick(cb);\n        }\n\n      }\n    };\n  }\n\n  return undefined;\n};\n\nconst Fragment = (_, children) => children;\n\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n  if (BUILD.hostListener && listeners) {\n    // this is called immediately within the element's constructor\n    // initialize our event listeners on the host element\n    // we do this now so that we can listen to events that may\n    // have fired even before the instance is ready\n    if (BUILD.hostListenerTargetParent) {\n      // this component may have event listeners that should be attached to the parent\n      if (attachParentListeners) {\n        // this is being ran from within the connectedCallback\n        // which is important so that we know the host element actually has a parent element\n        // filter out the listeners to only have the ones that ARE being attached to the parent\n        listeners = listeners.filter(([flags]) => flags & 32\n        /* LISTENER_FLAGS.TargetParent */\n        );\n      } else {\n        // this is being ran from within the component constructor\n        // everything BUT the parent element listeners should be attached at this time\n        // filter out the listeners that are NOT being attached to the parent\n        listeners = listeners.filter(([flags]) => !(flags & 32\n        /* LISTENER_FLAGS.TargetParent */\n        ));\n      }\n    }\n\n    listeners.map(([flags, name, method]) => {\n      const target = BUILD.hostListenerTarget ? getHostListenerTarget(elm, flags) : elm;\n      const handler = hostListenerProxy(hostRef, method);\n      const opts = hostListenerOpts(flags);\n      plt.ael(target, name, handler, opts);\n      (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n    });\n  }\n};\n\nconst hostListenerProxy = (hostRef, methodName) => ev => {\n  try {\n    if (BUILD.lazyLoad) {\n      if (hostRef.$flags$ & 256\n      /* HOST_FLAGS.isListenReady */\n      ) {\n        // instance is ready, let's call it's member method for this event\n        hostRef.$lazyInstance$[methodName](ev);\n      } else {\n        (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n      }\n    } else {\n      hostRef.$hostElement$[methodName](ev);\n    }\n  } catch (e) {\n    consoleError(e);\n  }\n};\n\nconst getHostListenerTarget = (elm, flags) => {\n  if (BUILD.hostListenerTargetDocument && flags & 4\n  /* LISTENER_FLAGS.TargetDocument */\n  ) return doc;\n  if (BUILD.hostListenerTargetWindow && flags & 8\n  /* LISTENER_FLAGS.TargetWindow */\n  ) return win;\n  if (BUILD.hostListenerTargetBody && flags & 16\n  /* LISTENER_FLAGS.TargetBody */\n  ) return doc.body;\n  if (BUILD.hostListenerTargetParent && flags & 32\n  /* LISTENER_FLAGS.TargetParent */\n  ) return elm.parentElement;\n  return elm;\n}; // prettier-ignore\n\n\nconst hostListenerOpts = flags => supportsListenerOptions ? {\n  passive: (flags & 1\n  /* LISTENER_FLAGS.Passive */\n  ) !== 0,\n  capture: (flags & 2\n  /* LISTENER_FLAGS.Capture */\n  ) !== 0\n} : (flags & 2\n/* LISTENER_FLAGS.Capture */\n) !== 0;\n\nconst setPlatformOptions = opts => Object.assign(plt, opts);\n\nconst insertVdomAnnotations = (doc, staticComponents) => {\n  if (doc != null) {\n    const docData = {\n      hostIds: 0,\n      rootLevelIds: 0,\n      staticComponents: new Set(staticComponents)\n    };\n    const orgLocationNodes = [];\n    parseVNodeAnnotations(doc, doc.body, docData, orgLocationNodes);\n    orgLocationNodes.forEach(orgLocationNode => {\n      if (orgLocationNode != null) {\n        const nodeRef = orgLocationNode['s-nr'];\n        let hostId = nodeRef['s-host-id'];\n        let nodeId = nodeRef['s-node-id'];\n        let childId = `${hostId}.${nodeId}`;\n\n        if (hostId == null) {\n          hostId = 0;\n          docData.rootLevelIds++;\n          nodeId = docData.rootLevelIds;\n          childId = `${hostId}.${nodeId}`;\n\n          if (nodeRef.nodeType === 1\n          /* NODE_TYPE.ElementNode */\n          ) {\n            nodeRef.setAttribute(HYDRATE_CHILD_ID, childId);\n          } else if (nodeRef.nodeType === 3\n          /* NODE_TYPE.TextNode */\n          ) {\n            if (hostId === 0) {\n              const textContent = nodeRef.nodeValue.trim();\n\n              if (textContent === '') {\n                // useless whitespace node at the document root\n                orgLocationNode.remove();\n                return;\n              }\n            }\n\n            const commentBeforeTextNode = doc.createComment(childId);\n            commentBeforeTextNode.nodeValue = `${TEXT_NODE_ID}.${childId}`;\n            nodeRef.parentNode.insertBefore(commentBeforeTextNode, nodeRef);\n          }\n        }\n\n        let orgLocationNodeId = `${ORG_LOCATION_ID}.${childId}`;\n        const orgLocationParentNode = orgLocationNode.parentElement;\n\n        if (orgLocationParentNode) {\n          if (orgLocationParentNode['s-en'] === '') {\n            // ending with a \".\" means that the parent element\n            // of this node's original location is a SHADOW dom element\n            // and this node is apart of the root level light dom\n            orgLocationNodeId += `.`;\n          } else if (orgLocationParentNode['s-en'] === 'c') {\n            // ending with a \".c\" means that the parent element\n            // of this node's original location is a SCOPED element\n            // and this node is apart of the root level light dom\n            orgLocationNodeId += `.c`;\n          }\n        }\n\n        orgLocationNode.nodeValue = orgLocationNodeId;\n      }\n    });\n  }\n};\n\nconst parseVNodeAnnotations = (doc, node, docData, orgLocationNodes) => {\n  if (node == null) {\n    return;\n  }\n\n  if (node['s-nr'] != null) {\n    orgLocationNodes.push(node);\n  }\n\n  if (node.nodeType === 1\n  /* NODE_TYPE.ElementNode */\n  ) {\n    node.childNodes.forEach(childNode => {\n      const hostRef = getHostRef(childNode);\n\n      if (hostRef != null && !docData.staticComponents.has(childNode.nodeName.toLowerCase())) {\n        const cmpData = {\n          nodeIds: 0\n        };\n        insertVNodeAnnotations(doc, childNode, hostRef.$vnode$, docData, cmpData);\n      }\n\n      parseVNodeAnnotations(doc, childNode, docData, orgLocationNodes);\n    });\n  }\n};\n\nconst insertVNodeAnnotations = (doc, hostElm, vnode, docData, cmpData) => {\n  if (vnode != null) {\n    const hostId = ++docData.hostIds;\n    hostElm.setAttribute(HYDRATE_ID, hostId);\n\n    if (hostElm['s-cr'] != null) {\n      hostElm['s-cr'].nodeValue = `${CONTENT_REF_ID}.${hostId}`;\n    }\n\n    if (vnode.$children$ != null) {\n      const depth = 0;\n      vnode.$children$.forEach((vnodeChild, index) => {\n        insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index);\n      });\n    }\n\n    if (hostElm && vnode && vnode.$elm$ && !hostElm.hasAttribute('c-id')) {\n      const parent = hostElm.parentElement;\n\n      if (parent && parent.childNodes) {\n        const parentChildNodes = Array.from(parent.childNodes);\n        const comment = parentChildNodes.find(node => node.nodeType === 8\n        /* NODE_TYPE.CommentNode */\n        && node['s-sr']);\n\n        if (comment) {\n          const index = parentChildNodes.indexOf(hostElm) - 1;\n          vnode.$elm$.setAttribute(HYDRATE_CHILD_ID, `${comment['s-host-id']}.${comment['s-node-id']}.0.${index}`);\n        }\n      }\n    }\n  }\n};\n\nconst insertChildVNodeAnnotations = (doc, vnodeChild, cmpData, hostId, depth, index) => {\n  const childElm = vnodeChild.$elm$;\n\n  if (childElm == null) {\n    return;\n  }\n\n  const nodeId = cmpData.nodeIds++;\n  const childId = `${hostId}.${nodeId}.${depth}.${index}`;\n  childElm['s-host-id'] = hostId;\n  childElm['s-node-id'] = nodeId;\n\n  if (childElm.nodeType === 1\n  /* NODE_TYPE.ElementNode */\n  ) {\n    childElm.setAttribute(HYDRATE_CHILD_ID, childId);\n  } else if (childElm.nodeType === 3\n  /* NODE_TYPE.TextNode */\n  ) {\n    const parentNode = childElm.parentNode;\n    const nodeName = parentNode.nodeName;\n\n    if (nodeName !== 'STYLE' && nodeName !== 'SCRIPT') {\n      const textNodeId = `${TEXT_NODE_ID}.${childId}`;\n      const commentBeforeTextNode = doc.createComment(textNodeId);\n      parentNode.insertBefore(commentBeforeTextNode, childElm);\n    }\n  } else if (childElm.nodeType === 8\n  /* NODE_TYPE.CommentNode */\n  ) {\n    if (childElm['s-sr']) {\n      const slotName = childElm['s-sn'] || '';\n      const slotNodeId = `${SLOT_NODE_ID}.${childId}.${slotName}`;\n      childElm.nodeValue = slotNodeId;\n    }\n  }\n\n  if (vnodeChild.$children$ != null) {\n    const childDepth = depth + 1;\n    vnodeChild.$children$.forEach((vnode, index) => {\n      insertChildVNodeAnnotations(doc, vnode, cmpData, hostId, childDepth, index);\n    });\n  }\n};\n\nconst hostRefs = /*@__PURE__*/new WeakMap();\n\nconst getHostRef = ref => hostRefs.get(ref);\n\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set(hostRef.$lazyInstance$ = lazyInstance, hostRef);\n\nconst registerHost = (elm, cmpMeta) => {\n  const hostRef = {\n    $flags$: 0,\n    $hostElement$: elm,\n    $cmpMeta$: cmpMeta,\n    $instanceValues$: new Map()\n  };\n\n  if (BUILD.isDev) {\n    hostRef.$renderCount$ = 0;\n  }\n\n  if (BUILD.method && BUILD.lazyLoad) {\n    hostRef.$onInstancePromise$ = new Promise(r => hostRef.$onInstanceResolve$ = r);\n  }\n\n  if (BUILD.asyncLoading) {\n    hostRef.$onReadyPromise$ = new Promise(r => hostRef.$onReadyResolve$ = r);\n    elm['s-p'] = [];\n    elm['s-rc'] = [];\n  }\n\n  addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n  return hostRefs.set(elm, hostRef);\n};\n\nconst isMemberInElement = (elm, memberName) => memberName in elm;\n\nconst consoleError = (e, el) => (customError || console.error)(e, el);\n\nconst STENCIL_DEV_MODE = BUILD.isTesting ? ['STENCIL:'] // E2E testing\n: ['%cstencil', 'color: white;background:#4c47ff;font-weight: bold; font-size:10px; padding:2px 6px; border-radius: 5px'];\n\nconst consoleDevError = (...m) => console.error(...STENCIL_DEV_MODE, ...m);\n\nconst consoleDevWarn = (...m) => console.warn(...STENCIL_DEV_MODE, ...m);\n\nconst consoleDevInfo = (...m) => console.info(...STENCIL_DEV_MODE, ...m);\n\nconst setErrorHandler = handler => customError = handler;\n\nconst cmpModules = /*@__PURE__*/new Map();\n\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n  // loadModuleImport\n  const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n  const bundleId = cmpMeta.$lazyBundleId$;\n\n  if (BUILD.isDev && typeof bundleId !== 'string') {\n    consoleDevError(`Trying to lazily load component <${cmpMeta.$tagName$}> with style mode \"${hostRef.$modeName$}\", but it does not exist.`);\n    return undefined;\n  }\n\n  const module = !BUILD.hotModuleReplacement ? cmpModules.get(bundleId) : false;\n\n  if (module) {\n    return module[exportName];\n  }\n  /*!__STENCIL_STATIC_IMPORT_SWITCH__*/\n\n\n  return import(\n  /* @vite-ignore */\n\n  /* webpackInclude: /\\.entry\\.js$/ */\n\n  /* webpackExclude: /\\.system\\.entry\\.js$/ */\n\n  /* webpackMode: \"lazy\" */\n  `./${bundleId}.entry.js${BUILD.hotModuleReplacement && hmrVersionId ? '?s-hmr=' + hmrVersionId : ''}`).then(importedModule => {\n    if (!BUILD.hotModuleReplacement) {\n      cmpModules.set(bundleId, importedModule);\n    }\n\n    return importedModule[exportName];\n  }, consoleError);\n};\n\nconst styles = /*@__PURE__*/new Map();\nconst modeResolutionChain = [];\nconst win = typeof window !== 'undefined' ? window : {};\nconst CSS = BUILD.cssVarShim ? win.CSS : null;\nconst doc = win.document || {\n  head: {}\n};\nconst H = win.HTMLElement || class {};\nconst plt = {\n  $flags$: 0,\n  $resourcesUrl$: '',\n  jmp: h => h(),\n  raf: h => requestAnimationFrame(h),\n  ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n  rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n  ce: (eventName, opts) => new CustomEvent(eventName, opts)\n};\n\nconst setPlatformHelpers = helpers => {\n  Object.assign(plt, helpers);\n};\n\nconst supportsShadow = BUILD.shadowDomShim && BUILD.shadowDom ? /*@__PURE__*/(() => (doc.head.attachShadow + '').indexOf('[native') > -1)() : true;\n\nconst supportsListenerOptions = /*@__PURE__*/(() => {\n  let supportsListenerOptions = false;\n\n  try {\n    doc.addEventListener('e', null, Object.defineProperty({}, 'passive', {\n      get() {\n        supportsListenerOptions = true;\n      }\n\n    }));\n  } catch (e) {}\n\n  return supportsListenerOptions;\n})();\n\nconst promiseResolve = v => Promise.resolve(v);\n\nconst supportsConstructableStylesheets = BUILD.constructableCSS ? /*@__PURE__*/(() => {\n  try {\n    new CSSStyleSheet();\n    return typeof new CSSStyleSheet().replaceSync === 'function';\n  } catch (e) {}\n\n  return false;\n})() : false;\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueDomWritesLow = [];\n\nconst queueTask = (queue, write) => cb => {\n  queue.push(cb);\n\n  if (!queuePending) {\n    queuePending = true;\n\n    if (write && plt.$flags$ & 4\n    /* PLATFORM_FLAGS.queueSync */\n    ) {\n      nextTick(flush);\n    } else {\n      plt.raf(flush);\n    }\n  }\n};\n\nconst consume = queue => {\n  for (let i = 0; i < queue.length; i++) {\n    try {\n      queue[i](performance.now());\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  queue.length = 0;\n};\n\nconst consumeTimeout = (queue, timeout) => {\n  let i = 0;\n  let ts = 0;\n\n  while (i < queue.length && (ts = performance.now()) < timeout) {\n    try {\n      queue[i++](ts);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  if (i === queue.length) {\n    queue.length = 0;\n  } else if (i !== 0) {\n    queue.splice(0, i);\n  }\n};\n\nconst flush = () => {\n  if (BUILD.asyncQueue) {\n    queueCongestion++;\n  } // always force a bunch of medium callbacks to run, but still have\n  // a throttle on how many can run in a certain time\n  // DOM READS!!!\n\n\n  consume(queueDomReads); // DOM WRITES!!!\n\n  if (BUILD.asyncQueue) {\n    const timeout = (plt.$flags$ & 6\n    /* PLATFORM_FLAGS.queueMask */\n    ) === 2\n    /* PLATFORM_FLAGS.appLoaded */\n    ? performance.now() + 14 * Math.ceil(queueCongestion * (1.0 / 10.0)) : Infinity;\n    consumeTimeout(queueDomWrites, timeout);\n    consumeTimeout(queueDomWritesLow, timeout);\n\n    if (queueDomWrites.length > 0) {\n      queueDomWritesLow.push(...queueDomWrites);\n      queueDomWrites.length = 0;\n    }\n\n    if (queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0) {\n      // still more to do yet, but we've run out of time\n      // let's let this thing cool off and try again in the next tick\n      plt.raf(flush);\n    } else {\n      queueCongestion = 0;\n    }\n  } else {\n    consume(queueDomWrites);\n\n    if (queuePending = queueDomReads.length > 0) {\n      // still more to do yet, but we've run out of time\n      // let's let this thing cool off and try again in the next tick\n      plt.raf(flush);\n    }\n  }\n};\n\nconst nextTick = /*@__PURE__*/cb => promiseResolve().then(cb);\n\nconst readTask = /*@__PURE__*/queueTask(queueDomReads, false);\nconst writeTask = /*@__PURE__*/queueTask(queueDomWrites, true);\nexport { BUILD, Env, NAMESPACE } from '@stencil/core/internal/app-data';\nexport { Build, CSS, Context, Fragment, H, H as HTMLElement, Host, STENCIL_DEV_MODE, addHostEventListeners, bootstrapLazy, cmpModules, connectedCallback, consoleDevError, consoleDevInfo, consoleDevWarn, consoleError, createEvent, defineCustomElement, disconnectedCallback, doc, forceModeUpdate, forceUpdate, getAssetPath, getConnect, getContext, getElement, getHostRef, getMode, getRenderingRef, getValue, h, insertVdomAnnotations, isMemberInElement, loadModule, modeResolutionChain, nextTick, parsePropertyValue, plt, postUpdateComponent, promiseResolve, proxyComponent, proxyCustomElement, readTask, registerHost, registerInstance, renderVdom, setAssetPath, setErrorHandler, setMode, setPlatformHelpers, setPlatformOptions, setValue, styles, supportsConstructableStylesheets, supportsListenerOptions, supportsShadow, win, writeTask };","map":{"version":3,"names":["scopeId","contentRef","hostTagName","customError","i","useNativeShadowDom","checkSlotFallbackVisibility","checkSlotRelocate","isSvgMode","renderingRef","queueCongestion","queuePending","BUILD","NAMESPACE","Build","isDev","isBrowser","isServer","isTesting","Context","getAssetPath","path","assetUrl","URL","plt","$resourcesUrl$","origin","win","location","href","pathname","setAssetPath","createTime","fnName","tagName","profile","performance","mark","key","measure","uniqueTime","measureText","getEntriesByName","length","inspect","ref","hostRef","getHostRef","undefined","flags","$flags$","hostElement","$hostElement$","renderCount","$renderCount$","hasRendered","hasConnected","isWaitingForChildren","isConstructingInstance","isQueuedForUpdate","hasInitializedComponent","hasLoadedComponent","isWatchReady","isListenReady","needsRerender","instanceValues","$instanceValues$","ancestorComponent","$ancestorComponent$","lazyInstance","$lazyInstance$","vnode","$vnode$","modeName","$modeName$","onReadyPromise","$onReadyPromise$","onReadyResolve","$onReadyResolve$","onInstancePromise","$onInstancePromise$","onInstanceResolve","$onInstanceResolve$","onRenderResolve","$onRenderResolve$","queuedListeners","$queuedListeners$","rmListeners","$rmListeners$","installDevTools","devTools","stencil","originalInspect","result","CONTENT_REF_ID","ORG_LOCATION_ID","SLOT_NODE_ID","TEXT_NODE_ID","HYDRATE_ID","HYDRATED_STYLE_ID","HYDRATE_CHILD_ID","HYDRATED_CSS","XLINK_NS","EMPTY_OBJ","SVG_NS","HTML_NS","isDef","v","isComplexType","o","h","nodeName","vnodeData","children","child","slotName","simple","lastSimple","vNodeChildren","walk","c","Array","isArray","String","consoleDevError","$text$","push","newVNode","validateInputProperties","vdomKey","slotRelocation","name","vdomClass","classData","className","class","Object","keys","filter","k","join","some","isHost","vdomFunctional","vdomFnUtils","$attrs$","$children$","$key$","$name$","tag","text","$tag$","$elm$","vdomAttribute","Host","node","forEach","cb","map","convertToPublic","convertToPrivate","vattrs","vchildren","vkey","vname","vtag","vtext","assign","inputElm","props","value","indexOf","typeIndex","minIndex","maxIndex","stepIndex","consoleDevWarn","initializeClientHydrate","hostElm","hostId","endHydrate","shadowRoot","childRenderNodes","slotNodes","shadowRootNodes","shadowDom","$orgLocNodes$","initializeDocumentHydrate","doc","body","Map","removeAttribute","clientHydrate","orgLocationId","$hostId$","$nodeId$","orgLocationNode","get","supportsShadow","parentNode","insertBefore","nextSibling","delete","shadowRootNode","appendChild","parentVNode","childNodeType","childIdSplt","childVNode","nodeType","getAttribute","split","$depth$","$index$","toLowerCase","childNodes","nodeValue","textContent","remove","createElement","setAttribute","orgLocNodes","set","computeMode","elm","modeResolutionChain","find","m","setMode","handler","getMode","parsePropertyValue","propValue","propType","propBoolean","propNumber","parseFloat","propString","getElement","lazyLoad","createEvent","emit","detail","isConnected","emitEvent","bubbles","composed","cancelable","opts","ev","ce","dispatchEvent","rootAppliedStyles","WeakMap","registerStyle","cssText","allowCS","style","styles","supportsConstructableStylesheets","CSSStyleSheet","replaceSync","addStyle","styleContainerNode","cmpMeta","mode","getScopeId","attachStyles","head","appliedStyles","styleElm","Set","has","hydrateClientSide","host","querySelector","innerHTML","cssVarShim","$cssShim$","createHostStyle","newScopeId","hydrateServerSide","hotModuleReplacement","add","constructableCSS","adoptedStyleSheets","includes","$cmpMeta$","endAttachStyles","$tagName$","getRootNode","scoped","cssAnnotations","classList","cmp","convertScopedToShadow","css","replace","setAccessor","memberName","oldValue","newValue","isSvg","isProp","isMemberInElement","ln","oldClasses","parseClassList","newClasses","vdomStyle","updatable","prop","removeProperty","setProperty","vdomRef","vdomListener","__lookupSetter__","slice","rel","ael","vdomPropOrAttr","isComplex","n","e","xlink","vdomXlink","removeAttributeNS","setAttributeNS","parseClassListRegex","updateElement","oldVnode","newVnode","oldVnodeAttrs","newVnodeAttrs","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","oldVNode","vdomText","createTextNode","isDebug","slotReferenceDebugNode","svg","createElementNS","putBackInOriginalLocation","recursive","oldSlotChildNodes","parentReferenceNode","referenceNode","addVnodes","before","vnodes","startIdx","endIdx","containerElm","removeVnodes","callNodeRefs","updateChildren","oldCh","newCh","oldStartIdx","newStartIdx","idxInOld","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","elmToMove","isSameVnode","patch","leftVNode","rightVNode","oldChildren","newChildren","defaultHolder","reflect","slot","data","updateFallbackSlotVisibility","ilen","j","slotNameAttr","hidden","trim","relocateNodes","relocateSlotContent","hostContentNodes","relocateNodeData","isNodeLocatedInSlot","r","$nodeToRelocate$","$slotRefNode$","relocateNode","nodeToRelocate","vNode","renderVdom","renderFnResults","rootVnode","Error","$attrsToReflect$","propName","attribute","relocateData","parentNodeRef","insertBeforeNode","refNode","originalLocationDebugNode","previousSibling","slotVNode","createComment","localName","attachToAncestor","asyncLoading","Promise","scheduleUpdate","isInitialLoad","taskQueue","dispatch","dispatchHooks","writeTask","endSchedule","instance","promise","hostListener","methodName","event","safeCall","emitLifecycleEvent","cmpWillLoad","cmpWillUpdate","cmpWillRender","then","updateComponent","endUpdate","rc","endRender","callRender","updateHost","serverSideConnected","consoleError","childrenPromises","postUpdate","postUpdateComponent","all","allRenderFn","render","hasRenderFn","vdomRender","resolve","getRenderingRef","endPostUpdate","cmpDidRender","addHydratedFlag","cmpDidLoad","appDidLoad","cmpDidUpdate","method","nextTick","forceUpdate","who","documentElement","asyncQueue","namespace","arg","thenFn","lifecycleName","lifecycleDOMEvents","hydratedClass","hydratedAttribute","ii","childElm","connectedCallback","getValue","setValue","newVal","oldVal","$members$","areBothNaN","Number","isNaN","didValueChange","watchCallback","$watchers$","watchMethods","watchMethodName","cmpShouldUpdate","componentShouldUpdate","proxyComponent","Cstr","member","watchers","members","entries","prototype","memberFlags","state","defineProperty","configurable","enumerable","args","observeAttribute","attrNameToPropName","attributeChangedCallback","attrName","_oldValue","jmp","hasOwnProperty","observedAttributes","_","initializeComponent","hmrVersionId","loadModule","endLoad","isProxied","endNewInstance","fireConnectedCallback","constructor","customElements","whenDefined","endRegisterStyles","shadowDomShim","scopeCss","schedule","endConnected","hostListenerTargetParent","addHostEventListeners","$listeners$","setContentReference","hasAttribute","initializeNextTick","contentRefElm","firstChild","disconnectedCallback","rmListener","removeHost","cmpDidUnload","defineCustomElement","compactMeta","define","proxyCustomElement","originalConnectedCallback","originalDisconnectedCallback","__registerHost","registerHost","call","__attachShadow","shadowDelegatesFocus","attachShadow","delegatesFocus","is","forceModeUpdate","oldScopeId","patchCloneNode","HostElementPrototype","orgCloneNode","cloneNode","deep","srcNode","isShadowDom","clonedNode","slotted","nonStencilNode","stencilPrivates","every","privateField","appendChildSlotFix","__appendChild","patchSlotAppendChild","newChild","getSlotName","slotNode","getHostSlotNode","slotChildNodes","getHostSlotChildNodes","appendAfter","patchTextContent","hostElementPrototype","descriptor","getOwnPropertyDescriptor","Node","_a","__textContent","patchChildSlotNodes","FakeNodeList","item","childNodesFn","__lookupGetter__","from","hmrStart","bootstrapLazy","lazyBundles","options","endBootstrap","cmpTags","exclude","metaCharset","visibilityStyle","deferredConnectedCallbacks","querySelectorAll","appLoadFallback","isBootstrapping","resourcesUrl","baseURI","syncQueue","lazyBundle","transformTagName","HostElement","HTMLElement","self","slotChildNodesFix","clearTimeout","componentOnReady","cloneNodeFix","scopedSlotTextContentFix","$lazyBundleId$","invisiblePrehydration","setTimeout","getConnect","_ref","create","el","getContext","_elm","context","write","read","readTask","tick","Fragment","listeners","attachParentListeners","target","hostListenerTarget","getHostListenerTarget","hostListenerProxy","hostListenerOpts","hostListenerTargetDocument","hostListenerTargetWindow","hostListenerTargetBody","parentElement","supportsListenerOptions","passive","capture","setPlatformOptions","insertVdomAnnotations","staticComponents","docData","hostIds","rootLevelIds","orgLocationNodes","parseVNodeAnnotations","nodeRef","nodeId","childId","commentBeforeTextNode","orgLocationNodeId","orgLocationParentNode","cmpData","nodeIds","insertVNodeAnnotations","depth","vnodeChild","index","insertChildVNodeAnnotations","parent","parentChildNodes","comment","textNodeId","slotNodeId","childDepth","hostRefs","registerInstance","console","error","STENCIL_DEV_MODE","warn","consoleDevInfo","info","setErrorHandler","cmpModules","exportName","bundleId","module","importedModule","window","CSS","document","H","raf","requestAnimationFrame","eventName","listener","addEventListener","removeEventListener","CustomEvent","setPlatformHelpers","helpers","promiseResolve","queueDomReads","queueDomWrites","queueDomWritesLow","queueTask","queue","flush","consume","now","consumeTimeout","timeout","ts","splice","Math","ceil","Infinity","Env"],"sources":["E:/各个学科/论文/毕业论文/Atmosphere/eco-friendly/node_modules/@stencil/core/internal/client/index.js"],"sourcesContent":["/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/snabbdom/snabbdom/blob/master/LICENSE\n *\n * Modified for Stencil's renderer and slot projection\n */\nlet scopeId;\nlet contentRef;\nlet hostTagName;\nlet customError;\nlet i = 0;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet renderingRef = null;\nlet queueCongestion = 0;\nlet queuePending = false;\n/*\n Stencil Client Platform v2.18.1 | MIT Licensed | https://stenciljs.com\n */\nimport { BUILD, NAMESPACE } from '@stencil/core/internal/app-data';\nconst Build = {\n    isDev: BUILD.isDev ? true : false,\n    isBrowser: true,\n    isServer: false,\n    isTesting: BUILD.isTesting ? true : false,\n};\nconst Context = {};\nconst getAssetPath = (path) => {\n    const assetUrl = new URL(path, plt.$resourcesUrl$);\n    return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\nconst setAssetPath = (path) => (plt.$resourcesUrl$ = path);\nconst createTime = (fnName, tagName = '') => {\n    if (BUILD.profile && performance.mark) {\n        const key = `st:${fnName}:${tagName}:${i++}`;\n        // Start\n        performance.mark(key);\n        // End\n        return () => performance.measure(`[Stencil] ${fnName}() <${tagName}>`, key);\n    }\n    else {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    if (BUILD.profile && performance.mark) {\n        if (performance.getEntriesByName(key).length === 0) {\n            performance.mark(key);\n        }\n        return () => {\n            if (performance.getEntriesByName(measureText).length === 0) {\n                performance.measure(measureText, key);\n            }\n        };\n    }\n    else {\n        return () => {\n            return;\n        };\n    }\n};\nconst inspect = (ref) => {\n    const hostRef = getHostRef(ref);\n    if (!hostRef) {\n        return undefined;\n    }\n    const flags = hostRef.$flags$;\n    const hostElement = hostRef.$hostElement$;\n    return {\n        renderCount: hostRef.$renderCount$,\n        flags: {\n            hasRendered: !!(flags & 2 /* HOST_FLAGS.hasRendered */),\n            hasConnected: !!(flags & 1 /* HOST_FLAGS.hasConnected */),\n            isWaitingForChildren: !!(flags & 4 /* HOST_FLAGS.isWaitingForChildren */),\n            isConstructingInstance: !!(flags & 8 /* HOST_FLAGS.isConstructingInstance */),\n            isQueuedForUpdate: !!(flags & 16 /* HOST_FLAGS.isQueuedForUpdate */),\n            hasInitializedComponent: !!(flags & 32 /* HOST_FLAGS.hasInitializedComponent */),\n            hasLoadedComponent: !!(flags & 64 /* HOST_FLAGS.hasLoadedComponent */),\n            isWatchReady: !!(flags & 128 /* HOST_FLAGS.isWatchReady */),\n            isListenReady: !!(flags & 256 /* HOST_FLAGS.isListenReady */),\n            needsRerender: !!(flags & 512 /* HOST_FLAGS.needsRerender */),\n        },\n        instanceValues: hostRef.$instanceValues$,\n        ancestorComponent: hostRef.$ancestorComponent$,\n        hostElement,\n        lazyInstance: hostRef.$lazyInstance$,\n        vnode: hostRef.$vnode$,\n        modeName: hostRef.$modeName$,\n        onReadyPromise: hostRef.$onReadyPromise$,\n        onReadyResolve: hostRef.$onReadyResolve$,\n        onInstancePromise: hostRef.$onInstancePromise$,\n        onInstanceResolve: hostRef.$onInstanceResolve$,\n        onRenderResolve: hostRef.$onRenderResolve$,\n        queuedListeners: hostRef.$queuedListeners$,\n        rmListeners: hostRef.$rmListeners$,\n        ['s-id']: hostElement['s-id'],\n        ['s-cr']: hostElement['s-cr'],\n        ['s-lr']: hostElement['s-lr'],\n        ['s-p']: hostElement['s-p'],\n        ['s-rc']: hostElement['s-rc'],\n        ['s-sc']: hostElement['s-sc'],\n    };\n};\nconst installDevTools = () => {\n    if (BUILD.devTools) {\n        const stencil = (win.stencil = win.stencil || {});\n        const originalInspect = stencil.inspect;\n        stencil.inspect = (ref) => {\n            let result = inspect(ref);\n            if (!result && typeof originalInspect === 'function') {\n                result = originalInspect(ref);\n            }\n            return result;\n        };\n    }\n};\nconst CONTENT_REF_ID = 'r';\nconst ORG_LOCATION_ID = 'o';\nconst SLOT_NODE_ID = 's';\nconst TEXT_NODE_ID = 't';\nconst HYDRATE_ID = 's-id';\nconst HYDRATED_STYLE_ID = 'sty-id';\nconst HYDRATE_CHILD_ID = 'c-id';\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst XLINK_NS = 'http://www.w3.org/1999/xlink';\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\nconst isDef = (v) => v != null;\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let key = null;\n    let slotName = null;\n    let simple = false;\n    let lastSimple = false;\n    const vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                else if (BUILD.isDev && typeof nodeName !== 'function' && child.$flags$ === undefined) {\n                    consoleDevError(`vNode passed as children has unexpected type.\nMake sure it's using the correct h() function.\nEmpty objects can also be the cause, look for JSX comments that became objects.`);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        if (BUILD.isDev && nodeName === 'input') {\n            validateInputProperties(vnodeData);\n        }\n        // normalize class / classname attributes\n        if (BUILD.vdomKey && vnodeData.key) {\n            key = vnodeData.key;\n        }\n        if (BUILD.slotRelocation && vnodeData.name) {\n            slotName = vnodeData.name;\n        }\n        if (BUILD.vdomClass) {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    if (BUILD.isDev && vNodeChildren.some(isHost)) {\n        consoleDevError(`The <Host> must be the single root component. Make sure:\n- You are NOT using hostData() and <Host> in the same component.\n- <Host> is used once, and it's the single root component of the render() function.`);\n    }\n    if (BUILD.vdomFunctional && typeof nodeName === 'function') {\n        // nodeName is a functional component\n        return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    if (BUILD.vdomKey) {\n        vnode.$key$ = key;\n    }\n    if (BUILD.slotRelocation) {\n        vnode.$name$ = slotName;\n    }\n    return vnode;\n};\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    if (BUILD.vdomAttribute) {\n        vnode.$attrs$ = null;\n    }\n    if (BUILD.vdomKey) {\n        vnode.$key$ = null;\n    }\n    if (BUILD.slotRelocation) {\n        vnode.$name$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\nconst isHost = (node) => node && node.$tag$ === Host;\nconst vdomFnUtils = {\n    forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\n    map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate),\n};\nconst convertToPublic = (node) => ({\n    vattrs: node.$attrs$,\n    vchildren: node.$children$,\n    vkey: node.$key$,\n    vname: node.$name$,\n    vtag: node.$tag$,\n    vtext: node.$text$,\n});\nconst convertToPrivate = (node) => {\n    if (typeof node.vtag === 'function') {\n        const vnodeData = Object.assign({}, node.vattrs);\n        if (node.vkey) {\n            vnodeData.key = node.vkey;\n        }\n        if (node.vname) {\n            vnodeData.name = node.vname;\n        }\n        return h(node.vtag, vnodeData, ...(node.vchildren || []));\n    }\n    const vnode = newVNode(node.vtag, node.vtext);\n    vnode.$attrs$ = node.vattrs;\n    vnode.$children$ = node.vchildren;\n    vnode.$key$ = node.vkey;\n    vnode.$name$ = node.vname;\n    return vnode;\n};\n/**\n * Validates the ordering of attributes on an input element\n * @param inputElm the element to validate\n */\nconst validateInputProperties = (inputElm) => {\n    const props = Object.keys(inputElm);\n    const value = props.indexOf('value');\n    if (value === -1) {\n        return;\n    }\n    const typeIndex = props.indexOf('type');\n    const minIndex = props.indexOf('min');\n    const maxIndex = props.indexOf('max');\n    const stepIndex = props.indexOf('step');\n    if (value < typeIndex || value < minIndex || value < maxIndex || value < stepIndex) {\n        consoleDevWarn(`The \"value\" prop of <input> should be set after \"min\", \"max\", \"type\" and \"step\"`);\n    }\n};\nconst initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {\n    const endHydrate = createTime('hydrateClient', tagName);\n    const shadowRoot = hostElm.shadowRoot;\n    const childRenderNodes = [];\n    const slotNodes = [];\n    const shadowRootNodes = BUILD.shadowDom && shadowRoot ? [] : null;\n    const vnode = (hostRef.$vnode$ = newVNode(tagName, null));\n    if (!plt.$orgLocNodes$) {\n        initializeDocumentHydrate(doc.body, (plt.$orgLocNodes$ = new Map()));\n    }\n    hostElm[HYDRATE_ID] = hostId;\n    hostElm.removeAttribute(HYDRATE_ID);\n    clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);\n    childRenderNodes.map((c) => {\n        const orgLocationId = c.$hostId$ + '.' + c.$nodeId$;\n        const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);\n        const node = c.$elm$;\n        if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {\n            orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);\n        }\n        if (!shadowRoot) {\n            node['s-hn'] = tagName;\n            if (orgLocationNode) {\n                node['s-ol'] = orgLocationNode;\n                node['s-ol']['s-nr'] = node;\n            }\n        }\n        plt.$orgLocNodes$.delete(orgLocationId);\n    });\n    if (BUILD.shadowDom && shadowRoot) {\n        shadowRootNodes.map((shadowRootNode) => {\n            if (shadowRootNode) {\n                shadowRoot.appendChild(shadowRootNode);\n            }\n        });\n    }\n    endHydrate();\n};\nconst clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) => {\n    let childNodeType;\n    let childIdSplt;\n    let childVNode;\n    let i;\n    if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        childNodeType = node.getAttribute(HYDRATE_CHILD_ID);\n        if (childNodeType) {\n            // got the node data from the element's attribute\n            // `${hostId}.${nodeId}.${depth}.${index}`\n            childIdSplt = childNodeType.split('.');\n            if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {\n                childVNode = {\n                    $flags$: 0,\n                    $hostId$: childIdSplt[0],\n                    $nodeId$: childIdSplt[1],\n                    $depth$: childIdSplt[2],\n                    $index$: childIdSplt[3],\n                    $tag$: node.tagName.toLowerCase(),\n                    $elm$: node,\n                    $attrs$: null,\n                    $children$: null,\n                    $key$: null,\n                    $name$: null,\n                    $text$: null,\n                };\n                childRenderNodes.push(childVNode);\n                node.removeAttribute(HYDRATE_CHILD_ID);\n                // this is a new child vnode\n                // so ensure its parent vnode has the vchildren array\n                if (!parentVNode.$children$) {\n                    parentVNode.$children$ = [];\n                }\n                // add our child vnode to a specific index of the vnode's children\n                parentVNode.$children$[childVNode.$index$] = childVNode;\n                // this is now the new parent vnode for all the next child checks\n                parentVNode = childVNode;\n                if (shadowRootNodes && childVNode.$depth$ === '0') {\n                    shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                }\n            }\n        }\n        // recursively drill down, end to start so we can remove nodes\n        for (i = node.childNodes.length - 1; i >= 0; i--) {\n            clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);\n        }\n        if (node.shadowRoot) {\n            // keep drilling down through the shadow root nodes\n            for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {\n                clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);\n            }\n        }\n    }\n    else if (node.nodeType === 8 /* NODE_TYPE.CommentNode */) {\n        // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`\n        childIdSplt = node.nodeValue.split('.');\n        if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {\n            // comment node for either the host id or a 0 host id\n            childNodeType = childIdSplt[0];\n            childVNode = {\n                $flags$: 0,\n                $hostId$: childIdSplt[1],\n                $nodeId$: childIdSplt[2],\n                $depth$: childIdSplt[3],\n                $index$: childIdSplt[4],\n                $elm$: node,\n                $attrs$: null,\n                $children$: null,\n                $key$: null,\n                $name$: null,\n                $tag$: null,\n                $text$: null,\n            };\n            if (childNodeType === TEXT_NODE_ID) {\n                childVNode.$elm$ = node.nextSibling;\n                if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3 /* NODE_TYPE.TextNode */) {\n                    childVNode.$text$ = childVNode.$elm$.textContent;\n                    childRenderNodes.push(childVNode);\n                    // remove the text comment since it's no longer needed\n                    node.remove();\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                    if (shadowRootNodes && childVNode.$depth$ === '0') {\n                        shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                    }\n                }\n            }\n            else if (childVNode.$hostId$ === hostId) {\n                // this comment node is specifcally for this host id\n                if (childNodeType === SLOT_NODE_ID) {\n                    // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;\n                    childVNode.$tag$ = 'slot';\n                    if (childIdSplt[5]) {\n                        node['s-sn'] = childVNode.$name$ = childIdSplt[5];\n                    }\n                    else {\n                        node['s-sn'] = '';\n                    }\n                    node['s-sr'] = true;\n                    if (BUILD.shadowDom && shadowRootNodes) {\n                        // browser support shadowRoot and this is a shadow dom component\n                        // create an actual slot element\n                        childVNode.$elm$ = doc.createElement(childVNode.$tag$);\n                        if (childVNode.$name$) {\n                            // add the slot name attribute\n                            childVNode.$elm$.setAttribute('name', childVNode.$name$);\n                        }\n                        // insert the new slot element before the slot comment\n                        node.parentNode.insertBefore(childVNode.$elm$, node);\n                        // remove the slot comment since it's not needed for shadow\n                        node.remove();\n                        if (childVNode.$depth$ === '0') {\n                            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                        }\n                    }\n                    slotNodes.push(childVNode);\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                }\n                else if (childNodeType === CONTENT_REF_ID) {\n                    // `${CONTENT_REF_ID}.${hostId}`;\n                    if (BUILD.shadowDom && shadowRootNodes) {\n                        // remove the content ref comment since it's not needed for shadow\n                        node.remove();\n                    }\n                    else if (BUILD.slotRelocation) {\n                        hostElm['s-cr'] = node;\n                        node['s-cn'] = true;\n                    }\n                }\n            }\n        }\n    }\n    else if (parentVNode && parentVNode.$tag$ === 'style') {\n        const vnode = newVNode(null, node.textContent);\n        vnode.$elm$ = node;\n        vnode.$index$ = '0';\n        parentVNode.$children$ = [vnode];\n    }\n};\nconst initializeDocumentHydrate = (node, orgLocNodes) => {\n    if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        let i = 0;\n        for (; i < node.childNodes.length; i++) {\n            initializeDocumentHydrate(node.childNodes[i], orgLocNodes);\n        }\n        if (node.shadowRoot) {\n            for (i = 0; i < node.shadowRoot.childNodes.length; i++) {\n                initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);\n            }\n        }\n    }\n    else if (node.nodeType === 8 /* NODE_TYPE.CommentNode */) {\n        const childIdSplt = node.nodeValue.split('.');\n        if (childIdSplt[0] === ORG_LOCATION_ID) {\n            orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);\n            node.nodeValue = '';\n            // useful to know if the original location is\n            // the root light-dom of a shadow dom component\n            node['s-en'] = childIdSplt[3];\n        }\n    }\n};\n// Private\nconst computeMode = (elm) => modeResolutionChain.map((h) => h(elm)).find((m) => !!m);\n// Public\nconst setMode = (handler) => modeResolutionChain.push(handler);\nconst getMode = (ref) => getHostRef(ref).$modeName$;\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (BUILD.propBoolean && propType & 4 /* MEMBER_FLAGS.Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\n        }\n        if (BUILD.propNumber && propType & 2 /* MEMBER_FLAGS.Number */) {\n            // force it to be a number\n            return parseFloat(propValue);\n        }\n        if (BUILD.propString && propType & 1 /* MEMBER_FLAGS.String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getElement = (ref) => (BUILD.lazyLoad ? getHostRef(ref).$hostElement$ : ref);\nconst createEvent = (ref, name, flags) => {\n    const elm = getElement(ref);\n    return {\n        emit: (detail) => {\n            if (BUILD.isDev && !elm.isConnected) {\n                consoleDevWarn(`The \"${name}\" event was emitted, but the dispatcher node is no longer connected to the dom.`);\n            }\n            return emitEvent(elm, name, {\n                bubbles: !!(flags & 4 /* EVENT_FLAGS.Bubbles */),\n                composed: !!(flags & 2 /* EVENT_FLAGS.Composed */),\n                cancelable: !!(flags & 1 /* EVENT_FLAGS.Cancellable */),\n                detail,\n            });\n        },\n    };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst rootAppliedStyles = /*@__PURE__*/ new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructableStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        if (typeof style === 'string') {\n            style = cssText;\n        }\n        else {\n            style.replaceSync(cssText);\n        }\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    let scopeId = getScopeId(cmpMeta, mode);\n    const style = styles.get(scopeId);\n    if (!BUILD.attachStyles) {\n        return scopeId;\n    }\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* NODE_TYPE.DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                if (BUILD.hydrateClientSide &&\n                    styleContainerNode.host &&\n                    (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}=\"${scopeId}\"]`))) {\n                    // This is only happening on native shadow-dom, do not needs CSS var shim\n                    styleElm.innerHTML = style;\n                }\n                else {\n                    if (BUILD.cssVarShim && plt.$cssShim$) {\n                        styleElm = plt.$cssShim$.createHostStyle(hostElm, scopeId, style, !!(cmpMeta.$flags$ & 10 /* CMP_FLAGS.needsScopedEncapsulation */));\n                        const newScopeId = styleElm['s-sc'];\n                        if (newScopeId) {\n                            scopeId = newScopeId;\n                            // we don't want to add this styleID to the appliedStyles Set\n                            // since the cssVarShim might need to apply several different\n                            // stylesheets for the same component\n                            appliedStyles = null;\n                        }\n                    }\n                    else {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    if (BUILD.hydrateServerSide || BUILD.hotModuleReplacement) {\n                        styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId);\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (BUILD.constructableCSS && !styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(BUILD.shadowDom && supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$, elm);\n    if ((BUILD.shadowDom || BUILD.scoped) && BUILD.cssAnnotations && flags & 10 /* CMP_FLAGS.needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n        if (BUILD.scoped && flags & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\n            elm.classList.add(scopeId + '-s');\n        }\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (BUILD.mode && mode && cmp.$flags$ & 32 /* CMP_FLAGS.hasMode */ ? cmp.$tagName$ + '-' + mode : cmp.$tagName$);\nconst convertScopedToShadow = (css) => css.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g, '$1{');\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (BUILD.vdomClass && memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else if (BUILD.vdomStyle && memberName === 'style') {\n            // update style attribute, css properties and values\n            if (BUILD.updatable) {\n                for (const prop in oldValue) {\n                    if (!newValue || newValue[prop] == null) {\n                        if (!BUILD.hydrateServerSide && prop.includes('-')) {\n                            elm.style.removeProperty(prop);\n                        }\n                        else {\n                            elm.style[prop] = '';\n                        }\n                    }\n                }\n            }\n            for (const prop in newValue) {\n                if (!oldValue || newValue[prop] !== oldValue[prop]) {\n                    if (!BUILD.hydrateServerSide && prop.includes('-')) {\n                        elm.style.setProperty(prop, newValue[prop]);\n                    }\n                    else {\n                        elm.style[prop] = newValue[prop];\n                    }\n                }\n            }\n        }\n        else if (BUILD.vdomKey && memberName === 'key')\n            ;\n        else if (BUILD.vdomRef && memberName === 'ref') {\n            // minifier will clean this up\n            if (newValue) {\n                newValue(elm);\n            }\n        }\n        else if (BUILD.vdomListener &&\n            (BUILD.lazyLoad ? !isProp : !elm.__lookupSetter__(memberName)) &&\n            memberName[0] === 'o' &&\n            memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        }\n        else if (BUILD.vdomPropOrAttr) {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        const n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            /**\n             * Need to manually update attribute if:\n             * - memberName is not an attribute\n             * - if we are rendering the host element in order to reflect attribute\n             * - if it's a SVG, since properties might not work in <svg>\n             * - if the newValue is null/undefined or 'false'.\n             */\n            let xlink = false;\n            if (BUILD.vdomXlink) {\n                if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n                    memberName = ln;\n                    xlink = true;\n                }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    if (BUILD.vdomXlink && xlink) {\n                        elm.removeAttributeNS(XLINK_NS, memberName);\n                    }\n                    else {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* VNODE_FLAGS.isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                if (BUILD.vdomXlink && xlink) {\n                    elm.setAttributeNS(XLINK_NS, memberName, newValue);\n                }\n                else {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* NODE_TYPE.DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    if (BUILD.updatable) {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\n/**\n * Create a DOM Node corresponding to one of the children of a given VNode.\n *\n * @param oldParentVNode the parent VNode from the previous render\n * @param newParentVNode the parent VNode from the current render\n * @param childIndex the index of the VNode, in the _new_ parent node's\n * children, for which we will create a new DOM node\n * @param parentElm the parent DOM node which our new node will be a child of\n * @returns the newly created node\n */\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    const newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    let oldVNode;\n    if (BUILD.slotRelocation && !useNativeShadowDom) {\n        // remember for later we need to check to relocate nodes\n        checkSlotRelocate = true;\n        if (newVNode.$tag$ === 'slot') {\n            if (scopeId) {\n                // scoped css needs to add its scoped id to the parent element\n                parentElm.classList.add(scopeId + '-s');\n            }\n            newVNode.$flags$ |= newVNode.$children$\n                ? // slot element has fallback content\n                    2 /* VNODE_FLAGS.isSlotFallback */\n                : // slot element does not have fallback content\n                    1 /* VNODE_FLAGS.isSlotReference */;\n        }\n    }\n    if (BUILD.isDev && newVNode.$elm$) {\n        consoleDevError(`The JSX ${newVNode.$text$ !== null ? `\"${newVNode.$text$}\" text` : `\"${newVNode.$tag$}\" element`} node should not be shared within the same renderer. The renderer caches element lookups in order to improve performance. However, a side effect from this is that the exact same JSX node should not be reused. For more information please see https://stenciljs.com/docs/templating-jsx#avoid-shared-jsx-nodes`);\n    }\n    if (BUILD.vdomText && newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else if (BUILD.slotRelocation && newVNode.$flags$ & 1 /* VNODE_FLAGS.isSlotReference */) {\n        // create a slot reference node\n        elm = newVNode.$elm$ =\n            BUILD.isDebug || BUILD.hydrateServerSide ? slotReferenceDebugNode(newVNode) : doc.createTextNode('');\n    }\n    else {\n        if (BUILD.svg && !isSvgMode) {\n            isSvgMode = newVNode.$tag$ === 'svg';\n        }\n        // create element\n        elm = newVNode.$elm$ = (BUILD.svg\n            ? doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, BUILD.slotRelocation && newVNode.$flags$ & 2 /* VNODE_FLAGS.isSlotFallback */\n                ? 'slot-fb'\n                : newVNode.$tag$)\n            : doc.createElement(BUILD.slotRelocation && newVNode.$flags$ & 2 /* VNODE_FLAGS.isSlotFallback */\n                ? 'slot-fb'\n                : newVNode.$tag$));\n        if (BUILD.svg && isSvgMode && newVNode.$tag$ === 'foreignObject') {\n            isSvgMode = false;\n        }\n        // add css classes, attrs, props, listeners, etc.\n        if (BUILD.vdomAttribute) {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if ((BUILD.shadowDom || BUILD.scoped) && isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i, elm);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n        if (BUILD.svg) {\n            if (newVNode.$tag$ === 'svg') {\n                // Only reset the SVG context when we're exiting <svg> element\n                isSvgMode = false;\n            }\n            else if (elm.tagName === 'foreignObject') {\n                // Reenter SVG context when we're exiting <foreignObject> element\n                isSvgMode = true;\n            }\n        }\n    }\n    if (BUILD.slotRelocation) {\n        elm['s-hn'] = hostTagName;\n        if (newVNode.$flags$ & (2 /* VNODE_FLAGS.isSlotFallback */ | 1 /* VNODE_FLAGS.isSlotReference */)) {\n            // remember the content reference comment\n            elm['s-sr'] = true;\n            // remember the content reference comment\n            elm['s-cr'] = contentRef;\n            // remember the slot name, or empty string for default slot\n            elm['s-sn'] = newVNode.$name$ || '';\n            // check if we've got an old vnode for this slot\n            oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n            if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n                // we've got an old slot vnode and the wrapper is being replaced\n                // so let's move the old slot content back to it's original location\n                putBackInOriginalLocation(oldParentVNode.$elm$, false);\n            }\n        }\n    }\n    return elm;\n};\nconst putBackInOriginalLocation = (parentElm, recursive) => {\n    plt.$flags$ |= 1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n    const oldSlotChildNodes = parentElm.childNodes;\n    for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n        const childNode = oldSlotChildNodes[i];\n        if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n            // // this child node in the old element is from another component\n            // // remove this node from the old slot's parent\n            // childNode.remove();\n            // and relocate it back to it's original location\n            parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));\n            // remove the old original location comment entirely\n            // later on the patch function will know what to do\n            // and move this to the correct spot in need be\n            childNode['s-ol'].remove();\n            childNode['s-ol'] = undefined;\n            checkSlotRelocate = true;\n        }\n        if (recursive) {\n            putBackInOriginalLocation(childNode, recursive);\n        }\n    }\n    plt.$flags$ &= ~1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n};\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = ((BUILD.slotRelocation && parentElm['s-cr'] && parentElm['s-cr'].parentNode) || parentElm);\n    let childNode;\n    if (BUILD.shadowDom && containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx, parentElm);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, BUILD.slotRelocation ? referenceNode(before) : before);\n            }\n        }\n    }\n};\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            callNodeRefs(vnode);\n            if (BUILD.slotRelocation) {\n                // we're removing this element\n                // so it's possible we need to show slot fallback content now\n                checkSlotFallbackVisibility = true;\n                if (elm['s-ol']) {\n                    // remove the original location comment\n                    elm['s-ol'].remove();\n                }\n                else {\n                    // it's possible that child nodes of the node\n                    // that's being removed are slot nodes\n                    putBackInOriginalLocation(elm, true);\n                }\n            }\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\n/**\n * Reconcile the children of a new VNode with the children of an old VNode by\n * traversing the two collections of children, identifying nodes that are\n * conserved or changed, calling out to `patch` to make any necessary\n * updates to the DOM, and rearranging DOM nodes as needed.\n *\n * The algorithm for reconciling children works by analyzing two 'windows' onto\n * the two arrays of children (`oldCh` and `newCh`). We keep track of the\n * 'windows' by storing start and end indices and references to the\n * corresponding array entries. Initially the two 'windows' are basically equal\n * to the entire array, but we progressively narrow the windows until there are\n * no children left to update by doing the following:\n *\n * 1. Skip any `null` entries at the beginning or end of the two arrays, so\n *    that if we have an initial array like the following we'll end up dealing\n *    only with a window bounded by the highlighted elements:\n *\n *    [null, null, VNode1 , ... , VNode2, null, null]\n *                 ^^^^^^         ^^^^^^\n *\n * 2. Check to see if the elements at the head and tail positions are equal\n *    across the windows. This will basically detect elements which haven't\n *    been added, removed, or changed position, i.e. if you had the following\n *    VNode elements (represented as HTML):\n *\n *    oldVNode: `<div><p><span>HEY</span></p></div>`\n *    newVNode: `<div><p><span>THERE</span></p></div>`\n *\n *    Then when comparing the children of the `<div>` tag we check the equality\n *    of the VNodes corresponding to the `<p>` tags and, since they are the\n *    same tag in the same position, we'd be able to avoid completely\n *    re-rendering the subtree under them with a new DOM element and would just\n *    call out to `patch` to handle reconciling their children and so on.\n *\n * 3. Check, for both windows, to see if the element at the beginning of the\n *    window corresponds to the element at the end of the other window. This is\n *    a heuristic which will let us identify _some_ situations in which\n *    elements have changed position, for instance it _should_ detect that the\n *    children nodes themselves have not changed but merely moved in the\n *    following example:\n *\n *    oldVNode: `<div><element-one /><element-two /></div>`\n *    newVNode: `<div><element-two /><element-one /></div>`\n *\n *    If we find cases like this then we also need to move the concrete DOM\n *    elements corresponding to the moved children to write the re-order to the\n *    DOM.\n *\n * 4. Finally, if VNodes have the `key` attribute set on them we check for any\n *    nodes in the old children which have the same key as the first element in\n *    our window on the new children. If we find such a node we handle calling\n *    out to `patch`, moving relevant DOM nodes, and so on, in accordance with\n *    what we find.\n *\n * Finally, once we've narrowed our 'windows' to the point that either of them\n * collapse (i.e. they have length 0) we then handle any remaining VNode\n * insertion or deletion that needs to happen to get a DOM state that correctly\n * reflects the new child VNodes. If, for instance, after our window on the old\n * children has collapsed we still have more nodes on the new children that\n * we haven't dealt with yet then we need to add them, or if the new children\n * collapse but we still have unhandled _old_ children then we need to make\n * sure the corresponding DOM nodes are removed.\n *\n * @param parentElm the node into which the parent VNode is rendered\n * @param oldCh the old children of the parent node\n * @param newVNode the new VNode which will replace the parent\n * @param newCh the new children of the parent node\n */\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let idxInOld = 0;\n    let i = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    let elmToMove;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // VNode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            // if the start nodes are the same then we should patch the new VNode\n            // onto the old one, and increment our `newStartIdx` and `oldStartIdx`\n            // indices to reflect that. We don't need to move any DOM Nodes around\n            // since things are matched up in order.\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            // likewise, if the end nodes are the same we patch new onto old and\n            // decrement our end indices, and also likewise in this case we don't\n            // need to move any DOM Nodes.\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            // case: \"Vnode moved right\"\n            //\n            // We've found that the last node in our window on the new children is\n            // the same VNode as the _first_ node in our window on the old children\n            // we're dealing with now. Visually, this is the layout of these two\n            // nodes:\n            //\n            // newCh: [..., newStartVnode , ... , newEndVnode , ...]\n            //                                    ^^^^^^^^^^^\n            // oldCh: [..., oldStartVnode , ... , oldEndVnode , ...]\n            //              ^^^^^^^^^^^^^\n            //\n            // In this situation we need to patch `newEndVnode` onto `oldStartVnode`\n            // and move the DOM element for `oldStartVnode`.\n            if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n            }\n            patch(oldStartVnode, newEndVnode);\n            // We need to move the element for `oldStartVnode` into a position which\n            // will be appropriate for `newEndVnode`. For this we can use\n            // `.insertBefore` and `oldEndVnode.$elm$.nextSibling`. If there is a\n            // sibling for `oldEndVnode.$elm$` then we want to move the DOM node for\n            // `oldStartVnode` between `oldEndVnode` and it's sibling, like so:\n            //\n            // <old-start-node />\n            // <some-intervening-node />\n            // <old-end-node />\n            // <!-- ->              <-- `oldStartVnode.$elm$` should be inserted here\n            // <next-sibling />\n            //\n            // If instead `oldEndVnode.$elm$` has no sibling then we just want to put\n            // the node for `oldStartVnode` at the end of the children of\n            // `parentElm`. Luckily, `Node.nextSibling` will return `null` if there\n            // aren't any siblings, and passing `null` to `Node.insertBefore` will\n            // append it to the children of the parent element.\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            // case: \"Vnode moved left\"\n            //\n            // We've found that the first node in our window on the new children is\n            // the same VNode as the _last_ node in our window on the old children.\n            // Visually, this is the layout of these two nodes:\n            //\n            // newCh: [..., newStartVnode , ... , newEndVnode , ...]\n            //              ^^^^^^^^^^^^^\n            // oldCh: [..., oldStartVnode , ... , oldEndVnode , ...]\n            //                                    ^^^^^^^^^^^\n            //\n            // In this situation we need to patch `newStartVnode` onto `oldEndVnode`\n            // (which will handle updating any changed attributes, reconciling their\n            // children etc) but we also need to move the DOM node to which\n            // `oldEndVnode` corresponds.\n            if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n            }\n            patch(oldEndVnode, newStartVnode);\n            // We've already checked above if `oldStartVnode` and `newStartVnode` are\n            // the same node, so since we're here we know that they are not. Thus we\n            // can move the element for `oldEndVnode` _before_ the element for\n            // `oldStartVnode`, leaving `oldStartVnode` to be reconciled in the\n            // future.\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            // Here we do some checks to match up old and new nodes based on the\n            // `$key$` attribute, which is set by putting a `key=\"my-key\"` attribute\n            // in the JSX for a DOM element in the implementation of a Stencil\n            // component.\n            //\n            // First we check to see if there are any nodes in the array of old\n            // children which have the same key as the first node in the new\n            // children.\n            idxInOld = -1;\n            if (BUILD.vdomKey) {\n                for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n                    if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n                        idxInOld = i;\n                        break;\n                    }\n                }\n            }\n            if (BUILD.vdomKey && idxInOld >= 0) {\n                // We found a node in the old children which matches up with the first\n                // node in the new children! So let's deal with that\n                elmToMove = oldCh[idxInOld];\n                if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n                    // the tag doesn't match so we'll need a new DOM element\n                    node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\n                }\n                else {\n                    patch(elmToMove, newStartVnode);\n                    // invalidate the matching old node so that we won't try to update it\n                    // again later on\n                    oldCh[idxInOld] = undefined;\n                    node = elmToMove.$elm$;\n                }\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else {\n                // We either didn't find an element in the old children that matches\n                // the key of the first new child OR the build is not using `key`\n                // attributes at all. In either case we need to create a new element\n                // for the new node.\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                // if we created a new node then handle inserting it to the DOM\n                if (BUILD.slotRelocation) {\n                    parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n                }\n                else {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        // we have some more new nodes to add which don't match up with old nodes\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (BUILD.updatable && newStartIdx > newEndIdx) {\n        // there are nodes in the `oldCh` array which no longer correspond to nodes\n        // in the new array, so lets remove them (which entails cleaning up the\n        // relevant DOM nodes)\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\n/**\n * Compare two VNodes to determine if they are the same\n *\n * **NB**: This function is an equality _heuristic_ based on the available\n * information set on the two VNodes and can be misleading under certain\n * circumstances. In particular, if the two nodes do not have `key` attrs\n * (available under `$key$` on VNodes) then the function falls back on merely\n * checking that they have the same tag.\n *\n * So, in other words, if `key` attrs are not set on VNodes which may be\n * changing order within a `children` array or something along those lines then\n * we could obtain a false positive and then have to do needless re-rendering.\n *\n * @param leftVNode the first VNode to check\n * @param rightVNode the second VNode to check\n * @returns whether they're equal or not\n */\nconst isSameVnode = (leftVNode, rightVNode) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (leftVNode.$tag$ === rightVNode.$tag$) {\n        if (BUILD.slotRelocation && leftVNode.$tag$ === 'slot') {\n            return leftVNode.$name$ === rightVNode.$name$;\n        }\n        // this will be set if components in the build have `key` attrs set on them\n        if (BUILD.vdomKey) {\n            return leftVNode.$key$ === rightVNode.$key$;\n        }\n        return true;\n    }\n    return false;\n};\nconst referenceNode = (node) => {\n    // this node was relocated to a new location in the dom\n    // because of some other component's slot\n    // but we still have an html comment in place of where\n    // it's original location was according to it's original vdom\n    return (node && node['s-ol']) || node;\n};\nconst parentReferenceNode = (node) => (node['s-ol'] ? node['s-ol'] : node).parentNode;\n/**\n * Handle reconciling an outdated VNode with a new one which corresponds to\n * it. This function handles flushing updates to the DOM and reconciling the\n * children of the two nodes (if any).\n *\n * @param oldVNode an old VNode whose DOM element and children we want to update\n * @param newVNode a new VNode representing an updated version of the old one\n */\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    let defaultHolder;\n    if (!BUILD.vdomText || text === null) {\n        if (BUILD.svg) {\n            // test if we're rendering an svg element, or still rendering nodes inside of one\n            // only add this to the when the compiler sees we're using an svg somewhere\n            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n        }\n        if (BUILD.vdomAttribute || BUILD.reflect) {\n            if (BUILD.slot && tag === 'slot')\n                ;\n            else {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (BUILD.updatable && oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            // so we need to call `updateChildren` to reconcile them\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (BUILD.updatable && BUILD.vdomText && oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (BUILD.updatable && oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n        if (BUILD.svg && isSvgMode && tag === 'svg') {\n            isSvgMode = false;\n        }\n    }\n    else if (BUILD.vdomText && BUILD.slotRelocation && (defaultHolder = elm['s-cr'])) {\n        // this element has slotted content\n        defaultHolder.parentNode.textContent = text;\n    }\n    else if (BUILD.vdomText && oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\nconst updateFallbackSlotVisibility = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    const childNodes = elm.childNodes;\n    let childNode;\n    let i;\n    let ilen;\n    let j;\n    let slotNameAttr;\n    let nodeType;\n    for (i = 0, ilen = childNodes.length; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n            if (childNode['s-sr']) {\n                // this is a slot fallback node\n                // get the slot name for this slot reference node\n                slotNameAttr = childNode['s-sn'];\n                // by default always show a fallback slot node\n                // then hide it if there are other slots in the light dom\n                childNode.hidden = false;\n                for (j = 0; j < ilen; j++) {\n                    nodeType = childNodes[j].nodeType;\n                    if (childNodes[j]['s-hn'] !== childNode['s-hn'] || slotNameAttr !== '') {\n                        // this sibling node is from a different component OR is a named fallback slot node\n                        if (nodeType === 1 /* NODE_TYPE.ElementNode */ && slotNameAttr === childNodes[j].getAttribute('slot')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                    else {\n                        // this is a default fallback slot node\n                        // any element or text node (with content)\n                        // should hide the default fallback slot node\n                        if (nodeType === 1 /* NODE_TYPE.ElementNode */ ||\n                            (nodeType === 3 /* NODE_TYPE.TextNode */ && childNodes[j].textContent.trim() !== '')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            // keep drilling down\n            updateFallbackSlotVisibility(childNode);\n        }\n    }\n};\nconst relocateNodes = [];\nconst relocateSlotContent = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let childNode;\n    let node;\n    let hostContentNodes;\n    let slotNameAttr;\n    let relocateNodeData;\n    let j;\n    let i = 0;\n    const childNodes = elm.childNodes;\n    const ilen = childNodes.length;\n    for (; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n            // first got the content reference comment node\n            // then we got it's parent, which is where all the host content is in now\n            hostContentNodes = node.parentNode.childNodes;\n            slotNameAttr = childNode['s-sn'];\n            for (j = hostContentNodes.length - 1; j >= 0; j--) {\n                node = hostContentNodes[j];\n                if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n                    // let's do some relocating to its new home\n                    // but never relocate a content reference node\n                    // that is suppose to always represent the original content location\n                    if (isNodeLocatedInSlot(node, slotNameAttr)) {\n                        // it's possible we've already decided to relocate this node\n                        relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                        // made some changes to slots\n                        // let's make sure we also double check\n                        // fallbacks are correctly hidden or shown\n                        checkSlotFallbackVisibility = true;\n                        node['s-sn'] = node['s-sn'] || slotNameAttr;\n                        if (relocateNodeData) {\n                            // previously we never found a slot home for this node\n                            // but turns out we did, so let's remember it now\n                            relocateNodeData.$slotRefNode$ = childNode;\n                        }\n                        else {\n                            // add to our list of nodes to relocate\n                            relocateNodes.push({\n                                $slotRefNode$: childNode,\n                                $nodeToRelocate$: node,\n                            });\n                        }\n                        if (node['s-sr']) {\n                            relocateNodes.map((relocateNode) => {\n                                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                                    relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                                    if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                                        relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                    else if (!relocateNodes.some((r) => r.$nodeToRelocate$ === node)) {\n                        // so far this element does not have a slot home, not setting slotRefNode on purpose\n                        // if we never find a home for this element then we'll need to hide it\n                        relocateNodes.push({\n                            $nodeToRelocate$: node,\n                        });\n                    }\n                }\n            }\n        }\n        if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n            relocateSlotContent(childNode);\n        }\n    }\n};\nconst isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr) => {\n    if (nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {\n            return true;\n        }\n        if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {\n            return true;\n        }\n        return false;\n    }\n    if (nodeToRelocate['s-sn'] === slotNameAttr) {\n        return true;\n    }\n    return slotNameAttr === '';\n};\nconst callNodeRefs = (vNode) => {\n    if (BUILD.vdomRef) {\n        vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n        vNode.$children$ && vNode.$children$.map(callNodeRefs);\n    }\n};\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    // <Host> runtime check\n    if (BUILD.isDev && Array.isArray(renderFnResults) && renderFnResults.some(isHost)) {\n        throw new Error(`The <Host> must be the single root component.\nLooks like the render() function of \"${hostTagName.toLowerCase()}\" is returning an array that contains the <Host>.\n\nThe render() function should look like this instead:\n\nrender() {\n  // Do not return an array\n  return (\n    <Host>{content}</Host>\n  );\n}\n  `);\n    }\n    if (BUILD.reflect && cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* VNODE_FLAGS.isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (BUILD.shadowDom ? hostElm.shadowRoot || hostElm : hostElm);\n    if (BUILD.scoped || BUILD.shadowDom) {\n        scopeId = hostElm['s-sc'];\n    }\n    if (BUILD.slotRelocation) {\n        contentRef = hostElm['s-cr'];\n        useNativeShadowDom = supportsShadow && (cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) !== 0;\n        // always reset\n        checkSlotFallbackVisibility = false;\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n    if (BUILD.slotRelocation) {\n        // while we're moving nodes around existing nodes, temporarily disable\n        // the disconnectCallback from working\n        plt.$flags$ |= 1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n        if (checkSlotRelocate) {\n            relocateSlotContent(rootVnode.$elm$);\n            let relocateData;\n            let nodeToRelocate;\n            let orgLocationNode;\n            let parentNodeRef;\n            let insertBeforeNode;\n            let refNode;\n            let i = 0;\n            for (; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (!nodeToRelocate['s-ol']) {\n                    // add a reference node marking this node's original location\n                    // keep a reference to this node for later lookups\n                    orgLocationNode =\n                        BUILD.isDebug || BUILD.hydrateServerSide\n                            ? originalLocationDebugNode(nodeToRelocate)\n                            : doc.createTextNode('');\n                    orgLocationNode['s-nr'] = nodeToRelocate;\n                    nodeToRelocate.parentNode.insertBefore((nodeToRelocate['s-ol'] = orgLocationNode), nodeToRelocate);\n                }\n            }\n            for (i = 0; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (relocateData.$slotRefNode$) {\n                    // by default we're just going to insert it directly\n                    // after the slot reference node\n                    parentNodeRef = relocateData.$slotRefNode$.parentNode;\n                    insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n                    orgLocationNode = nodeToRelocate['s-ol'];\n                    while ((orgLocationNode = orgLocationNode.previousSibling)) {\n                        refNode = orgLocationNode['s-nr'];\n                        if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n                            refNode = refNode.nextSibling;\n                            if (!refNode || !refNode['s-nr']) {\n                                insertBeforeNode = refNode;\n                                break;\n                            }\n                        }\n                    }\n                    if ((!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode) ||\n                        nodeToRelocate.nextSibling !== insertBeforeNode) {\n                        // we've checked that it's worth while to relocate\n                        // since that the node to relocate\n                        // has a different next sibling or parent relocated\n                        if (nodeToRelocate !== insertBeforeNode) {\n                            if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                                // probably a component in the index.html that doesn't have it's hostname set\n                                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n                            }\n                            // add it back to the dom but in its new home\n                            parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n                        }\n                    }\n                }\n                else {\n                    // this node doesn't have a slot home to go to, so let's hide it\n                    if (nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n                        nodeToRelocate.hidden = true;\n                    }\n                }\n            }\n        }\n        if (checkSlotFallbackVisibility) {\n            updateFallbackSlotVisibility(rootVnode.$elm$);\n        }\n        // done moving nodes around\n        // allow the disconnect callback to work again\n        plt.$flags$ &= ~1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n        // always reset\n        relocateNodes.length = 0;\n    }\n};\n// slot comment debug nodes only created with the `--debug` flag\n// otherwise these nodes are text nodes w/out content\nconst slotReferenceDebugNode = (slotVNode) => doc.createComment(`<slot${slotVNode.$name$ ? ' name=\"' + slotVNode.$name$ + '\"' : ''}> (host=${hostTagName.toLowerCase()})`);\nconst originalLocationDebugNode = (nodeToRelocate) => doc.createComment(`org-location for ` +\n    (nodeToRelocate.localName\n        ? `<${nodeToRelocate.localName}> (host=${nodeToRelocate['s-hn']})`\n        : `[${nodeToRelocate.textContent}]`));\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (BUILD.asyncLoading && ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    if (BUILD.taskQueue && BUILD.updatable) {\n        hostRef.$flags$ |= 16 /* HOST_FLAGS.isQueuedForUpdate */;\n    }\n    if (BUILD.asyncLoading && hostRef.$flags$ & 4 /* HOST_FLAGS.isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* HOST_FLAGS.needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return BUILD.taskQueue ? writeTask(dispatch) : dispatch();\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const elm = hostRef.$hostElement$;\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    let promise;\n    if (isInitialLoad) {\n        if (BUILD.lazyLoad && BUILD.hostListener) {\n            hostRef.$flags$ |= 256 /* HOST_FLAGS.isListenReady */;\n            if (hostRef.$queuedListeners$) {\n                hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));\n                hostRef.$queuedListeners$ = null;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentWillLoad');\n        if (BUILD.cmpWillLoad) {\n            promise = safeCall(instance, 'componentWillLoad');\n        }\n    }\n    else {\n        emitLifecycleEvent(elm, 'componentWillUpdate');\n        if (BUILD.cmpWillUpdate) {\n            promise = safeCall(instance, 'componentWillUpdate');\n        }\n    }\n    emitLifecycleEvent(elm, 'componentWillRender');\n    if (BUILD.cmpWillRender) {\n        promise = then(promise, () => safeCall(instance, 'componentWillRender'));\n    }\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (BUILD.style && isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    if (BUILD.isDev) {\n        hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\n    }\n    if (BUILD.hydrateServerSide) {\n        await callRender(hostRef, instance, elm);\n    }\n    else {\n        callRender(hostRef, instance, elm);\n    }\n    if (BUILD.cssVarShim && plt.$cssShim$) {\n        plt.$cssShim$.updateHost(elm);\n    }\n    if (BUILD.isDev) {\n        hostRef.$renderCount$++;\n        hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\n    }\n    if (BUILD.hydrateServerSide) {\n        try {\n            // manually connected child components during server-side hydrate\n            serverSideConnected(elm);\n            if (isInitialLoad) {\n                // using only during server-side hydrate\n                if (hostRef.$cmpMeta$.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                    elm['s-en'] = '';\n                }\n                else if (hostRef.$cmpMeta$.$flags$ & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\n                    elm['s-en'] = 'c';\n                }\n            }\n        }\n        catch (e) {\n            consoleError(e, elm);\n        }\n    }\n    if (BUILD.asyncLoading && rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    if (BUILD.asyncLoading) {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* HOST_FLAGS.isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n    else {\n        postUpdateComponent(hostRef);\n    }\n};\nconst callRender = (hostRef, instance, elm) => {\n    // in order for bundlers to correctly treeshake the BUILD object\n    // we need to ensure BUILD is not deoptimized within a try/catch\n    // https://rollupjs.org/guide/en/#treeshake tryCatchDeoptimization\n    const allRenderFn = BUILD.allRenderFn ? true : false;\n    const lazyLoad = BUILD.lazyLoad ? true : false;\n    const taskQueue = BUILD.taskQueue ? true : false;\n    const updatable = BUILD.updatable ? true : false;\n    try {\n        renderingRef = instance;\n        instance = allRenderFn ? instance.render() : instance.render && instance.render();\n        if (updatable && taskQueue) {\n            hostRef.$flags$ &= ~16 /* HOST_FLAGS.isQueuedForUpdate */;\n        }\n        if (updatable || lazyLoad) {\n            hostRef.$flags$ |= 2 /* HOST_FLAGS.hasRendered */;\n        }\n        if (BUILD.hasRenderFn || BUILD.reflect) {\n            if (BUILD.vdomRender || BUILD.reflect) {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                if (BUILD.hydrateServerSide) {\n                    return Promise.resolve(instance).then((value) => renderVdom(hostRef, value));\n                }\n                else {\n                    renderVdom(hostRef, instance);\n                }\n            }\n            else {\n                elm.textContent = instance;\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    renderingRef = null;\n    return null;\n};\nconst getRenderingRef = () => renderingRef;\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (BUILD.cmpDidRender) {\n        if (BUILD.isDev) {\n            hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\n        }\n        safeCall(instance, 'componentDidRender');\n        if (BUILD.isDev) {\n            hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\n        }\n    }\n    emitLifecycleEvent(elm, 'componentDidRender');\n    if (!(hostRef.$flags$ & 64 /* HOST_FLAGS.hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* HOST_FLAGS.hasLoadedComponent */;\n        if (BUILD.asyncLoading && BUILD.cssAnnotations) {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        if (BUILD.cmpDidLoad) {\n            if (BUILD.isDev) {\n                hostRef.$flags$ |= 2048 /* HOST_FLAGS.devOnDidLoad */;\n            }\n            safeCall(instance, 'componentDidLoad');\n            if (BUILD.isDev) {\n                hostRef.$flags$ &= ~2048 /* HOST_FLAGS.devOnDidLoad */;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentDidLoad');\n        endPostUpdate();\n        if (BUILD.asyncLoading) {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad(tagName);\n            }\n        }\n    }\n    else {\n        if (BUILD.cmpDidUpdate) {\n            // we've already loaded this component\n            // fire off the user's componentDidUpdate method (if one was provided)\n            // componentDidUpdate runs AFTER render() has been called\n            // and all child components have finished updating\n            if (BUILD.isDev) {\n                hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\n            }\n            safeCall(instance, 'componentDidUpdate');\n            if (BUILD.isDev) {\n                hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentDidUpdate');\n        endPostUpdate();\n    }\n    if (BUILD.hotModuleReplacement) {\n        elm['s-hmr-load'] && elm['s-hmr-load']();\n    }\n    if (BUILD.method && BUILD.lazyLoad) {\n        hostRef.$onInstanceResolve$(elm);\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    if (BUILD.asyncLoading) {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* HOST_FLAGS.needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* HOST_FLAGS.isWaitingForChildren */ | 512 /* HOST_FLAGS.needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst forceUpdate = (ref) => {\n    if (BUILD.updatable) {\n        const hostRef = getHostRef(ref);\n        const isConnected = hostRef.$hostElement$.isConnected;\n        if (isConnected &&\n            (hostRef.$flags$ & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n            scheduleUpdate(hostRef, false);\n        }\n        // Returns \"true\" when the forced update was successfully scheduled\n        return isConnected;\n    }\n    return false;\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    if (BUILD.cssAnnotations) {\n        addHydratedFlag(doc.documentElement);\n    }\n    if (BUILD.asyncQueue) {\n        plt.$flags$ |= 2 /* PLATFORM_FLAGS.appLoaded */;\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n    if (BUILD.profile && performance.measure) {\n        performance.measure(`[Stencil] ${NAMESPACE} initial load (by ${who})`, 'st:app:start');\n    }\n};\nconst safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst emitLifecycleEvent = (elm, lifecycleName) => {\n    if (BUILD.lifecycleDOMEvents) {\n        emitEvent(elm, 'stencil_' + lifecycleName, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                namespace: NAMESPACE,\n            },\n        });\n    }\n};\nconst addHydratedFlag = (elm) => BUILD.hydratedClass\n    ? elm.classList.add('hydrated')\n    : BUILD.hydratedAttribute\n        ? elm.setAttribute('hydrated', '')\n        : undefined;\nconst serverSideConnected = (elm) => {\n    const children = elm.children;\n    if (children != null) {\n        for (let i = 0, ii = children.length; i < ii; i++) {\n            const childElm = children[i];\n            if (typeof childElm.connectedCallback === 'function') {\n                childElm.connectedCallback();\n            }\n            serverSideConnected(childElm);\n        }\n    }\n};\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const elm = BUILD.lazyLoad ? hostRef.$hostElement$ : ref;\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n    const didValueChange = newVal !== oldVal && !areBothNaN;\n    if ((!BUILD.lazyLoad || !(flags & 8 /* HOST_FLAGS.isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (BUILD.isDev) {\n            if (hostRef.$flags$ & 1024 /* HOST_FLAGS.devOnRender */) {\n                consoleDevWarn(`The state/prop \"${propName}\" changed during rendering. This can potentially lead to infinite-loops and other bugs.`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n            }\n            else if (hostRef.$flags$ & 2048 /* HOST_FLAGS.devOnDidLoad */) {\n                consoleDevWarn(`The state/prop \"${propName}\" changed during \"componentDidLoad()\", this triggers extra re-renders, try to setup on \"componentWillLoad()\"`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n            }\n        }\n        if (!BUILD.lazyLoad || instance) {\n            // get an array of method names of watch functions to call\n            if (BUILD.watchCallback && cmpMeta.$watchers$ && flags & 128 /* HOST_FLAGS.isWatchReady */) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map((watchMethodName) => {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e, elm);\n                        }\n                    });\n                }\n            }\n            if (BUILD.updatable &&\n                (flags & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n                if (BUILD.cmpShouldUpdate && instance.componentShouldUpdate) {\n                    if (instance.componentShouldUpdate(newVal, oldVal, propName) === false) {\n                        return;\n                    }\n                }\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\n/**\n * Attach a series of runtime constructs to a compiled Stencil component\n * constructor, including getters and setters for the `@Prop` and `@State`\n * decorators, callbacks for when attributes change, and so on.\n *\n * @param Cstr the constructor for a component that we need to process\n * @param cmpMeta metadata collected previously about the component\n * @param flags a number used to store a series of bit flags\n * @returns a reference to the same constructor passed in (but now mutated)\n */\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if (BUILD.member && cmpMeta.$members$) {\n        if (BUILD.watchCallback && Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((BUILD.prop || BUILD.state) &&\n                (memberFlags & 31 /* MEMBER_FLAGS.Prop */ ||\n                    ((!BUILD.lazyLoad || flags & 2 /* PROXY_FLAGS.proxyState */) && memberFlags & 32 /* MEMBER_FLAGS.State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // only during dev time\n                        if (BUILD.isDev) {\n                            const ref = getHostRef(this);\n                            if (\n                            // we are proxying the instance (not element)\n                            (flags & 1 /* PROXY_FLAGS.isElementConstructor */) === 0 &&\n                                // the element is not constructing\n                                (ref.$flags$ & 8 /* HOST_FLAGS.isConstructingInstance */) === 0 &&\n                                // the member is a prop\n                                (memberFlags & 31 /* MEMBER_FLAGS.Prop */) !== 0 &&\n                                // the member is not mutable\n                                (memberFlags & 1024 /* MEMBER_FLAGS.Mutable */) === 0) {\n                                consoleDevWarn(`@Prop() \"${memberName}\" on <${cmpMeta.$tagName$}> is immutable but was modified from within the component.\\nMore information: https://stenciljs.com/docs/properties#prop-mutability`);\n                            }\n                        }\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n            else if (BUILD.lazyLoad &&\n                BUILD.method &&\n                flags & 1 /* PROXY_FLAGS.isElementConstructor */ &&\n                memberFlags & 64 /* MEMBER_FLAGS.Method */) {\n                // proxyComponent - method\n                Object.defineProperty(prototype, memberName, {\n                    value(...args) {\n                        const ref = getHostRef(this);\n                        return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));\n                    },\n                });\n            }\n        });\n        if (BUILD.observeAttribute && (!BUILD.lazyLoad || flags & 1 /* PROXY_FLAGS.isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n                    //  in the case where an attribute was set inline.\n                    //  ```html\n                    //    <my-component some-attribute=\"some-value\"></my-component>\n                    //  ```\n                    //\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then\n                    //  programmatically changes it before it has been upgraded as shown below:\n                    //\n                    //  ```html\n                    //    <!-- this component has _not_ been upgraded yet -->\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n                    //    <script>\n                    //      // grab non-upgraded component\n                    //      el = document.querySelector(\"#test\");\n                    //      el.someAttribute = \"another-value\";\n                    //      // upgrade component\n                    //      customElements.define('my-component', MyComponent);\n                    //    </script>\n                    //  ```\n                    //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\n                    //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\n                    //\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\n                    //\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n                    //\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n                    //  properties here given that this goes against best practices outlined here\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n                    if (this.hasOwnProperty(propName)) {\n                        newValue = this[propName];\n                        delete this[propName];\n                    }\n                    else if (prototype.hasOwnProperty(propName) &&\n                        typeof this[propName] === 'number' &&\n                        this[propName] == newValue) {\n                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n                        return;\n                    }\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members\n                .filter(([_, m]) => m[0] & 15 /* MEMBER_FLAGS.HasAttribute */) // filter to only keep props that should match attributes\n                .map(([propName, m]) => {\n                const attrName = m[1] || propName;\n                attrNameToPropName.set(attrName, propName);\n                if (BUILD.reflect && m[0] & 512 /* MEMBER_FLAGS.ReflectAttr */) {\n                    cmpMeta.$attrsToReflect$.push([propName, attrName]);\n                }\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ((BUILD.lazyLoad || BUILD.hydrateServerSide || BUILD.style) &&\n        (hostRef.$flags$ & 32 /* HOST_FLAGS.hasInitializedComponent */) === 0) {\n        if (BUILD.lazyLoad || BUILD.hydrateClientSide) {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta, hostRef, hmrVersionId);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime(`st:load:${cmpMeta.$tagName$}:${hostRef.$modeName$}`, `[Stencil] Load module for <${cmpMeta.$tagName$}>`);\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if ((BUILD.isDev || BUILD.isDebug) && !Cstr) {\n                throw new Error(`Constructor for \"${cmpMeta.$tagName$}#${hostRef.$modeName$}\" was not found`);\n            }\n            if (BUILD.member && !Cstr.isProxied) {\n                // we've never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                if (BUILD.watchCallback) {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* PROXY_FLAGS.proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            if (BUILD.member) {\n                hostRef.$flags$ |= 8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            if (BUILD.member) {\n                hostRef.$flags$ &= ~8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            if (BUILD.watchCallback) {\n                hostRef.$flags$ |= 128 /* HOST_FLAGS.isWatchReady */;\n            }\n            endNewInstance();\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        else {\n            // sync constructor component\n            Cstr = elm.constructor;\n            hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\n            // wait for the CustomElementRegistry to mark the component as ready before setting `isWatchReady`. Otherwise,\n            // watchers may fire prematurely if `customElements.get()`/`customElements.whenDefined()` resolves _before_\n            // Stencil has completed instantiating the component.\n            customElements.whenDefined(cmpMeta.$tagName$).then(() => (hostRef.$flags$ |= 128 /* HOST_FLAGS.isWatchReady */));\n        }\n        if (BUILD.style && Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            if (BUILD.mode && typeof style !== 'string') {\n                style = style[(hostRef.$modeName$ = computeMode(elm))];\n                if (BUILD.hydrateServerSide && hostRef.$modeName$) {\n                    elm.setAttribute('s-mode', hostRef.$modeName$);\n                }\n            }\n            const scopeId = getScopeId(cmpMeta, hostRef.$modeName$);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                if (!BUILD.hydrateServerSide &&\n                    BUILD.shadowDom &&\n                    BUILD.shadowDomShim &&\n                    cmpMeta.$flags$ & 8 /* CMP_FLAGS.needsShadowDomShim */) {\n                    style = await import('./shadow-css.js').then((m) => m.scopeCss(style, scopeId, false));\n                }\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (BUILD.asyncLoading && ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst fireConnectedCallback = (instance) => {\n    if (BUILD.lazyLoad && BUILD.connectedCallback) {\n        safeCall(instance, 'connectedCallback');\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (BUILD.hostListenerTargetParent) {\n            // only run if we have listeners being attached to a parent\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, true);\n        }\n        if (!(hostRef.$flags$ & 1 /* HOST_FLAGS.hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* HOST_FLAGS.hasConnected */;\n            let hostId;\n            if (BUILD.hydrateClientSide) {\n                hostId = elm.getAttribute(HYDRATE_ID);\n                if (hostId) {\n                    if (BUILD.shadowDom && supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                        const scopeId = BUILD.mode\n                            ? addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute('s-mode'))\n                            : addStyle(elm.shadowRoot, cmpMeta);\n                        elm.classList.remove(scopeId + '-h', scopeId + '-s');\n                    }\n                    initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);\n                }\n            }\n            if (BUILD.slotRelocation && !hostId) {\n                // initUpdate\n                // if the slot polyfill is required we'll need to put some nodes\n                // in here to act as original content anchors as we move nodes around\n                // host element has been connected to the DOM\n                if (BUILD.hydrateServerSide ||\n                    ((BUILD.slot || BUILD.shadowDom) &&\n                        cmpMeta.$flags$ & (4 /* CMP_FLAGS.hasSlotRelocation */ | 8 /* CMP_FLAGS.needsShadowDomShim */))) {\n                    setContentReference(elm);\n                }\n            }\n            if (BUILD.asyncLoading) {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if ((BUILD.hydrateClientSide &&\n                        ancestorComponent.nodeType === 1 /* NODE_TYPE.ElementNode */ &&\n                        ancestorComponent.hasAttribute('s-id') &&\n                        ancestorComponent['s-p']) ||\n                        ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (BUILD.prop && !BUILD.hydrateServerSide && cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* MEMBER_FLAGS.Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            if (BUILD.initializeNextTick) {\n                // connectedCallback, taskQueue, initialLoad\n                // angular sets attribute AFTER connectCallback\n                // https://github.com/angular/angular/issues/18909\n                // https://github.com/angular/angular/issues/19940\n                nextTick(() => initializeComponent(elm, hostRef, cmpMeta));\n            }\n            else {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        else {\n            // not the first time this has connected\n            // reattach any event listeners to the host\n            // since they would have been removed when disconnected\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n            // fire off connectedCallback() on component instance\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        endConnected();\n    }\n};\nconst setContentReference = (elm) => {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    const contentRefElm = (elm['s-cr'] = doc.createComment(BUILD.isDebug ? `content-ref (host=${elm.localName})` : ''));\n    contentRefElm['s-cn'] = true;\n    elm.insertBefore(contentRefElm, elm.firstChild);\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n        if (BUILD.hostListener) {\n            if (hostRef.$rmListeners$) {\n                hostRef.$rmListeners$.map((rmListener) => rmListener());\n                hostRef.$rmListeners$ = undefined;\n            }\n        }\n        // clear CSS var-shim tracking\n        if (BUILD.cssVarShim && plt.$cssShim$) {\n            plt.$cssShim$.removeHost(elm);\n        }\n        if (BUILD.lazyLoad && BUILD.disconnectedCallback) {\n            safeCall(instance, 'disconnectedCallback');\n        }\n        if (BUILD.cmpDidUnload) {\n            safeCall(instance, 'componentDidUnload');\n        }\n    }\n};\nconst defineCustomElement = (Cstr, compactMeta) => {\n    customElements.define(compactMeta[1], proxyCustomElement(Cstr, compactMeta));\n};\nconst proxyCustomElement = (Cstr, compactMeta) => {\n    const cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n    };\n    if (BUILD.member) {\n        cmpMeta.$members$ = compactMeta[2];\n    }\n    if (BUILD.hostListener) {\n        cmpMeta.$listeners$ = compactMeta[3];\n    }\n    if (BUILD.watchCallback) {\n        cmpMeta.$watchers$ = Cstr.$watchers$;\n    }\n    if (BUILD.reflect) {\n        cmpMeta.$attrsToReflect$ = [];\n    }\n    if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n        cmpMeta.$flags$ |= 8 /* CMP_FLAGS.needsShadowDomShim */;\n    }\n    const originalConnectedCallback = Cstr.prototype.connectedCallback;\n    const originalDisconnectedCallback = Cstr.prototype.disconnectedCallback;\n    Object.assign(Cstr.prototype, {\n        __registerHost() {\n            registerHost(this, cmpMeta);\n        },\n        connectedCallback() {\n            connectedCallback(this);\n            if (BUILD.connectedCallback && originalConnectedCallback) {\n                originalConnectedCallback.call(this);\n            }\n        },\n        disconnectedCallback() {\n            disconnectedCallback(this);\n            if (BUILD.disconnectedCallback && originalDisconnectedCallback) {\n                originalDisconnectedCallback.call(this);\n            }\n        },\n        __attachShadow() {\n            if (supportsShadow) {\n                if (BUILD.shadowDelegatesFocus) {\n                    this.attachShadow({\n                        mode: 'open',\n                        delegatesFocus: !!(cmpMeta.$flags$ & 16 /* CMP_FLAGS.shadowDelegatesFocus */),\n                    });\n                }\n                else {\n                    this.attachShadow({ mode: 'open' });\n                }\n            }\n            else {\n                this.shadowRoot = this;\n            }\n        },\n    });\n    Cstr.is = cmpMeta.$tagName$;\n    return proxyComponent(Cstr, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */ | 2 /* PROXY_FLAGS.proxyState */);\n};\nconst forceModeUpdate = (elm) => {\n    if (BUILD.style && BUILD.mode && !BUILD.lazyLoad) {\n        const mode = computeMode(elm);\n        const hostRef = getHostRef(elm);\n        if (hostRef.$modeName$ !== mode) {\n            const cmpMeta = hostRef.$cmpMeta$;\n            const oldScopeId = elm['s-sc'];\n            const scopeId = getScopeId(cmpMeta, mode);\n            const style = elm.constructor.style[mode];\n            const flags = cmpMeta.$flags$;\n            if (style) {\n                if (!styles.has(scopeId)) {\n                    registerStyle(scopeId, style, !!(flags & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n                }\n                hostRef.$modeName$ = mode;\n                elm.classList.remove(oldScopeId + '-h', oldScopeId + '-s');\n                attachStyles(hostRef);\n                forceUpdate(elm);\n            }\n        }\n    }\n};\nconst patchCloneNode = (HostElementPrototype) => {\n    const orgCloneNode = HostElementPrototype.cloneNode;\n    HostElementPrototype.cloneNode = function (deep) {\n        const srcNode = this;\n        const isShadowDom = BUILD.shadowDom ? srcNode.shadowRoot && supportsShadow : false;\n        const clonedNode = orgCloneNode.call(srcNode, isShadowDom ? deep : false);\n        if (BUILD.slot && !isShadowDom && deep) {\n            let i = 0;\n            let slotted, nonStencilNode;\n            const stencilPrivates = [\n                's-id',\n                's-cr',\n                's-lr',\n                's-rc',\n                's-sc',\n                's-p',\n                's-cn',\n                's-sr',\n                's-sn',\n                's-hn',\n                's-ol',\n                's-nr',\n                's-si',\n            ];\n            for (; i < srcNode.childNodes.length; i++) {\n                slotted = srcNode.childNodes[i]['s-nr'];\n                nonStencilNode = stencilPrivates.every((privateField) => !srcNode.childNodes[i][privateField]);\n                if (slotted) {\n                    if (BUILD.appendChildSlotFix && clonedNode.__appendChild) {\n                        clonedNode.__appendChild(slotted.cloneNode(true));\n                    }\n                    else {\n                        clonedNode.appendChild(slotted.cloneNode(true));\n                    }\n                }\n                if (nonStencilNode) {\n                    clonedNode.appendChild(srcNode.childNodes[i].cloneNode(true));\n                }\n            }\n        }\n        return clonedNode;\n    };\n};\nconst patchSlotAppendChild = (HostElementPrototype) => {\n    HostElementPrototype.__appendChild = HostElementPrototype.appendChild;\n    HostElementPrototype.appendChild = function (newChild) {\n        const slotName = (newChild['s-sn'] = getSlotName(newChild));\n        const slotNode = getHostSlotNode(this.childNodes, slotName);\n        if (slotNode) {\n            const slotChildNodes = getHostSlotChildNodes(slotNode, slotName);\n            const appendAfter = slotChildNodes[slotChildNodes.length - 1];\n            return appendAfter.parentNode.insertBefore(newChild, appendAfter.nextSibling);\n        }\n        return this.__appendChild(newChild);\n    };\n};\n/**\n * Patches the text content of an unnamed slotted node inside a scoped component\n * @param hostElementPrototype the `Element` to be patched\n * @param cmpMeta component runtime metadata used to determine if the component should be patched or not\n */\nconst patchTextContent = (hostElementPrototype, cmpMeta) => {\n    if (BUILD.scoped && cmpMeta.$flags$ & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\n        const descriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'textContent');\n        Object.defineProperty(hostElementPrototype, '__textContent', descriptor);\n        Object.defineProperty(hostElementPrototype, 'textContent', {\n            get() {\n                var _a;\n                // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n                // the empty string\n                const slotNode = getHostSlotNode(this.childNodes, '');\n                // when a slot node is found, the textContent _may_ be found in the next sibling (text) node, depending on how\n                // nodes were reordered during the vdom render. first try to get the text content from the sibling.\n                if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* NODE_TYPES.TEXT_NODE */) {\n                    return slotNode.nextSibling.textContent;\n                }\n                else if (slotNode) {\n                    return slotNode.textContent;\n                }\n                else {\n                    // fallback to the original implementation\n                    return this.__textContent;\n                }\n            },\n            set(value) {\n                var _a;\n                // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n                // the empty string\n                const slotNode = getHostSlotNode(this.childNodes, '');\n                // when a slot node is found, the textContent _may_ need to be placed in the next sibling (text) node,\n                // depending on how nodes were reordered during the vdom render. first try to set the text content on the\n                // sibling.\n                if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* NODE_TYPES.TEXT_NODE */) {\n                    slotNode.nextSibling.textContent = value;\n                }\n                else if (slotNode) {\n                    slotNode.textContent = value;\n                }\n                else {\n                    // we couldn't find a slot, but that doesn't mean that there isn't one. if this check ran before the DOM\n                    // loaded, we could have missed it. check for a content reference element on the scoped component and insert\n                    // it there\n                    this.__textContent = value;\n                    const contentRefElm = this['s-cr'];\n                    if (contentRefElm) {\n                        this.insertBefore(contentRefElm, this.firstChild);\n                    }\n                }\n            },\n        });\n    }\n};\nconst patchChildSlotNodes = (elm, cmpMeta) => {\n    class FakeNodeList extends Array {\n        item(n) {\n            return this[n];\n        }\n    }\n    if (cmpMeta.$flags$ & 8 /* CMP_FLAGS.needsShadowDomShim */) {\n        const childNodesFn = elm.__lookupGetter__('childNodes');\n        Object.defineProperty(elm, 'children', {\n            get() {\n                return this.childNodes.map((n) => n.nodeType === 1);\n            },\n        });\n        Object.defineProperty(elm, 'childElementCount', {\n            get() {\n                return elm.children.length;\n            },\n        });\n        Object.defineProperty(elm, 'childNodes', {\n            get() {\n                const childNodes = childNodesFn.call(this);\n                if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0 &&\n                    getHostRef(this).$flags$ & 2 /* HOST_FLAGS.hasRendered */) {\n                    const result = new FakeNodeList();\n                    for (let i = 0; i < childNodes.length; i++) {\n                        const slot = childNodes[i]['s-nr'];\n                        if (slot) {\n                            result.push(slot);\n                        }\n                    }\n                    return result;\n                }\n                return FakeNodeList.from(childNodes);\n            },\n        });\n    }\n};\nconst getSlotName = (node) => node['s-sn'] || (node.nodeType === 1 && node.getAttribute('slot')) || '';\n/**\n * Recursively searches a series of child nodes for a slot with the provided name.\n * @param childNodes the nodes to search for a slot with a specific name.\n * @param slotName the name of the slot to match on.\n * @returns a reference to the slot node that matches the provided name, `null` otherwise\n */\nconst getHostSlotNode = (childNodes, slotName) => {\n    let i = 0;\n    let childNode;\n    for (; i < childNodes.length; i++) {\n        childNode = childNodes[i];\n        if (childNode['s-sr'] && childNode['s-sn'] === slotName) {\n            return childNode;\n        }\n        childNode = getHostSlotNode(childNode.childNodes, slotName);\n        if (childNode) {\n            return childNode;\n        }\n    }\n    return null;\n};\nconst getHostSlotChildNodes = (n, slotName) => {\n    const childNodes = [n];\n    while ((n = n.nextSibling) && n['s-sn'] === slotName) {\n        childNodes.push(n);\n    }\n    return childNodes;\n};\nconst hmrStart = (elm, cmpMeta, hmrVersionId) => {\n    // ¯\\_(ツ)_/¯\n    const hostRef = getHostRef(elm);\n    // reset state flags to only have been connected\n    hostRef.$flags$ = 1 /* HOST_FLAGS.hasConnected */;\n    // TODO\n    // detatch any event listeners that may have been added\n    // because we're not passing an exact event name it'll\n    // remove all of this element's event, which is good\n    // create a callback for when this component finishes hmr\n    elm['s-hmr-load'] = () => {\n        // finished hmr for this element\n        delete elm['s-hmr-load'];\n    };\n    // re-initialize the component\n    initializeComponent(elm, hostRef, cmpMeta, hmrVersionId);\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    if (BUILD.profile && performance.mark) {\n        performance.mark('st:app:start');\n    }\n    installDevTools();\n    const endBootstrap = createTime('bootstrapLazy');\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    const styles = /*@__PURE__*/ doc.querySelectorAll(`[${HYDRATED_STYLE_ID}]`);\n    let appLoadFallback;\n    let isBootstrapping = true;\n    let i = 0;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    if (BUILD.asyncQueue) {\n        if (options.syncQueue) {\n            plt.$flags$ |= 4 /* PLATFORM_FLAGS.queueSync */;\n        }\n    }\n    if (BUILD.hydrateClientSide) {\n        // If the app is already hydrated there is not point to disable the\n        // async queue. This will improve the first input delay\n        plt.$flags$ |= 2 /* PLATFORM_FLAGS.appLoaded */;\n    }\n    if (BUILD.hydrateClientSide && BUILD.shadowDom) {\n        for (; i < styles.length; i++) {\n            registerStyle(styles[i].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles[i].innerHTML), true);\n        }\n    }\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            if (BUILD.member) {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            if (BUILD.hostListener) {\n                cmpMeta.$listeners$ = compactMeta[3];\n            }\n            if (BUILD.reflect) {\n                cmpMeta.$attrsToReflect$ = [];\n            }\n            if (BUILD.watchCallback) {\n                cmpMeta.$watchers$ = {};\n            }\n            if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                cmpMeta.$flags$ |= 8 /* CMP_FLAGS.needsShadowDomShim */;\n            }\n            const tagName = BUILD.transformTagName && options.transformTagName\n                ? options.transformTagName(cmpMeta.$tagName$)\n                : cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (BUILD.shadowDom && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        if (supportsShadow) {\n                            if (BUILD.shadowDelegatesFocus) {\n                                self.attachShadow({\n                                    mode: 'open',\n                                    delegatesFocus: !!(cmpMeta.$flags$ & 16 /* CMP_FLAGS.shadowDelegatesFocus */),\n                                });\n                            }\n                            else {\n                                self.attachShadow({ mode: 'open' });\n                            }\n                        }\n                        else if (!BUILD.hydrateServerSide && !('shadowRoot' in self)) {\n                            self.shadowRoot = self;\n                        }\n                    }\n                    if (BUILD.slotChildNodesFix) {\n                        patchChildSlotNodes(self, cmpMeta);\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            if (BUILD.cloneNodeFix) {\n                patchCloneNode(HostElement.prototype);\n            }\n            if (BUILD.appendChildSlotFix) {\n                patchSlotAppendChild(HostElement.prototype);\n            }\n            if (BUILD.hotModuleReplacement) {\n                HostElement.prototype['s-hmr'] = function (hmrVersionId) {\n                    hmrStart(this, cmpMeta, hmrVersionId);\n                };\n            }\n            if (BUILD.scopedSlotTextContentFix) {\n                patchTextContent(HostElement.prototype, cmpMeta);\n            }\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */));\n            }\n        });\n    });\n    if (BUILD.invisiblePrehydration && (BUILD.hydratedClass || BUILD.hydratedAttribute)) {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        if (BUILD.profile) {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30, 'timeout')));\n        }\n        else {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst getConnect = (_ref, tagName) => {\n    const componentOnReady = () => {\n        let elm = doc.querySelector(tagName);\n        if (!elm) {\n            elm = doc.createElement(tagName);\n            doc.body.appendChild(elm);\n        }\n        return typeof elm.componentOnReady === 'function' ? elm.componentOnReady() : Promise.resolve(elm);\n    };\n    const create = (...args) => {\n        return componentOnReady().then((el) => el.create(...args));\n    };\n    return {\n        create,\n        componentOnReady,\n    };\n};\nconst getContext = (_elm, context) => {\n    if (context in Context) {\n        return Context[context];\n    }\n    else if (context === 'window') {\n        return win;\n    }\n    else if (context === 'document') {\n        return doc;\n    }\n    else if (context === 'isServer' || context === 'isPrerender') {\n        return BUILD.hydrateServerSide ? true : false;\n    }\n    else if (context === 'isClient') {\n        return BUILD.hydrateServerSide ? false : true;\n    }\n    else if (context === 'resourcesUrl' || context === 'publicPath') {\n        return getAssetPath('.');\n    }\n    else if (context === 'queue') {\n        return {\n            write: writeTask,\n            read: readTask,\n            tick: {\n                then(cb) {\n                    return nextTick(cb);\n                },\n            },\n        };\n    }\n    return undefined;\n};\nconst Fragment = (_, children) => children;\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n    if (BUILD.hostListener && listeners) {\n        // this is called immediately within the element's constructor\n        // initialize our event listeners on the host element\n        // we do this now so that we can listen to events that may\n        // have fired even before the instance is ready\n        if (BUILD.hostListenerTargetParent) {\n            // this component may have event listeners that should be attached to the parent\n            if (attachParentListeners) {\n                // this is being ran from within the connectedCallback\n                // which is important so that we know the host element actually has a parent element\n                // filter out the listeners to only have the ones that ARE being attached to the parent\n                listeners = listeners.filter(([flags]) => flags & 32 /* LISTENER_FLAGS.TargetParent */);\n            }\n            else {\n                // this is being ran from within the component constructor\n                // everything BUT the parent element listeners should be attached at this time\n                // filter out the listeners that are NOT being attached to the parent\n                listeners = listeners.filter(([flags]) => !(flags & 32 /* LISTENER_FLAGS.TargetParent */));\n            }\n        }\n        listeners.map(([flags, name, method]) => {\n            const target = BUILD.hostListenerTarget ? getHostListenerTarget(elm, flags) : elm;\n            const handler = hostListenerProxy(hostRef, method);\n            const opts = hostListenerOpts(flags);\n            plt.ael(target, name, handler, opts);\n            (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n        });\n    }\n};\nconst hostListenerProxy = (hostRef, methodName) => (ev) => {\n    try {\n        if (BUILD.lazyLoad) {\n            if (hostRef.$flags$ & 256 /* HOST_FLAGS.isListenReady */) {\n                // instance is ready, let's call it's member method for this event\n                hostRef.$lazyInstance$[methodName](ev);\n            }\n            else {\n                (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n            }\n        }\n        else {\n            hostRef.$hostElement$[methodName](ev);\n        }\n    }\n    catch (e) {\n        consoleError(e);\n    }\n};\nconst getHostListenerTarget = (elm, flags) => {\n    if (BUILD.hostListenerTargetDocument && flags & 4 /* LISTENER_FLAGS.TargetDocument */)\n        return doc;\n    if (BUILD.hostListenerTargetWindow && flags & 8 /* LISTENER_FLAGS.TargetWindow */)\n        return win;\n    if (BUILD.hostListenerTargetBody && flags & 16 /* LISTENER_FLAGS.TargetBody */)\n        return doc.body;\n    if (BUILD.hostListenerTargetParent && flags & 32 /* LISTENER_FLAGS.TargetParent */)\n        return elm.parentElement;\n    return elm;\n};\n// prettier-ignore\nconst hostListenerOpts = (flags) => supportsListenerOptions\n    ? ({\n        passive: (flags & 1 /* LISTENER_FLAGS.Passive */) !== 0,\n        capture: (flags & 2 /* LISTENER_FLAGS.Capture */) !== 0,\n    })\n    : (flags & 2 /* LISTENER_FLAGS.Capture */) !== 0;\nconst setPlatformOptions = (opts) => Object.assign(plt, opts);\nconst insertVdomAnnotations = (doc, staticComponents) => {\n    if (doc != null) {\n        const docData = {\n            hostIds: 0,\n            rootLevelIds: 0,\n            staticComponents: new Set(staticComponents),\n        };\n        const orgLocationNodes = [];\n        parseVNodeAnnotations(doc, doc.body, docData, orgLocationNodes);\n        orgLocationNodes.forEach((orgLocationNode) => {\n            if (orgLocationNode != null) {\n                const nodeRef = orgLocationNode['s-nr'];\n                let hostId = nodeRef['s-host-id'];\n                let nodeId = nodeRef['s-node-id'];\n                let childId = `${hostId}.${nodeId}`;\n                if (hostId == null) {\n                    hostId = 0;\n                    docData.rootLevelIds++;\n                    nodeId = docData.rootLevelIds;\n                    childId = `${hostId}.${nodeId}`;\n                    if (nodeRef.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n                        nodeRef.setAttribute(HYDRATE_CHILD_ID, childId);\n                    }\n                    else if (nodeRef.nodeType === 3 /* NODE_TYPE.TextNode */) {\n                        if (hostId === 0) {\n                            const textContent = nodeRef.nodeValue.trim();\n                            if (textContent === '') {\n                                // useless whitespace node at the document root\n                                orgLocationNode.remove();\n                                return;\n                            }\n                        }\n                        const commentBeforeTextNode = doc.createComment(childId);\n                        commentBeforeTextNode.nodeValue = `${TEXT_NODE_ID}.${childId}`;\n                        nodeRef.parentNode.insertBefore(commentBeforeTextNode, nodeRef);\n                    }\n                }\n                let orgLocationNodeId = `${ORG_LOCATION_ID}.${childId}`;\n                const orgLocationParentNode = orgLocationNode.parentElement;\n                if (orgLocationParentNode) {\n                    if (orgLocationParentNode['s-en'] === '') {\n                        // ending with a \".\" means that the parent element\n                        // of this node's original location is a SHADOW dom element\n                        // and this node is apart of the root level light dom\n                        orgLocationNodeId += `.`;\n                    }\n                    else if (orgLocationParentNode['s-en'] === 'c') {\n                        // ending with a \".c\" means that the parent element\n                        // of this node's original location is a SCOPED element\n                        // and this node is apart of the root level light dom\n                        orgLocationNodeId += `.c`;\n                    }\n                }\n                orgLocationNode.nodeValue = orgLocationNodeId;\n            }\n        });\n    }\n};\nconst parseVNodeAnnotations = (doc, node, docData, orgLocationNodes) => {\n    if (node == null) {\n        return;\n    }\n    if (node['s-nr'] != null) {\n        orgLocationNodes.push(node);\n    }\n    if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        node.childNodes.forEach((childNode) => {\n            const hostRef = getHostRef(childNode);\n            if (hostRef != null && !docData.staticComponents.has(childNode.nodeName.toLowerCase())) {\n                const cmpData = {\n                    nodeIds: 0,\n                };\n                insertVNodeAnnotations(doc, childNode, hostRef.$vnode$, docData, cmpData);\n            }\n            parseVNodeAnnotations(doc, childNode, docData, orgLocationNodes);\n        });\n    }\n};\nconst insertVNodeAnnotations = (doc, hostElm, vnode, docData, cmpData) => {\n    if (vnode != null) {\n        const hostId = ++docData.hostIds;\n        hostElm.setAttribute(HYDRATE_ID, hostId);\n        if (hostElm['s-cr'] != null) {\n            hostElm['s-cr'].nodeValue = `${CONTENT_REF_ID}.${hostId}`;\n        }\n        if (vnode.$children$ != null) {\n            const depth = 0;\n            vnode.$children$.forEach((vnodeChild, index) => {\n                insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index);\n            });\n        }\n        if (hostElm && vnode && vnode.$elm$ && !hostElm.hasAttribute('c-id')) {\n            const parent = hostElm.parentElement;\n            if (parent && parent.childNodes) {\n                const parentChildNodes = Array.from(parent.childNodes);\n                const comment = parentChildNodes.find((node) => node.nodeType === 8 /* NODE_TYPE.CommentNode */ && node['s-sr']);\n                if (comment) {\n                    const index = parentChildNodes.indexOf(hostElm) - 1;\n                    vnode.$elm$.setAttribute(HYDRATE_CHILD_ID, `${comment['s-host-id']}.${comment['s-node-id']}.0.${index}`);\n                }\n            }\n        }\n    }\n};\nconst insertChildVNodeAnnotations = (doc, vnodeChild, cmpData, hostId, depth, index) => {\n    const childElm = vnodeChild.$elm$;\n    if (childElm == null) {\n        return;\n    }\n    const nodeId = cmpData.nodeIds++;\n    const childId = `${hostId}.${nodeId}.${depth}.${index}`;\n    childElm['s-host-id'] = hostId;\n    childElm['s-node-id'] = nodeId;\n    if (childElm.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        childElm.setAttribute(HYDRATE_CHILD_ID, childId);\n    }\n    else if (childElm.nodeType === 3 /* NODE_TYPE.TextNode */) {\n        const parentNode = childElm.parentNode;\n        const nodeName = parentNode.nodeName;\n        if (nodeName !== 'STYLE' && nodeName !== 'SCRIPT') {\n            const textNodeId = `${TEXT_NODE_ID}.${childId}`;\n            const commentBeforeTextNode = doc.createComment(textNodeId);\n            parentNode.insertBefore(commentBeforeTextNode, childElm);\n        }\n    }\n    else if (childElm.nodeType === 8 /* NODE_TYPE.CommentNode */) {\n        if (childElm['s-sr']) {\n            const slotName = childElm['s-sn'] || '';\n            const slotNodeId = `${SLOT_NODE_ID}.${childId}.${slotName}`;\n            childElm.nodeValue = slotNodeId;\n        }\n    }\n    if (vnodeChild.$children$ != null) {\n        const childDepth = depth + 1;\n        vnodeChild.$children$.forEach((vnode, index) => {\n            insertChildVNodeAnnotations(doc, vnode, cmpData, hostId, childDepth, index);\n        });\n    }\n};\nconst hostRefs = /*@__PURE__*/ new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    if (BUILD.isDev) {\n        hostRef.$renderCount$ = 0;\n    }\n    if (BUILD.method && BUILD.lazyLoad) {\n        hostRef.$onInstancePromise$ = new Promise((r) => (hostRef.$onInstanceResolve$ = r));\n    }\n    if (BUILD.asyncLoading) {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (customError || console.error)(e, el);\nconst STENCIL_DEV_MODE = BUILD.isTesting\n    ? ['STENCIL:'] // E2E testing\n    : [\n        '%cstencil',\n        'color: white;background:#4c47ff;font-weight: bold; font-size:10px; padding:2px 6px; border-radius: 5px',\n    ];\nconst consoleDevError = (...m) => console.error(...STENCIL_DEV_MODE, ...m);\nconst consoleDevWarn = (...m) => console.warn(...STENCIL_DEV_MODE, ...m);\nconst consoleDevInfo = (...m) => console.info(...STENCIL_DEV_MODE, ...m);\nconst setErrorHandler = (handler) => (customError = handler);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    if (BUILD.isDev && typeof bundleId !== 'string') {\n        consoleDevError(`Trying to lazily load component <${cmpMeta.$tagName$}> with style mode \"${hostRef.$modeName$}\", but it does not exist.`);\n        return undefined;\n    }\n    const module = !BUILD.hotModuleReplacement ? cmpModules.get(bundleId) : false;\n    if (module) {\n        return module[exportName];\n    }\n    /*!__STENCIL_STATIC_IMPORT_SWITCH__*/\n    return import(\n    /* @vite-ignore */\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${BUILD.hotModuleReplacement && hmrVersionId ? '?s-hmr=' + hmrVersionId : ''}`).then((importedModule) => {\n        if (!BUILD.hotModuleReplacement) {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = /*@__PURE__*/ new Map();\nconst modeResolutionChain = [];\nconst win = typeof window !== 'undefined' ? window : {};\nconst CSS = BUILD.cssVarShim ? win.CSS : null;\nconst doc = win.document || { head: {} };\nconst H = (win.HTMLElement || class {\n});\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst setPlatformHelpers = (helpers) => {\n    Object.assign(plt, helpers);\n};\nconst supportsShadow = BUILD.shadowDomShim && BUILD.shadowDom\n    ? /*@__PURE__*/ (() => (doc.head.attachShadow + '').indexOf('[native') > -1)()\n    : true;\nconst supportsListenerOptions = /*@__PURE__*/ (() => {\n    let supportsListenerOptions = false;\n    try {\n        doc.addEventListener('e', null, Object.defineProperty({}, 'passive', {\n            get() {\n                supportsListenerOptions = true;\n            },\n        }));\n    }\n    catch (e) { }\n    return supportsListenerOptions;\n})();\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructableStylesheets = BUILD.constructableCSS\n    ? /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replaceSync === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    : false;\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueDomWritesLow = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* PLATFORM_FLAGS.queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst consumeTimeout = (queue, timeout) => {\n    let i = 0;\n    let ts = 0;\n    while (i < queue.length && (ts = performance.now()) < timeout) {\n        try {\n            queue[i++](ts);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    if (i === queue.length) {\n        queue.length = 0;\n    }\n    else if (i !== 0) {\n        queue.splice(0, i);\n    }\n};\nconst flush = () => {\n    if (BUILD.asyncQueue) {\n        queueCongestion++;\n    }\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    if (BUILD.asyncQueue) {\n        const timeout = (plt.$flags$ & 6 /* PLATFORM_FLAGS.queueMask */) === 2 /* PLATFORM_FLAGS.appLoaded */\n            ? performance.now() + 14 * Math.ceil(queueCongestion * (1.0 / 10.0))\n            : Infinity;\n        consumeTimeout(queueDomWrites, timeout);\n        consumeTimeout(queueDomWritesLow, timeout);\n        if (queueDomWrites.length > 0) {\n            queueDomWritesLow.push(...queueDomWrites);\n            queueDomWrites.length = 0;\n        }\n        if ((queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n        else {\n            queueCongestion = 0;\n        }\n    }\n    else {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst readTask = /*@__PURE__*/ queueTask(queueDomReads, false);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\nexport { BUILD, Env, NAMESPACE } from '@stencil/core/internal/app-data';\nexport { Build, CSS, Context, Fragment, H, H as HTMLElement, Host, STENCIL_DEV_MODE, addHostEventListeners, bootstrapLazy, cmpModules, connectedCallback, consoleDevError, consoleDevInfo, consoleDevWarn, consoleError, createEvent, defineCustomElement, disconnectedCallback, doc, forceModeUpdate, forceUpdate, getAssetPath, getConnect, getContext, getElement, getHostRef, getMode, getRenderingRef, getValue, h, insertVdomAnnotations, isMemberInElement, loadModule, modeResolutionChain, nextTick, parsePropertyValue, plt, postUpdateComponent, promiseResolve, proxyComponent, proxyCustomElement, readTask, registerHost, registerInstance, renderVdom, setAssetPath, setErrorHandler, setMode, setPlatformHelpers, setPlatformOptions, setValue, styles, supportsConstructableStylesheets, supportsListenerOptions, supportsShadow, win, writeTask };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}