{"ast":null,"code":"import * as English from \"./english.js\";\nimport * as Formats from \"./formats.js\";\nimport { padStart } from \"./util.js\";\n\nfunction stringifyTokens(splits, tokenToString) {\n  let s = \"\";\n\n  for (const token of splits) {\n    if (token.literal) {\n      s += token.val;\n    } else {\n      s += tokenToString(token.val);\n    }\n  }\n\n  return s;\n}\n\nconst macroTokenToFormatOpts = {\n  D: Formats.DATE_SHORT,\n  DD: Formats.DATE_MED,\n  DDD: Formats.DATE_FULL,\n  DDDD: Formats.DATE_HUGE,\n  t: Formats.TIME_SIMPLE,\n  tt: Formats.TIME_WITH_SECONDS,\n  ttt: Formats.TIME_WITH_SHORT_OFFSET,\n  tttt: Formats.TIME_WITH_LONG_OFFSET,\n  T: Formats.TIME_24_SIMPLE,\n  TT: Formats.TIME_24_WITH_SECONDS,\n  TTT: Formats.TIME_24_WITH_SHORT_OFFSET,\n  TTTT: Formats.TIME_24_WITH_LONG_OFFSET,\n  f: Formats.DATETIME_SHORT,\n  ff: Formats.DATETIME_MED,\n  fff: Formats.DATETIME_FULL,\n  ffff: Formats.DATETIME_HUGE,\n  F: Formats.DATETIME_SHORT_WITH_SECONDS,\n  FF: Formats.DATETIME_MED_WITH_SECONDS,\n  FFF: Formats.DATETIME_FULL_WITH_SECONDS,\n  FFFF: Formats.DATETIME_HUGE_WITH_SECONDS\n};\n/**\n * @private\n */\n\nexport default class Formatter {\n  static create(locale, opts = {}) {\n    return new Formatter(locale, opts);\n  }\n\n  static parseFormat(fmt) {\n    let current = null,\n        currentFull = \"\",\n        bracketed = false;\n    const splits = [];\n\n    for (let i = 0; i < fmt.length; i++) {\n      const c = fmt.charAt(i);\n\n      if (c === \"'\") {\n        if (currentFull.length > 0) {\n          splits.push({\n            literal: bracketed,\n            val: currentFull\n          });\n        }\n\n        current = null;\n        currentFull = \"\";\n        bracketed = !bracketed;\n      } else if (bracketed) {\n        currentFull += c;\n      } else if (c === current) {\n        currentFull += c;\n      } else {\n        if (currentFull.length > 0) {\n          splits.push({\n            literal: false,\n            val: currentFull\n          });\n        }\n\n        currentFull = c;\n        current = c;\n      }\n    }\n\n    if (currentFull.length > 0) {\n      splits.push({\n        literal: bracketed,\n        val: currentFull\n      });\n    }\n\n    return splits;\n  }\n\n  static macroTokenToFormatOpts(token) {\n    return macroTokenToFormatOpts[token];\n  }\n\n  constructor(locale, formatOpts) {\n    this.opts = formatOpts;\n    this.loc = locale;\n    this.systemLoc = null;\n  }\n\n  formatWithSystemDefault(dt, opts) {\n    if (this.systemLoc === null) {\n      this.systemLoc = this.loc.redefaultToSystem();\n    }\n\n    const df = this.systemLoc.dtFormatter(dt, { ...this.opts,\n      ...opts\n    });\n    return df.format();\n  }\n\n  formatDateTime(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, { ...this.opts,\n      ...opts\n    });\n    return df.format();\n  }\n\n  formatDateTimeParts(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, { ...this.opts,\n      ...opts\n    });\n    return df.formatToParts();\n  }\n\n  resolvedOptions(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, { ...this.opts,\n      ...opts\n    });\n    return df.resolvedOptions();\n  }\n\n  num(n, p = 0) {\n    // we get some perf out of doing this here, annoyingly\n    if (this.opts.forceSimple) {\n      return padStart(n, p);\n    }\n\n    const opts = { ...this.opts\n    };\n\n    if (p > 0) {\n      opts.padTo = p;\n    }\n\n    return this.loc.numberFormatter(opts).format(n);\n  }\n\n  formatDateTimeFromString(dt, fmt) {\n    const knownEnglish = this.loc.listingMode() === \"en\",\n          useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== \"gregory\",\n          string = (opts, extract) => this.loc.extract(dt, opts, extract),\n          formatOffset = opts => {\n      if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\n        return \"Z\";\n      }\n\n      return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : \"\";\n    },\n          meridiem = () => knownEnglish ? English.meridiemForDateTime(dt) : string({\n      hour: \"numeric\",\n      hourCycle: \"h12\"\n    }, \"dayperiod\"),\n          month = (length, standalone) => knownEnglish ? English.monthForDateTime(dt, length) : string(standalone ? {\n      month: length\n    } : {\n      month: length,\n      day: \"numeric\"\n    }, \"month\"),\n          weekday = (length, standalone) => knownEnglish ? English.weekdayForDateTime(dt, length) : string(standalone ? {\n      weekday: length\n    } : {\n      weekday: length,\n      month: \"long\",\n      day: \"numeric\"\n    }, \"weekday\"),\n          maybeMacro = token => {\n      const formatOpts = Formatter.macroTokenToFormatOpts(token);\n\n      if (formatOpts) {\n        return this.formatWithSystemDefault(dt, formatOpts);\n      } else {\n        return token;\n      }\n    },\n          era = length => knownEnglish ? English.eraForDateTime(dt, length) : string({\n      era: length\n    }, \"era\"),\n          tokenToString = token => {\n      // Where possible: http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles\n      switch (token) {\n        // ms\n        case \"S\":\n          return this.num(dt.millisecond);\n\n        case \"u\": // falls through\n\n        case \"SSS\":\n          return this.num(dt.millisecond, 3);\n        // seconds\n\n        case \"s\":\n          return this.num(dt.second);\n\n        case \"ss\":\n          return this.num(dt.second, 2);\n        // fractional seconds\n\n        case \"uu\":\n          return this.num(Math.floor(dt.millisecond / 10), 2);\n\n        case \"uuu\":\n          return this.num(Math.floor(dt.millisecond / 100));\n        // minutes\n\n        case \"m\":\n          return this.num(dt.minute);\n\n        case \"mm\":\n          return this.num(dt.minute, 2);\n        // hours\n\n        case \"h\":\n          return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);\n\n        case \"hh\":\n          return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);\n\n        case \"H\":\n          return this.num(dt.hour);\n\n        case \"HH\":\n          return this.num(dt.hour, 2);\n        // offset\n\n        case \"Z\":\n          // like +6\n          return formatOffset({\n            format: \"narrow\",\n            allowZ: this.opts.allowZ\n          });\n\n        case \"ZZ\":\n          // like +06:00\n          return formatOffset({\n            format: \"short\",\n            allowZ: this.opts.allowZ\n          });\n\n        case \"ZZZ\":\n          // like +0600\n          return formatOffset({\n            format: \"techie\",\n            allowZ: this.opts.allowZ\n          });\n\n        case \"ZZZZ\":\n          // like EST\n          return dt.zone.offsetName(dt.ts, {\n            format: \"short\",\n            locale: this.loc.locale\n          });\n\n        case \"ZZZZZ\":\n          // like Eastern Standard Time\n          return dt.zone.offsetName(dt.ts, {\n            format: \"long\",\n            locale: this.loc.locale\n          });\n        // zone\n\n        case \"z\":\n          // like America/New_York\n          return dt.zoneName;\n        // meridiems\n\n        case \"a\":\n          return meridiem();\n        // dates\n\n        case \"d\":\n          return useDateTimeFormatter ? string({\n            day: \"numeric\"\n          }, \"day\") : this.num(dt.day);\n\n        case \"dd\":\n          return useDateTimeFormatter ? string({\n            day: \"2-digit\"\n          }, \"day\") : this.num(dt.day, 2);\n        // weekdays - standalone\n\n        case \"c\":\n          // like 1\n          return this.num(dt.weekday);\n\n        case \"ccc\":\n          // like 'Tues'\n          return weekday(\"short\", true);\n\n        case \"cccc\":\n          // like 'Tuesday'\n          return weekday(\"long\", true);\n\n        case \"ccccc\":\n          // like 'T'\n          return weekday(\"narrow\", true);\n        // weekdays - format\n\n        case \"E\":\n          // like 1\n          return this.num(dt.weekday);\n\n        case \"EEE\":\n          // like 'Tues'\n          return weekday(\"short\", false);\n\n        case \"EEEE\":\n          // like 'Tuesday'\n          return weekday(\"long\", false);\n\n        case \"EEEEE\":\n          // like 'T'\n          return weekday(\"narrow\", false);\n        // months - standalone\n\n        case \"L\":\n          // like 1\n          return useDateTimeFormatter ? string({\n            month: \"numeric\",\n            day: \"numeric\"\n          }, \"month\") : this.num(dt.month);\n\n        case \"LL\":\n          // like 01, doesn't seem to work\n          return useDateTimeFormatter ? string({\n            month: \"2-digit\",\n            day: \"numeric\"\n          }, \"month\") : this.num(dt.month, 2);\n\n        case \"LLL\":\n          // like Jan\n          return month(\"short\", true);\n\n        case \"LLLL\":\n          // like January\n          return month(\"long\", true);\n\n        case \"LLLLL\":\n          // like J\n          return month(\"narrow\", true);\n        // months - format\n\n        case \"M\":\n          // like 1\n          return useDateTimeFormatter ? string({\n            month: \"numeric\"\n          }, \"month\") : this.num(dt.month);\n\n        case \"MM\":\n          // like 01\n          return useDateTimeFormatter ? string({\n            month: \"2-digit\"\n          }, \"month\") : this.num(dt.month, 2);\n\n        case \"MMM\":\n          // like Jan\n          return month(\"short\", false);\n\n        case \"MMMM\":\n          // like January\n          return month(\"long\", false);\n\n        case \"MMMMM\":\n          // like J\n          return month(\"narrow\", false);\n        // years\n\n        case \"y\":\n          // like 2014\n          return useDateTimeFormatter ? string({\n            year: \"numeric\"\n          }, \"year\") : this.num(dt.year);\n\n        case \"yy\":\n          // like 14\n          return useDateTimeFormatter ? string({\n            year: \"2-digit\"\n          }, \"year\") : this.num(dt.year.toString().slice(-2), 2);\n\n        case \"yyyy\":\n          // like 0012\n          return useDateTimeFormatter ? string({\n            year: \"numeric\"\n          }, \"year\") : this.num(dt.year, 4);\n\n        case \"yyyyyy\":\n          // like 000012\n          return useDateTimeFormatter ? string({\n            year: \"numeric\"\n          }, \"year\") : this.num(dt.year, 6);\n        // eras\n\n        case \"G\":\n          // like AD\n          return era(\"short\");\n\n        case \"GG\":\n          // like Anno Domini\n          return era(\"long\");\n\n        case \"GGGGG\":\n          return era(\"narrow\");\n\n        case \"kk\":\n          return this.num(dt.weekYear.toString().slice(-2), 2);\n\n        case \"kkkk\":\n          return this.num(dt.weekYear, 4);\n\n        case \"W\":\n          return this.num(dt.weekNumber);\n\n        case \"WW\":\n          return this.num(dt.weekNumber, 2);\n\n        case \"o\":\n          return this.num(dt.ordinal);\n\n        case \"ooo\":\n          return this.num(dt.ordinal, 3);\n\n        case \"q\":\n          // like 1\n          return this.num(dt.quarter);\n\n        case \"qq\":\n          // like 01\n          return this.num(dt.quarter, 2);\n\n        case \"X\":\n          return this.num(Math.floor(dt.ts / 1000));\n\n        case \"x\":\n          return this.num(dt.ts);\n\n        default:\n          return maybeMacro(token);\n      }\n    };\n\n    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\n  }\n\n  formatDurationFromString(dur, fmt) {\n    const tokenToField = token => {\n      switch (token[0]) {\n        case \"S\":\n          return \"millisecond\";\n\n        case \"s\":\n          return \"second\";\n\n        case \"m\":\n          return \"minute\";\n\n        case \"h\":\n          return \"hour\";\n\n        case \"d\":\n          return \"day\";\n\n        case \"w\":\n          return \"week\";\n\n        case \"M\":\n          return \"month\";\n\n        case \"y\":\n          return \"year\";\n\n        default:\n          return null;\n      }\n    },\n          tokenToString = lildur => token => {\n      const mapped = tokenToField(token);\n\n      if (mapped) {\n        return this.num(lildur.get(mapped), token.length);\n      } else {\n        return token;\n      }\n    },\n          tokens = Formatter.parseFormat(fmt),\n          realTokens = tokens.reduce((found, {\n      literal,\n      val\n    }) => literal ? found : found.concat(val), []),\n          collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter(t => t));\n\n    return stringifyTokens(tokens, tokenToString(collapsed));\n  }\n\n}","map":{"version":3,"names":["English","Formats","padStart","stringifyTokens","splits","tokenToString","s","token","literal","val","macroTokenToFormatOpts","D","DATE_SHORT","DD","DATE_MED","DDD","DATE_FULL","DDDD","DATE_HUGE","t","TIME_SIMPLE","tt","TIME_WITH_SECONDS","ttt","TIME_WITH_SHORT_OFFSET","tttt","TIME_WITH_LONG_OFFSET","T","TIME_24_SIMPLE","TT","TIME_24_WITH_SECONDS","TTT","TIME_24_WITH_SHORT_OFFSET","TTTT","TIME_24_WITH_LONG_OFFSET","f","DATETIME_SHORT","ff","DATETIME_MED","fff","DATETIME_FULL","ffff","DATETIME_HUGE","F","DATETIME_SHORT_WITH_SECONDS","FF","DATETIME_MED_WITH_SECONDS","FFF","DATETIME_FULL_WITH_SECONDS","FFFF","DATETIME_HUGE_WITH_SECONDS","Formatter","create","locale","opts","parseFormat","fmt","current","currentFull","bracketed","i","length","c","charAt","push","constructor","formatOpts","loc","systemLoc","formatWithSystemDefault","dt","redefaultToSystem","df","dtFormatter","format","formatDateTime","formatDateTimeParts","formatToParts","resolvedOptions","num","n","p","forceSimple","padTo","numberFormatter","formatDateTimeFromString","knownEnglish","listingMode","useDateTimeFormatter","outputCalendar","string","extract","formatOffset","isOffsetFixed","offset","allowZ","isValid","zone","ts","meridiem","meridiemForDateTime","hour","hourCycle","month","standalone","monthForDateTime","day","weekday","weekdayForDateTime","maybeMacro","era","eraForDateTime","millisecond","second","Math","floor","minute","offsetName","zoneName","year","toString","slice","weekYear","weekNumber","ordinal","quarter","formatDurationFromString","dur","tokenToField","lildur","mapped","get","tokens","realTokens","reduce","found","concat","collapsed","shiftTo","map","filter"],"sources":["E:/各个学科/论文/毕业论文/Atmosphere/eco-friendly/node_modules/luxon/src/impl/formatter.js"],"sourcesContent":["import * as English from \"./english.js\";\nimport * as Formats from \"./formats.js\";\nimport { padStart } from \"./util.js\";\n\nfunction stringifyTokens(splits, tokenToString) {\n  let s = \"\";\n  for (const token of splits) {\n    if (token.literal) {\n      s += token.val;\n    } else {\n      s += tokenToString(token.val);\n    }\n  }\n  return s;\n}\n\nconst macroTokenToFormatOpts = {\n  D: Formats.DATE_SHORT,\n  DD: Formats.DATE_MED,\n  DDD: Formats.DATE_FULL,\n  DDDD: Formats.DATE_HUGE,\n  t: Formats.TIME_SIMPLE,\n  tt: Formats.TIME_WITH_SECONDS,\n  ttt: Formats.TIME_WITH_SHORT_OFFSET,\n  tttt: Formats.TIME_WITH_LONG_OFFSET,\n  T: Formats.TIME_24_SIMPLE,\n  TT: Formats.TIME_24_WITH_SECONDS,\n  TTT: Formats.TIME_24_WITH_SHORT_OFFSET,\n  TTTT: Formats.TIME_24_WITH_LONG_OFFSET,\n  f: Formats.DATETIME_SHORT,\n  ff: Formats.DATETIME_MED,\n  fff: Formats.DATETIME_FULL,\n  ffff: Formats.DATETIME_HUGE,\n  F: Formats.DATETIME_SHORT_WITH_SECONDS,\n  FF: Formats.DATETIME_MED_WITH_SECONDS,\n  FFF: Formats.DATETIME_FULL_WITH_SECONDS,\n  FFFF: Formats.DATETIME_HUGE_WITH_SECONDS,\n};\n\n/**\n * @private\n */\n\nexport default class Formatter {\n  static create(locale, opts = {}) {\n    return new Formatter(locale, opts);\n  }\n\n  static parseFormat(fmt) {\n    let current = null,\n      currentFull = \"\",\n      bracketed = false;\n    const splits = [];\n    for (let i = 0; i < fmt.length; i++) {\n      const c = fmt.charAt(i);\n      if (c === \"'\") {\n        if (currentFull.length > 0) {\n          splits.push({ literal: bracketed, val: currentFull });\n        }\n        current = null;\n        currentFull = \"\";\n        bracketed = !bracketed;\n      } else if (bracketed) {\n        currentFull += c;\n      } else if (c === current) {\n        currentFull += c;\n      } else {\n        if (currentFull.length > 0) {\n          splits.push({ literal: false, val: currentFull });\n        }\n        currentFull = c;\n        current = c;\n      }\n    }\n\n    if (currentFull.length > 0) {\n      splits.push({ literal: bracketed, val: currentFull });\n    }\n\n    return splits;\n  }\n\n  static macroTokenToFormatOpts(token) {\n    return macroTokenToFormatOpts[token];\n  }\n\n  constructor(locale, formatOpts) {\n    this.opts = formatOpts;\n    this.loc = locale;\n    this.systemLoc = null;\n  }\n\n  formatWithSystemDefault(dt, opts) {\n    if (this.systemLoc === null) {\n      this.systemLoc = this.loc.redefaultToSystem();\n    }\n    const df = this.systemLoc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.format();\n  }\n\n  formatDateTime(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.format();\n  }\n\n  formatDateTimeParts(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.formatToParts();\n  }\n\n  resolvedOptions(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.resolvedOptions();\n  }\n\n  num(n, p = 0) {\n    // we get some perf out of doing this here, annoyingly\n    if (this.opts.forceSimple) {\n      return padStart(n, p);\n    }\n\n    const opts = { ...this.opts };\n\n    if (p > 0) {\n      opts.padTo = p;\n    }\n\n    return this.loc.numberFormatter(opts).format(n);\n  }\n\n  formatDateTimeFromString(dt, fmt) {\n    const knownEnglish = this.loc.listingMode() === \"en\",\n      useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== \"gregory\",\n      string = (opts, extract) => this.loc.extract(dt, opts, extract),\n      formatOffset = (opts) => {\n        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\n          return \"Z\";\n        }\n\n        return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : \"\";\n      },\n      meridiem = () =>\n        knownEnglish\n          ? English.meridiemForDateTime(dt)\n          : string({ hour: \"numeric\", hourCycle: \"h12\" }, \"dayperiod\"),\n      month = (length, standalone) =>\n        knownEnglish\n          ? English.monthForDateTime(dt, length)\n          : string(standalone ? { month: length } : { month: length, day: \"numeric\" }, \"month\"),\n      weekday = (length, standalone) =>\n        knownEnglish\n          ? English.weekdayForDateTime(dt, length)\n          : string(\n              standalone ? { weekday: length } : { weekday: length, month: \"long\", day: \"numeric\" },\n              \"weekday\"\n            ),\n      maybeMacro = (token) => {\n        const formatOpts = Formatter.macroTokenToFormatOpts(token);\n        if (formatOpts) {\n          return this.formatWithSystemDefault(dt, formatOpts);\n        } else {\n          return token;\n        }\n      },\n      era = (length) =>\n        knownEnglish ? English.eraForDateTime(dt, length) : string({ era: length }, \"era\"),\n      tokenToString = (token) => {\n        // Where possible: http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles\n        switch (token) {\n          // ms\n          case \"S\":\n            return this.num(dt.millisecond);\n          case \"u\":\n          // falls through\n          case \"SSS\":\n            return this.num(dt.millisecond, 3);\n          // seconds\n          case \"s\":\n            return this.num(dt.second);\n          case \"ss\":\n            return this.num(dt.second, 2);\n          // fractional seconds\n          case \"uu\":\n            return this.num(Math.floor(dt.millisecond / 10), 2);\n          case \"uuu\":\n            return this.num(Math.floor(dt.millisecond / 100));\n          // minutes\n          case \"m\":\n            return this.num(dt.minute);\n          case \"mm\":\n            return this.num(dt.minute, 2);\n          // hours\n          case \"h\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);\n          case \"hh\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);\n          case \"H\":\n            return this.num(dt.hour);\n          case \"HH\":\n            return this.num(dt.hour, 2);\n          // offset\n          case \"Z\":\n            // like +6\n            return formatOffset({ format: \"narrow\", allowZ: this.opts.allowZ });\n          case \"ZZ\":\n            // like +06:00\n            return formatOffset({ format: \"short\", allowZ: this.opts.allowZ });\n          case \"ZZZ\":\n            // like +0600\n            return formatOffset({ format: \"techie\", allowZ: this.opts.allowZ });\n          case \"ZZZZ\":\n            // like EST\n            return dt.zone.offsetName(dt.ts, { format: \"short\", locale: this.loc.locale });\n          case \"ZZZZZ\":\n            // like Eastern Standard Time\n            return dt.zone.offsetName(dt.ts, { format: \"long\", locale: this.loc.locale });\n          // zone\n          case \"z\":\n            // like America/New_York\n            return dt.zoneName;\n          // meridiems\n          case \"a\":\n            return meridiem();\n          // dates\n          case \"d\":\n            return useDateTimeFormatter ? string({ day: \"numeric\" }, \"day\") : this.num(dt.day);\n          case \"dd\":\n            return useDateTimeFormatter ? string({ day: \"2-digit\" }, \"day\") : this.num(dt.day, 2);\n          // weekdays - standalone\n          case \"c\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"ccc\":\n            // like 'Tues'\n            return weekday(\"short\", true);\n          case \"cccc\":\n            // like 'Tuesday'\n            return weekday(\"long\", true);\n          case \"ccccc\":\n            // like 'T'\n            return weekday(\"narrow\", true);\n          // weekdays - format\n          case \"E\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"EEE\":\n            // like 'Tues'\n            return weekday(\"short\", false);\n          case \"EEEE\":\n            // like 'Tuesday'\n            return weekday(\"long\", false);\n          case \"EEEEE\":\n            // like 'T'\n            return weekday(\"narrow\", false);\n          // months - standalone\n          case \"L\":\n            // like 1\n            return useDateTimeFormatter\n              ? string({ month: \"numeric\", day: \"numeric\" }, \"month\")\n              : this.num(dt.month);\n          case \"LL\":\n            // like 01, doesn't seem to work\n            return useDateTimeFormatter\n              ? string({ month: \"2-digit\", day: \"numeric\" }, \"month\")\n              : this.num(dt.month, 2);\n          case \"LLL\":\n            // like Jan\n            return month(\"short\", true);\n          case \"LLLL\":\n            // like January\n            return month(\"long\", true);\n          case \"LLLLL\":\n            // like J\n            return month(\"narrow\", true);\n          // months - format\n          case \"M\":\n            // like 1\n            return useDateTimeFormatter\n              ? string({ month: \"numeric\" }, \"month\")\n              : this.num(dt.month);\n          case \"MM\":\n            // like 01\n            return useDateTimeFormatter\n              ? string({ month: \"2-digit\" }, \"month\")\n              : this.num(dt.month, 2);\n          case \"MMM\":\n            // like Jan\n            return month(\"short\", false);\n          case \"MMMM\":\n            // like January\n            return month(\"long\", false);\n          case \"MMMMM\":\n            // like J\n            return month(\"narrow\", false);\n          // years\n          case \"y\":\n            // like 2014\n            return useDateTimeFormatter ? string({ year: \"numeric\" }, \"year\") : this.num(dt.year);\n          case \"yy\":\n            // like 14\n            return useDateTimeFormatter\n              ? string({ year: \"2-digit\" }, \"year\")\n              : this.num(dt.year.toString().slice(-2), 2);\n          case \"yyyy\":\n            // like 0012\n            return useDateTimeFormatter\n              ? string({ year: \"numeric\" }, \"year\")\n              : this.num(dt.year, 4);\n          case \"yyyyyy\":\n            // like 000012\n            return useDateTimeFormatter\n              ? string({ year: \"numeric\" }, \"year\")\n              : this.num(dt.year, 6);\n          // eras\n          case \"G\":\n            // like AD\n            return era(\"short\");\n          case \"GG\":\n            // like Anno Domini\n            return era(\"long\");\n          case \"GGGGG\":\n            return era(\"narrow\");\n          case \"kk\":\n            return this.num(dt.weekYear.toString().slice(-2), 2);\n          case \"kkkk\":\n            return this.num(dt.weekYear, 4);\n          case \"W\":\n            return this.num(dt.weekNumber);\n          case \"WW\":\n            return this.num(dt.weekNumber, 2);\n          case \"o\":\n            return this.num(dt.ordinal);\n          case \"ooo\":\n            return this.num(dt.ordinal, 3);\n          case \"q\":\n            // like 1\n            return this.num(dt.quarter);\n          case \"qq\":\n            // like 01\n            return this.num(dt.quarter, 2);\n          case \"X\":\n            return this.num(Math.floor(dt.ts / 1000));\n          case \"x\":\n            return this.num(dt.ts);\n          default:\n            return maybeMacro(token);\n        }\n      };\n\n    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\n  }\n\n  formatDurationFromString(dur, fmt) {\n    const tokenToField = (token) => {\n        switch (token[0]) {\n          case \"S\":\n            return \"millisecond\";\n          case \"s\":\n            return \"second\";\n          case \"m\":\n            return \"minute\";\n          case \"h\":\n            return \"hour\";\n          case \"d\":\n            return \"day\";\n          case \"w\":\n            return \"week\";\n          case \"M\":\n            return \"month\";\n          case \"y\":\n            return \"year\";\n          default:\n            return null;\n        }\n      },\n      tokenToString = (lildur) => (token) => {\n        const mapped = tokenToField(token);\n        if (mapped) {\n          return this.num(lildur.get(mapped), token.length);\n        } else {\n          return token;\n        }\n      },\n      tokens = Formatter.parseFormat(fmt),\n      realTokens = tokens.reduce(\n        (found, { literal, val }) => (literal ? found : found.concat(val)),\n        []\n      ),\n      collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t) => t));\n    return stringifyTokens(tokens, tokenToString(collapsed));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}