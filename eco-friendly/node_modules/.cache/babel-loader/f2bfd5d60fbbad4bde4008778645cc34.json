{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.25/esri/copyright.txt for details.\n*/\nimport e from \"./TileInfo.js\";\nconst r = {\n  type: e,\n  json: {\n    origins: {\n      service: {\n        read: {\n          source: [\"tileInfo\", \"minScale\", \"maxScale\", \"minLOD\", \"maxLOD\"],\n          reader: n\n        }\n      }\n    }\n  }\n};\n\nfunction n(r, n, l, o) {\n  if (!r) return null;\n  const {\n    minScale: i,\n    maxScale: t,\n    minLOD: m,\n    maxLOD: s\n  } = n;\n  if (null != m && null != s) return o && o.ignoreMinMaxLOD ? e.fromJSON(r) : e.fromJSON({ ...r,\n    lods: r.lods.filter(({\n      level: e\n    }) => null != e && e >= m && e <= s)\n  });\n\n  if (0 !== i && 0 !== t) {\n    const n = e => Math.round(1e4 * e) / 1e4,\n          l = i ? n(i) : 1 / 0,\n          o = t ? n(t) : -1 / 0;\n\n    return e.fromJSON({ ...r,\n      lods: r.lods.filter(e => {\n        const r = n(e.scale);\n        return r <= l && r >= o;\n      })\n    });\n  }\n\n  return e.fromJSON(r);\n}\n\nexport { n as readServiceTileInfo, r as serviceTileInfoProperty };","map":{"version":3,"names":["e","r","type","json","origins","service","read","source","reader","n","l","o","minScale","i","maxScale","t","minLOD","m","maxLOD","s","ignoreMinMaxLOD","fromJSON","lods","filter","level","Math","round","scale","readServiceTileInfo","serviceTileInfoProperty"],"sources":["E:/各个学科/论文/毕业论文/Atmosphere/eco-friendly/node_modules/@arcgis/core/layers/support/serviceTileInfoProperty.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.25/esri/copyright.txt for details.\n*/\nimport e from\"./TileInfo.js\";const r={type:e,json:{origins:{service:{read:{source:[\"tileInfo\",\"minScale\",\"maxScale\",\"minLOD\",\"maxLOD\"],reader:n}}}}};function n(r,n,l,o){if(!r)return null;const{minScale:i,maxScale:t,minLOD:m,maxLOD:s}=n;if(null!=m&&null!=s)return o&&o.ignoreMinMaxLOD?e.fromJSON(r):e.fromJSON({...r,lods:r.lods.filter((({level:e})=>null!=e&&e>=m&&e<=s))});if(0!==i&&0!==t){const n=e=>Math.round(1e4*e)/1e4,l=i?n(i):1/0,o=t?n(t):-1/0;return e.fromJSON({...r,lods:r.lods.filter((e=>{const r=n(e.scale);return r<=l&&r>=o}))})}return e.fromJSON(r)}export{n as readServiceTileInfo,r as serviceTileInfoProperty};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAOA,CAAP,MAAa,eAAb;AAA6B,MAAMC,CAAC,GAAC;EAACC,IAAI,EAACF,CAAN;EAAQG,IAAI,EAAC;IAACC,OAAO,EAAC;MAACC,OAAO,EAAC;QAACC,IAAI,EAAC;UAACC,MAAM,EAAC,CAAC,UAAD,EAAY,UAAZ,EAAuB,UAAvB,EAAkC,QAAlC,EAA2C,QAA3C,CAAR;UAA6DC,MAAM,EAACC;QAApE;MAAN;IAAT;EAAT;AAAb,CAAR;;AAAwH,SAASA,CAAT,CAAWR,CAAX,EAAaQ,CAAb,EAAeC,CAAf,EAAiBC,CAAjB,EAAmB;EAAC,IAAG,CAACV,CAAJ,EAAM,OAAO,IAAP;EAAY,MAAK;IAACW,QAAQ,EAACC,CAAV;IAAYC,QAAQ,EAACC,CAArB;IAAuBC,MAAM,EAACC,CAA9B;IAAgCC,MAAM,EAACC;EAAvC,IAA0CV,CAA/C;EAAiD,IAAG,QAAMQ,CAAN,IAAS,QAAME,CAAlB,EAAoB,OAAOR,CAAC,IAAEA,CAAC,CAACS,eAAL,GAAqBpB,CAAC,CAACqB,QAAF,CAAWpB,CAAX,CAArB,GAAmCD,CAAC,CAACqB,QAAF,CAAW,EAAC,GAAGpB,CAAJ;IAAMqB,IAAI,EAACrB,CAAC,CAACqB,IAAF,CAAOC,MAAP,CAAe,CAAC;MAACC,KAAK,EAACxB;IAAP,CAAD,KAAa,QAAMA,CAAN,IAASA,CAAC,IAAEiB,CAAZ,IAAejB,CAAC,IAAEmB,CAA9C;EAAX,CAAX,CAA1C;;EAAoH,IAAG,MAAIN,CAAJ,IAAO,MAAIE,CAAd,EAAgB;IAAC,MAAMN,CAAC,GAACT,CAAC,IAAEyB,IAAI,CAACC,KAAL,CAAW,MAAI1B,CAAf,IAAkB,GAA7B;IAAA,MAAiCU,CAAC,GAACG,CAAC,GAACJ,CAAC,CAACI,CAAD,CAAF,GAAM,IAAE,CAA5C;IAAA,MAA8CF,CAAC,GAACI,CAAC,GAACN,CAAC,CAACM,CAAD,CAAF,GAAM,CAAC,CAAD,GAAG,CAA1D;;IAA4D,OAAOf,CAAC,CAACqB,QAAF,CAAW,EAAC,GAAGpB,CAAJ;MAAMqB,IAAI,EAACrB,CAAC,CAACqB,IAAF,CAAOC,MAAP,CAAevB,CAAC,IAAE;QAAC,MAAMC,CAAC,GAACQ,CAAC,CAACT,CAAC,CAAC2B,KAAH,CAAT;QAAmB,OAAO1B,CAAC,IAAES,CAAH,IAAMT,CAAC,IAAEU,CAAhB;MAAkB,CAAxD;IAAX,CAAX,CAAP;EAA0F;;EAAA,OAAOX,CAAC,CAACqB,QAAF,CAAWpB,CAAX,CAAP;AAAqB;;AAAA,SAAOQ,CAAC,IAAImB,mBAAZ,EAAgC3B,CAAC,IAAI4B,uBAArC"},"metadata":{},"sourceType":"module"}