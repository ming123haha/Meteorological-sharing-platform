{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\n\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport { deg2rad as e } from \"../../../../../core/mathUtils.js\";\nimport { isSome as t, unwrapOr as s } from \"../../../../../core/maybe.js\";\nimport { createLength as i, createArea as o } from \"../../../../../core/quantityUtils.js\";\nimport { a as r, j as n } from \"../../../../../chunks/vec2.js\";\nimport { a as h } from \"../../../../../chunks/vec2f64.js\";\nimport { n as a, i as d, c as g, f as l, o as p, b as c, e as m, g as u, a as _ } from \"../../../../../chunks/vec3.js\";\nimport { c as C } from \"../../../../../chunks/vec3f64.js\";\nimport { c as f } from \"../../../../../chunks/vec4f64.js\";\nimport { canProjectWithoutEngine as S, canProjectToWGS84ComparableLonLat as L, projectPointToVector as P, projectPointToWGS84ComparableLonLat as R, projectDirection as j, projectVectorToVector as M } from \"../../../../../geometry/projection.js\";\nimport { getSphericalPCPF as A, getReferenceEllipsoid as W } from \"../../../../../geometry/projectionEllipsoid.js\";\nimport v from \"../../../../../geometry/SpatialReference.js\";\nimport { Axis as w } from \"../../../../../geometry/support/Axis.js\";\nimport { segmentIntersects as z } from \"../../../../../geometry/support/intersectsBase.js\";\nimport { areaPoints2d as U } from \"../../../../../geometry/support/triangle.js\";\nimport { MeasurementMode as I } from \"../../interfaces.js\";\nimport { segmentLengthGeodesicVector as G, bestFitPlane as V, fitHemisphere as y, triangleAreaGeodesic as T, planePointDistance as F, boundingSphere as E, segmentLengthGeodesic as N, segmentLengthEuclidean as x } from \"../../support/measurementUtils.js\";\nimport { midpoint as b } from \"../../support/viewUtils.js\";\nimport { getElevationAtPoint as k } from \"../../../support/ElevationProvider.js\";\nimport { makeOrthonormal as q, tangentFrame as D } from \"../../../support/mathUtils.js\";\nimport { triangulate as B } from \"../../../../support/euclideanAreaMeasurementUtils.js\";\n\nclass H {\n  constructor(e, t) {\n    this.positionsWorldCoords = [], this.positionsRenderCoords = [], this.positionsProjectedWorldCoords = [], this.positionsFittedRenderCoords = [], this.positionsGeographic = [], this.positionsSpherical = [], this.positionsStereographic = [], this.pathSegmentLengths = [], this.geodesicPathSegmentLengths = [], this.perimeterSegmentLengths = [], this.intersectingSegments = new Set(), this.geodesicIntersectingSegments = new Set(), this.areaCentroidWorldCoords = C(), this.areaCentroidRenderCoords = C(), this.geodesicAreaCentroidRenderCoords = C(), this._length = 0, this._centroidRenderCoords = C(), this._planeWorldCoords = f(), this._worldUp = C(), this._worldTangent = C(), this._frame = [C(), C(), C()], this._pathVersion = -1, this._validMeasurement = !1, this._hasCursorPoint = !1, this._mode = null, this._tempU = C(), this._tempV = C(), this._tempVec3 = C(), this._tempSphere = {\n      center: C(),\n      radius: 0\n    }, this._sceneView = e, this.unitNormalizer = t;\n  }\n\n  update(e, s, o, r, n, h, d) {\n    const g = this.unitNormalizer,\n          l = this._sceneView.renderSpatialReference,\n          p = this.unitNormalizer.spatialReference,\n          c = t(s);\n\n    if (this._pathVersion === e.version && this._validMeasurement === r && !d && this._hasCursorPoint === c && this._mode === h) {\n      return !e.isValidPolygon && (this._updateCursorSegmentLength(e, s), !0);\n    }\n\n    this._pathVersion = e.version, this._validMeasurement = r, this._hasCursorPoint = c;\n    const m = e.numVertices;\n\n    this._resize(m);\n\n    const u = A(o.spatialReference),\n          _ = S(o.spatialReference, u) && L(o.spatialReference),\n          {\n      positionsGeographic: C,\n      positionsWorldCoords: f,\n      positionsRenderCoords: j,\n      positionsSpherical: M\n    } = this;\n\n    e.forEachVertexPosition((e, t) => {\n      X(o.elevationProvider, e), P(e, f[t], p), P(e, j[t], l), _ && (R(e, C[t]), P(e, M[t], u), a(M[t], M[t]));\n    });\n\n    const W = this._updatePathLengths(r);\n\n    if (this.pathLength = this._length > 1 ? i(g.normalizeDistance(W), \"meters\") : null, _) {\n      const e = this._updateGeodesicPathLengths(r, p);\n\n      this.geodesicPathLength = this._length > 1 ? i(e, \"meters\") : null;\n    } else this.geodesicPathLength = null;\n\n    return this._updateCursorSegmentLength(e, s), this._updateMode(e, h), r ? (this._updateArea(o, g, l, p, n), _ && this._updateGeodesicArea(o), !0) : (this.area = null, this.geodesicArea = null, this.perimeterLength = null, this.triangleIndices = null, this.geodesicTriangleIndices = null, this.intersectingSegments.clear(), this.geodesicIntersectingSegments.clear(), !0);\n  }\n\n  getData() {\n    return {\n      positionsWorldCoords: this.positionsWorldCoords,\n      positionsRenderCoords: this.positionsRenderCoords,\n      positionsProjectedWorldCoords: this.positionsProjectedWorldCoords,\n      positionsFittedRenderCoords: this.positionsFittedRenderCoords,\n      positionsGeographic: this.positionsGeographic,\n      positionsSpherical: this.positionsSpherical,\n      positionsStereographic: this.positionsStereographic,\n      pathSegmentLengths: this.pathSegmentLengths,\n      geodesicPathSegmentLengths: this.geodesicPathSegmentLengths,\n      perimeterSegmentLengths: this.perimeterSegmentLengths,\n      intersectingSegments: this.intersectingSegments,\n      geodesicIntersectingSegments: this.geodesicIntersectingSegments,\n      triangleIndices: this.triangleIndices,\n      geodesicTriangleIndices: this.geodesicTriangleIndices,\n      areaCentroidWorldCoords: this.areaCentroidWorldCoords,\n      areaCentroidRenderCoords: this.areaCentroidRenderCoords,\n      geodesicAreaCentroidRenderCoords: this.geodesicAreaCentroidRenderCoords,\n      fittingMode: this.fittingMode,\n      area: this.area,\n      geodesicArea: this.geodesicArea,\n      pathLength: this.pathLength,\n      geodesicPathLength: this.geodesicPathLength,\n      perimeterLength: this.perimeterLength,\n      cursorSegmentLength: this.cursorSegmentLength,\n      geodesicCursorSegmentLength: this.geodesicCursorSegmentLength,\n      unitNormalizer: this.unitNormalizer,\n      actualMeasurementMode: this.actualMeasurementMode\n    };\n  }\n\n  _resize(e) {\n    for (e < this._length && (this.positionsWorldCoords.length = e, this.positionsRenderCoords.length = e, this.positionsProjectedWorldCoords.length = e, this.positionsFittedRenderCoords.length = e, this.positionsGeographic.length = e, this.positionsSpherical.length = e, this.positionsStereographic.length = e, this.pathSegmentLengths.length = e, this.geodesicPathSegmentLengths.length = e, this.perimeterSegmentLengths.length = e, this._length = e); this._length < e;) this.positionsWorldCoords.push(C()), this.positionsRenderCoords.push(C()), this.positionsProjectedWorldCoords.push(h()), this.positionsFittedRenderCoords.push(C()), this.positionsGeographic.push(C()), this.positionsSpherical.push(C()), this.positionsStereographic.push(h()), this.pathSegmentLengths.push(0), this.geodesicPathSegmentLengths.push(0), this.perimeterSegmentLengths.push(0), ++this._length;\n  }\n\n  _updatePathLengths(e) {\n    const t = this.positionsWorldCoords,\n          s = this.pathSegmentLengths;\n    let i = 0;\n\n    for (let o = 0; o < this._length; ++o) {\n      const r = s[o] = d(t[o], t[(o + 1) % this._length]);\n      (o < this._length - 1 || e) && (i += r);\n    }\n\n    return i;\n  }\n\n  _updateGeodesicPathLengths(e, t) {\n    const s = this.positionsGeographic,\n          i = this.geodesicPathSegmentLengths;\n    let o = 0;\n\n    for (let r = 0; r < this._length; ++r) {\n      const n = i[r] = G(s[r], s[(r + 1) % this._length], t);\n      (r < this._length - 1 || e) && (o += n);\n    }\n\n    return o;\n  }\n\n  _updateArea(e, t, s, n, h) {\n    const a = e.renderCoordsHelper,\n          d = this.positionsWorldCoords,\n          C = this.positionsRenderCoords,\n          f = this.positionsProjectedWorldCoords,\n          S = this.positionsFittedRenderCoords,\n          L = this._planeWorldCoords,\n          P = this._centroidRenderCoords;\n    b(C, P), a.worldUpAtPosition(P, this._worldUp), a.worldBasisAtPosition(P, w.X, this._worldTangent), j(P, this._worldUp, s, this._worldUp, n), j(P, this._worldTangent, s, this._worldTangent, n), d.length > 2 && V(d, L), this.fittingMode = this._selectFittingMode(L, d, this._worldUp, h);\n    let R = 0;\n\n    if (\"horizontal\" === this.fittingMode) {\n      let e = -1 / 0;\n      C.forEach((t, s) => {\n        const i = a.getAltitude(C[s]);\n        i > e && (e = i, R = s);\n      });\n    }\n\n    const A = d[R];\n    let W = L,\n        v = this._worldTangent;\n    \"horizontal\" === this.fittingMode ? W = this._worldUp : \"vertical\" === this.fittingMode && (W = this._tempVec3, v = this._worldUp, q(L, this._worldUp, W)), g(this._frame[2], W), q(v, W, this._frame[0]), l(this._frame[1], this._frame[0], this._frame[2]), p(this._frame[1], this._frame[1]);\n    const z = this._tempVec3,\n          U = this._tempU,\n          I = this._tempV;\n\n    for (let i = 0; i < this._length; ++i) {\n      const e = f[i],\n            t = S[i];\n      c(z, d[i], A), r(e, m(this._frame[0], z), m(this._frame[1], z)), u(U, this._frame[0], e[0]), u(I, this._frame[1], e[1]), _(z, U, I), _(z, z, A), M(z, n, t, s);\n    }\n\n    this.perimeterLength = this._length > 0 ? i(t.normalizeDistance(this._updatePerimeterLengths()), \"meters\") : null, b(S, this.areaCentroidRenderCoords), M(this.areaCentroidRenderCoords, s, this.areaCentroidWorldCoords, n), this._updateIntersectingSegments(), this.area = 0 === this.intersectingSegments.size ? o(t.normalizeArea(this._computeArea()), \"square-meters\") : null;\n  }\n\n  _updateGeodesicArea(e) {\n    const {\n      renderCoordsHelper: t,\n      spatialReference: s\n    } = e,\n          {\n      positionsSpherical: i,\n      positionsStereographic: n\n    } = this,\n          h = this._tempVec3,\n          a = y(i, h);\n    if (!a) return void (this.geodesicArea = null);\n    const d = this._tempU,\n          g = this._tempV;\n    D(h, d, g);\n\n    for (let o = 0; o < this._length; ++o) {\n      const e = m(i[o], d),\n            t = m(i[o], g),\n            s = m(i[o], h);\n      r(n[o], e / s, t / s);\n    }\n\n    u(h, h, W(s).radius), t.toRenderCoords(h, A(s), this.geodesicAreaCentroidRenderCoords), this._updateGeodesicIntersectingSegments(), this.geodesicArea = a && 0 === this.geodesicIntersectingSegments.size ? o(this._computeGeodesicArea(), \"square-meters\") : null;\n  }\n\n  _updatePerimeterLengths() {\n    const e = this.positionsProjectedWorldCoords,\n          t = this.perimeterSegmentLengths;\n    let s = 0;\n\n    for (let i = 0; i < this._length; ++i) {\n      s += t[i] = n(e[i], e[(i + 1) % this._length]);\n    }\n\n    return s;\n  }\n\n  _updateIntersectingSegments() {\n    const e = this.positionsProjectedWorldCoords,\n          t = this.intersectingSegments;\n    t.clear();\n\n    for (let s = 0; s < this._length; ++s) for (let i = s + 2; i < this._length; ++i) {\n      if ((i + 1) % this._length === s) continue;\n      const o = e[s],\n            r = e[(s + 1) % this._length],\n            n = e[i],\n            h = e[(i + 1) % this._length];\n      z(o, r, n, h) && (t.add(s), t.add(i));\n    }\n  }\n\n  _computeArea() {\n    const e = this.positionsProjectedWorldCoords,\n          t = this.triangleIndices = new Uint32Array(B(e));\n    let s = 0;\n\n    for (let i = 0; i < t.length; i += 3) s += U(e[t[i]], e[t[i + 1]], e[t[i + 2]]);\n\n    return s;\n  }\n\n  _updateGeodesicIntersectingSegments() {\n    const e = this.positionsStereographic,\n          t = this.geodesicIntersectingSegments;\n    t.clear();\n\n    for (let s = 0; s < this._length; ++s) for (let i = s + 2; i < this._length; ++i) {\n      if ((i + 1) % this._length === s) continue;\n      const o = e[s],\n            r = e[(s + 1) % this._length],\n            n = e[i],\n            h = e[(i + 1) % this._length];\n      z(o, r, n, h) && (t.add(s), t.add(i));\n    }\n  }\n\n  _computeGeodesicArea() {\n    const e = this.positionsGeographic,\n          t = this.positionsStereographic,\n          s = this.geodesicTriangleIndices = new Uint32Array(B(t));\n    let i = 0;\n\n    for (let o = 0; o < s.length; o += 3) i += T(e[s[o]], e[s[o + 1]], e[s[o + 2]], v.WGS84);\n\n    return i;\n  }\n\n  _selectFittingMode(t, s, i, o) {\n    const r = s.map(e => Math.abs(F(t, e))).reduce((e, t) => Math.max(e, t), 0);\n    E(s, this._tempSphere);\n    const n = r / (2 * this._tempSphere.radius),\n          h = n < o.maxRelativeErrorCoplanar,\n          a = n < o.maxRelativeErrorAlmostCoplanar;\n    let d = \"horizontal\";\n    if (h) d = \"oblique\";else if (a) {\n      d = Math.abs(m(i, t)) > Math.cos(e(o.verticalAngleThreshold)) ? \"horizontal\" : \"vertical\";\n    }\n    return d;\n  }\n\n  _updateCursorSegmentLength(e, s) {\n    const o = e.lastPoint;\n    !e.isValidPolygon && t(o) && t(s) ? (this.geodesicCursorSegmentLength = i(N(o, s), \"meters\"), this.cursorSegmentLength = i(this.unitNormalizer.normalizeDistance(x(o, s, this.unitNormalizer.spatialReference)), \"meters\")) : (this.geodesicCursorSegmentLength = null, this.cursorSegmentLength = null);\n  }\n\n  _updateMode(e, s) {\n    if (s === I.Auto) {\n      this.actualMeasurementMode = \"euclidean\";\n      let s = 0;\n      null != this.geodesicPathLength && (s += this.geodesicPathLength.value), !e.isValidPolygon && t(this.geodesicCursorSegmentLength) && (s += this.geodesicCursorSegmentLength.value), s > Z && (this.actualMeasurementMode = \"geodesic\");\n    } else this.actualMeasurementMode = s === I.Euclidean ? \"euclidean\" : \"geodesic\";\n\n    null == this.geodesicPathLength && (this.actualMeasurementMode = \"euclidean\"), this._mode = s;\n  }\n\n}\n\nfunction X(e, t) {\n  t.hasZ || (t.z = s(k(e, t, \"ground\"), 0));\n}\n\nconst Z = 1e5;\nexport { H as MeasurementDataManager };","map":{"version":3,"names":["deg2rad","e","isSome","t","unwrapOr","s","createLength","i","createArea","o","a","r","j","n","h","d","c","g","f","l","p","b","m","u","_","C","canProjectWithoutEngine","S","canProjectToWGS84ComparableLonLat","L","projectPointToVector","P","projectPointToWGS84ComparableLonLat","R","projectDirection","projectVectorToVector","M","getSphericalPCPF","A","getReferenceEllipsoid","W","v","Axis","w","segmentIntersects","z","areaPoints2d","U","MeasurementMode","I","segmentLengthGeodesicVector","G","bestFitPlane","V","fitHemisphere","y","triangleAreaGeodesic","T","planePointDistance","F","boundingSphere","E","segmentLengthGeodesic","N","segmentLengthEuclidean","x","midpoint","getElevationAtPoint","k","makeOrthonormal","q","tangentFrame","D","triangulate","B","H","constructor","positionsWorldCoords","positionsRenderCoords","positionsProjectedWorldCoords","positionsFittedRenderCoords","positionsGeographic","positionsSpherical","positionsStereographic","pathSegmentLengths","geodesicPathSegmentLengths","perimeterSegmentLengths","intersectingSegments","Set","geodesicIntersectingSegments","areaCentroidWorldCoords","areaCentroidRenderCoords","geodesicAreaCentroidRenderCoords","_length","_centroidRenderCoords","_planeWorldCoords","_worldUp","_worldTangent","_frame","_pathVersion","_validMeasurement","_hasCursorPoint","_mode","_tempU","_tempV","_tempVec3","_tempSphere","center","radius","_sceneView","unitNormalizer","update","renderSpatialReference","spatialReference","version","isValidPolygon","_updateCursorSegmentLength","numVertices","_resize","forEachVertexPosition","X","elevationProvider","_updatePathLengths","pathLength","normalizeDistance","_updateGeodesicPathLengths","geodesicPathLength","_updateMode","_updateArea","_updateGeodesicArea","area","geodesicArea","perimeterLength","triangleIndices","geodesicTriangleIndices","clear","getData","fittingMode","cursorSegmentLength","geodesicCursorSegmentLength","actualMeasurementMode","length","push","renderCoordsHelper","worldUpAtPosition","worldBasisAtPosition","_selectFittingMode","forEach","getAltitude","_updatePerimeterLengths","_updateIntersectingSegments","size","normalizeArea","_computeArea","toRenderCoords","_updateGeodesicIntersectingSegments","_computeGeodesicArea","add","Uint32Array","WGS84","map","Math","abs","reduce","max","maxRelativeErrorCoplanar","maxRelativeErrorAlmostCoplanar","cos","verticalAngleThreshold","lastPoint","Auto","value","Z","Euclidean","hasZ","MeasurementDataManager"],"sources":["C:/Users/hp/Desktop/eco-friendly atmosphere/Atmosphere/eco-friendly/node_modules/@arcgis/core/views/3d/analysis/AreaMeasurement/support/MeasurementData.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport{deg2rad as e}from\"../../../../../core/mathUtils.js\";import{isSome as t,unwrapOr as s}from\"../../../../../core/maybe.js\";import{createLength as i,createArea as o}from\"../../../../../core/quantityUtils.js\";import{a as r,j as n}from\"../../../../../chunks/vec2.js\";import{a as h}from\"../../../../../chunks/vec2f64.js\";import{n as a,i as d,c as g,f as l,o as p,b as c,e as m,g as u,a as _}from\"../../../../../chunks/vec3.js\";import{c as C}from\"../../../../../chunks/vec3f64.js\";import{c as f}from\"../../../../../chunks/vec4f64.js\";import{canProjectWithoutEngine as S,canProjectToWGS84ComparableLonLat as L,projectPointToVector as P,projectPointToWGS84ComparableLonLat as R,projectDirection as j,projectVectorToVector as M}from\"../../../../../geometry/projection.js\";import{getSphericalPCPF as A,getReferenceEllipsoid as W}from\"../../../../../geometry/projectionEllipsoid.js\";import v from\"../../../../../geometry/SpatialReference.js\";import{Axis as w}from\"../../../../../geometry/support/Axis.js\";import{segmentIntersects as z}from\"../../../../../geometry/support/intersectsBase.js\";import{areaPoints2d as U}from\"../../../../../geometry/support/triangle.js\";import{MeasurementMode as I}from\"../../interfaces.js\";import{segmentLengthGeodesicVector as G,bestFitPlane as V,fitHemisphere as y,triangleAreaGeodesic as T,planePointDistance as F,boundingSphere as E,segmentLengthGeodesic as N,segmentLengthEuclidean as x}from\"../../support/measurementUtils.js\";import{midpoint as b}from\"../../support/viewUtils.js\";import{getElevationAtPoint as k}from\"../../../support/ElevationProvider.js\";import{makeOrthonormal as q,tangentFrame as D}from\"../../../support/mathUtils.js\";import{triangulate as B}from\"../../../../support/euclideanAreaMeasurementUtils.js\";class H{constructor(e,t){this.positionsWorldCoords=[],this.positionsRenderCoords=[],this.positionsProjectedWorldCoords=[],this.positionsFittedRenderCoords=[],this.positionsGeographic=[],this.positionsSpherical=[],this.positionsStereographic=[],this.pathSegmentLengths=[],this.geodesicPathSegmentLengths=[],this.perimeterSegmentLengths=[],this.intersectingSegments=new Set,this.geodesicIntersectingSegments=new Set,this.areaCentroidWorldCoords=C(),this.areaCentroidRenderCoords=C(),this.geodesicAreaCentroidRenderCoords=C(),this._length=0,this._centroidRenderCoords=C(),this._planeWorldCoords=f(),this._worldUp=C(),this._worldTangent=C(),this._frame=[C(),C(),C()],this._pathVersion=-1,this._validMeasurement=!1,this._hasCursorPoint=!1,this._mode=null,this._tempU=C(),this._tempV=C(),this._tempVec3=C(),this._tempSphere={center:C(),radius:0},this._sceneView=e,this.unitNormalizer=t}update(e,s,o,r,n,h,d){const g=this.unitNormalizer,l=this._sceneView.renderSpatialReference,p=this.unitNormalizer.spatialReference,c=t(s);if(this._pathVersion===e.version&&this._validMeasurement===r&&!d&&this._hasCursorPoint===c&&this._mode===h){return!e.isValidPolygon&&(this._updateCursorSegmentLength(e,s),!0)}this._pathVersion=e.version,this._validMeasurement=r,this._hasCursorPoint=c;const m=e.numVertices;this._resize(m);const u=A(o.spatialReference),_=S(o.spatialReference,u)&&L(o.spatialReference),{positionsGeographic:C,positionsWorldCoords:f,positionsRenderCoords:j,positionsSpherical:M}=this;e.forEachVertexPosition(((e,t)=>{X(o.elevationProvider,e),P(e,f[t],p),P(e,j[t],l),_&&(R(e,C[t]),P(e,M[t],u),a(M[t],M[t]))}));const W=this._updatePathLengths(r);if(this.pathLength=this._length>1?i(g.normalizeDistance(W),\"meters\"):null,_){const e=this._updateGeodesicPathLengths(r,p);this.geodesicPathLength=this._length>1?i(e,\"meters\"):null}else this.geodesicPathLength=null;return this._updateCursorSegmentLength(e,s),this._updateMode(e,h),r?(this._updateArea(o,g,l,p,n),_&&this._updateGeodesicArea(o),!0):(this.area=null,this.geodesicArea=null,this.perimeterLength=null,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.intersectingSegments.clear(),this.geodesicIntersectingSegments.clear(),!0)}getData(){return{positionsWorldCoords:this.positionsWorldCoords,positionsRenderCoords:this.positionsRenderCoords,positionsProjectedWorldCoords:this.positionsProjectedWorldCoords,positionsFittedRenderCoords:this.positionsFittedRenderCoords,positionsGeographic:this.positionsGeographic,positionsSpherical:this.positionsSpherical,positionsStereographic:this.positionsStereographic,pathSegmentLengths:this.pathSegmentLengths,geodesicPathSegmentLengths:this.geodesicPathSegmentLengths,perimeterSegmentLengths:this.perimeterSegmentLengths,intersectingSegments:this.intersectingSegments,geodesicIntersectingSegments:this.geodesicIntersectingSegments,triangleIndices:this.triangleIndices,geodesicTriangleIndices:this.geodesicTriangleIndices,areaCentroidWorldCoords:this.areaCentroidWorldCoords,areaCentroidRenderCoords:this.areaCentroidRenderCoords,geodesicAreaCentroidRenderCoords:this.geodesicAreaCentroidRenderCoords,fittingMode:this.fittingMode,area:this.area,geodesicArea:this.geodesicArea,pathLength:this.pathLength,geodesicPathLength:this.geodesicPathLength,perimeterLength:this.perimeterLength,cursorSegmentLength:this.cursorSegmentLength,geodesicCursorSegmentLength:this.geodesicCursorSegmentLength,unitNormalizer:this.unitNormalizer,actualMeasurementMode:this.actualMeasurementMode}}_resize(e){for(e<this._length&&(this.positionsWorldCoords.length=e,this.positionsRenderCoords.length=e,this.positionsProjectedWorldCoords.length=e,this.positionsFittedRenderCoords.length=e,this.positionsGeographic.length=e,this.positionsSpherical.length=e,this.positionsStereographic.length=e,this.pathSegmentLengths.length=e,this.geodesicPathSegmentLengths.length=e,this.perimeterSegmentLengths.length=e,this._length=e);this._length<e;)this.positionsWorldCoords.push(C()),this.positionsRenderCoords.push(C()),this.positionsProjectedWorldCoords.push(h()),this.positionsFittedRenderCoords.push(C()),this.positionsGeographic.push(C()),this.positionsSpherical.push(C()),this.positionsStereographic.push(h()),this.pathSegmentLengths.push(0),this.geodesicPathSegmentLengths.push(0),this.perimeterSegmentLengths.push(0),++this._length}_updatePathLengths(e){const t=this.positionsWorldCoords,s=this.pathSegmentLengths;let i=0;for(let o=0;o<this._length;++o){const r=s[o]=d(t[o],t[(o+1)%this._length]);(o<this._length-1||e)&&(i+=r)}return i}_updateGeodesicPathLengths(e,t){const s=this.positionsGeographic,i=this.geodesicPathSegmentLengths;let o=0;for(let r=0;r<this._length;++r){const n=i[r]=G(s[r],s[(r+1)%this._length],t);(r<this._length-1||e)&&(o+=n)}return o}_updateArea(e,t,s,n,h){const a=e.renderCoordsHelper,d=this.positionsWorldCoords,C=this.positionsRenderCoords,f=this.positionsProjectedWorldCoords,S=this.positionsFittedRenderCoords,L=this._planeWorldCoords,P=this._centroidRenderCoords;b(C,P),a.worldUpAtPosition(P,this._worldUp),a.worldBasisAtPosition(P,w.X,this._worldTangent),j(P,this._worldUp,s,this._worldUp,n),j(P,this._worldTangent,s,this._worldTangent,n),d.length>2&&V(d,L),this.fittingMode=this._selectFittingMode(L,d,this._worldUp,h);let R=0;if(\"horizontal\"===this.fittingMode){let e=-1/0;C.forEach(((t,s)=>{const i=a.getAltitude(C[s]);i>e&&(e=i,R=s)}))}const A=d[R];let W=L,v=this._worldTangent;\"horizontal\"===this.fittingMode?W=this._worldUp:\"vertical\"===this.fittingMode&&(W=this._tempVec3,v=this._worldUp,q(L,this._worldUp,W)),g(this._frame[2],W),q(v,W,this._frame[0]),l(this._frame[1],this._frame[0],this._frame[2]),p(this._frame[1],this._frame[1]);const z=this._tempVec3,U=this._tempU,I=this._tempV;for(let i=0;i<this._length;++i){const e=f[i],t=S[i];c(z,d[i],A),r(e,m(this._frame[0],z),m(this._frame[1],z)),u(U,this._frame[0],e[0]),u(I,this._frame[1],e[1]),_(z,U,I),_(z,z,A),M(z,n,t,s)}this.perimeterLength=this._length>0?i(t.normalizeDistance(this._updatePerimeterLengths()),\"meters\"):null,b(S,this.areaCentroidRenderCoords),M(this.areaCentroidRenderCoords,s,this.areaCentroidWorldCoords,n),this._updateIntersectingSegments(),this.area=0===this.intersectingSegments.size?o(t.normalizeArea(this._computeArea()),\"square-meters\"):null}_updateGeodesicArea(e){const{renderCoordsHelper:t,spatialReference:s}=e,{positionsSpherical:i,positionsStereographic:n}=this,h=this._tempVec3,a=y(i,h);if(!a)return void(this.geodesicArea=null);const d=this._tempU,g=this._tempV;D(h,d,g);for(let o=0;o<this._length;++o){const e=m(i[o],d),t=m(i[o],g),s=m(i[o],h);r(n[o],e/s,t/s)}u(h,h,W(s).radius),t.toRenderCoords(h,A(s),this.geodesicAreaCentroidRenderCoords),this._updateGeodesicIntersectingSegments(),this.geodesicArea=a&&0===this.geodesicIntersectingSegments.size?o(this._computeGeodesicArea(),\"square-meters\"):null}_updatePerimeterLengths(){const e=this.positionsProjectedWorldCoords,t=this.perimeterSegmentLengths;let s=0;for(let i=0;i<this._length;++i){s+=t[i]=n(e[i],e[(i+1)%this._length])}return s}_updateIntersectingSegments(){const e=this.positionsProjectedWorldCoords,t=this.intersectingSegments;t.clear();for(let s=0;s<this._length;++s)for(let i=s+2;i<this._length;++i){if((i+1)%this._length===s)continue;const o=e[s],r=e[(s+1)%this._length],n=e[i],h=e[(i+1)%this._length];z(o,r,n,h)&&(t.add(s),t.add(i))}}_computeArea(){const e=this.positionsProjectedWorldCoords,t=this.triangleIndices=new Uint32Array(B(e));let s=0;for(let i=0;i<t.length;i+=3)s+=U(e[t[i]],e[t[i+1]],e[t[i+2]]);return s}_updateGeodesicIntersectingSegments(){const e=this.positionsStereographic,t=this.geodesicIntersectingSegments;t.clear();for(let s=0;s<this._length;++s)for(let i=s+2;i<this._length;++i){if((i+1)%this._length===s)continue;const o=e[s],r=e[(s+1)%this._length],n=e[i],h=e[(i+1)%this._length];z(o,r,n,h)&&(t.add(s),t.add(i))}}_computeGeodesicArea(){const e=this.positionsGeographic,t=this.positionsStereographic,s=this.geodesicTriangleIndices=new Uint32Array(B(t));let i=0;for(let o=0;o<s.length;o+=3)i+=T(e[s[o]],e[s[o+1]],e[s[o+2]],v.WGS84);return i}_selectFittingMode(t,s,i,o){const r=s.map((e=>Math.abs(F(t,e)))).reduce(((e,t)=>Math.max(e,t)),0);E(s,this._tempSphere);const n=r/(2*this._tempSphere.radius),h=n<o.maxRelativeErrorCoplanar,a=n<o.maxRelativeErrorAlmostCoplanar;let d=\"horizontal\";if(h)d=\"oblique\";else if(a){d=Math.abs(m(i,t))>Math.cos(e(o.verticalAngleThreshold))?\"horizontal\":\"vertical\"}return d}_updateCursorSegmentLength(e,s){const o=e.lastPoint;!e.isValidPolygon&&t(o)&&t(s)?(this.geodesicCursorSegmentLength=i(N(o,s),\"meters\"),this.cursorSegmentLength=i(this.unitNormalizer.normalizeDistance(x(o,s,this.unitNormalizer.spatialReference)),\"meters\")):(this.geodesicCursorSegmentLength=null,this.cursorSegmentLength=null)}_updateMode(e,s){if(s===I.Auto){this.actualMeasurementMode=\"euclidean\";let s=0;null!=this.geodesicPathLength&&(s+=this.geodesicPathLength.value),!e.isValidPolygon&&t(this.geodesicCursorSegmentLength)&&(s+=this.geodesicCursorSegmentLength.value),s>Z&&(this.actualMeasurementMode=\"geodesic\")}else this.actualMeasurementMode=s===I.Euclidean?\"euclidean\":\"geodesic\";null==this.geodesicPathLength&&(this.actualMeasurementMode=\"euclidean\"),this._mode=s}}function X(e,t){t.hasZ||(t.z=s(k(e,t,\"ground\"),0))}const Z=1e5;export{H as MeasurementDataManager};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}