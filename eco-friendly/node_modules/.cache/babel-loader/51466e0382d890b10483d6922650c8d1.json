{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport { FoamColor as e } from \"./FoamRendering.glsl.js\";\nimport { Gamma as o } from \"./Gamma.glsl.js\";\nimport { PhysicallyBasedRendering as r } from \"./PhysicallyBasedRendering.glsl.js\";\nimport { ScreenSpaceReflections as t } from \"./ScreenSpaceReflections.glsl.js\";\nimport { CloudsParallaxShading as i } from \"../util/CloudsParallaxShading.glsl.js\";\nimport { FloatPassUniform as a } from \"../../shaderModules/FloatPassUniform.js\";\nimport { glsl as l } from \"../../shaderModules/interfaces.js\";\n\nfunction n(n, d) {\n  n.include(r, d), n.include(o), n.include(e), d.hasCloudsReflections && n.include(i, d), d.hasScreenSpaceReflections && n.include(t, d);\n  const c = n.fragment;\n  c.constants.add(\"fresnelSky\", \"vec3\", [.02, 1, 15]).add(\"fresnelMaterial\", \"vec2\", [.02, .1]).add(\"roughness\", \"float\", .015).add(\"foamIntensityExternal\", \"float\", 1.7).add(\"ssrIntensity\", \"float\", .65).add(\"ssrHeightFadeStart\", \"float\", 3e5).add(\"ssrHeightFadeEnd\", \"float\", 5e5).add(\"waterDiffusion\", \"float\", .92).add(\"waterSeaColorMod\", \"float\", .8).add(\"correctionViewingPowerFactor\", \"float\", .4).add(\"skyZenitColor\", \"vec3\", [.52, .68, .9]).add(\"skyColor\", \"vec3\", [.67, .79, .9]).add(\"cloudFresnelModifier\", \"vec2\", [1.2, .01]), c.code.add(l`PBRShadingWater shadingInfo;\nvec3 getSkyGradientColor(in float cosTheta, in vec3 horizon, in vec3 zenit) {\nfloat exponent = pow((1.0 - cosTheta), fresnelSky[2]);\nreturn mix(zenit, horizon, exponent);\n}`), c.uniforms.add([new a(\"lightingSpecularStrength\", (e, o) => o.lighting.mainLight.specularStrength), new a(\"lightingEnvironmentStrength\", (e, o) => o.lighting.mainLight.environmentStrength)]), c.code.add(l`vec3 getSeaColor(in vec3 n, in vec3 v, in vec3 l, vec3 color, in vec3 lightIntensity, in vec3 localUp, in float shadow, float foamIntensity, vec3 viewPosition, vec3 position) {\nfloat reflectionHit = 0.0;\nfloat reflectionHitDiffused = 0.0;\nvec3 seaWaterColor = linearizeGamma(color);\nvec3 h = normalize(l + v);\nshadingInfo.NdotL = clamp(dot(n, l), 0.0, 1.0);\nshadingInfo.NdotV = clamp(dot(n, v), 0.001, 1.0);\nshadingInfo.VdotN = clamp(dot(v, n), 0.001, 1.0);\nshadingInfo.NdotH = clamp(dot(n, h), 0.0, 1.0);\nshadingInfo.VdotH = clamp(dot(v, h), 0.0, 1.0);\nshadingInfo.LdotH = clamp(dot(l, h), 0.0, 1.0);\nfloat upDotV = max(dot(localUp,v), 0.0);\nvec3 skyHorizon = linearizeGamma(skyColor);\nvec3 skyZenit = linearizeGamma(skyZenitColor);\nvec3 skyColor = getSkyGradientColor(upDotV, skyHorizon, skyZenit );\nfloat upDotL = max(dot(localUp,l),0.0);\nfloat daytimeMod = 0.1 + upDotL * 0.9;\nskyColor *= daytimeMod;\nfloat shadowModifier = clamp(shadow, 0.8, 1.0);\nvec3 fresnelModifier = fresnelReflection(shadingInfo.VdotN, vec3(fresnelSky[0]), fresnelSky[1]);\nvec3 reflSky = lightingEnvironmentStrength * fresnelModifier * skyColor * shadowModifier;\nvec3 reflSea = seaWaterColor * mix(skyColor, upDotL * lightIntensity * LIGHT_NORMALIZATION, 2.0 / 3.0) * shadowModifier;\nvec3 specular = vec3(0.0);\nif(upDotV > 0.0 && upDotL > 0.0) {\nvec3 specularSun = brdfSpecularWater(shadingInfo, roughness, vec3(fresnelMaterial[0]), fresnelMaterial[1]);\nvec3 incidentLight = lightIntensity * LIGHT_NORMALIZATION * shadow;\nspecular = lightingSpecularStrength * shadingInfo.NdotL * incidentLight * specularSun;\n}\nvec3 foam = vec3(0.0);\nif(upDotV > 0.0) {\nfoam = foamIntensity2FoamColor(foamIntensityExternal, foamIntensity, skyZenitColor, daytimeMod);\n}\nfloat correctionViewingFactor = pow(max(dot(v, localUp), 0.0), correctionViewingPowerFactor);\nvec3 normalCorrectedClouds = mix(localUp, n, correctionViewingFactor);\nvec3 reflectedWorld = normalize(reflect(-v, normalCorrectedClouds));`), d.hasCloudsReflections && c.code.add(l`vec4 cloudsColor = renderClouds(reflectedWorld, position);\ncloudsColor.a = 1.0 - cloudsColor.a;\ncloudsColor = pow(cloudsColor, vec4(GAMMA));\ncloudsColor *= clamp(fresnelModifier.y*cloudFresnelModifier[0] - cloudFresnelModifier[1], 0.0, 1.0) * clamp((1.0 - totalFadeInOut), 0.0, 1.0);`), d.hasScreenSpaceReflections ? c.code.add(l`vec3 viewDir = normalize(viewPosition);\nvec4 viewNormalVectorCoordinate = view *vec4(n, 0.0);\nvec3 viewNormal = normalize(viewNormalVectorCoordinate.xyz);\nvec4 viewUp = view *vec4(localUp, 0.0);\nvec3 viewNormalCorrectedSSR = mix(viewUp.xyz, viewNormal, correctionViewingFactor);\nvec3 reflected = normalize(reflect(viewDir, viewNormalCorrectedSSR));\nvec3 hitCoordinate = screenSpaceIntersection(reflected, viewPosition, viewDir, viewUp.xyz);\nvec3 reflectedColor = vec3(0.0);\nif (hitCoordinate.z > 0.0)\n{\nvec2 reprojectedCoordinate = reprojectionCoordinate(hitCoordinate);\nvec2 dCoords = smoothstep(0.3, 0.6, abs(vec2(0.5, 0.5) - hitCoordinate.xy));\nfloat heightMod = smoothstep(ssrHeightFadeEnd, ssrHeightFadeStart, -viewPosition.z);\nreflectionHit = clamp(1.0 - (1.3*dCoords.y), 0.0, 1.0) * heightMod;\nreflectionHitDiffused = waterDiffusion * reflectionHit;\nreflectedColor = linearizeGamma(texture2D(lastFrameColorMap, reprojectedCoordinate).xyz)* reflectionHitDiffused * fresnelModifier.y * ssrIntensity;\n}\nfloat seaColorMod =  mix(waterSeaColorMod, waterSeaColorMod*0.5, reflectionHitDiffused);\nvec3 waterRenderedColor = tonemapACES((1.0 - reflectionHitDiffused) * reflSky + reflectedColor + reflSea * seaColorMod + specular  + foam);`) : c.code.add(l`vec3 waterRenderedColor = tonemapACES(reflSky + reflSea * waterSeaColorMod + specular + foam);`), d.hasCloudsReflections ? d.hasScreenSpaceReflections ? c.code.add(l`return waterRenderedColor * (1.0 - (1.0 - reflectionHit) * cloudsColor.a) + (1.0 - reflectionHit) * cloudsColor.xyz;\n}`) : c.code.add(l`return waterRenderedColor * (1.0 - cloudsColor.a) + cloudsColor.xyz;\n}`) : c.code.add(l`return waterRenderedColor;\n}`);\n}\n\nexport { n as Water };","map":{"version":3,"names":["FoamColor","e","Gamma","o","PhysicallyBasedRendering","r","ScreenSpaceReflections","t","CloudsParallaxShading","i","FloatPassUniform","a","glsl","l","n","d","include","hasCloudsReflections","hasScreenSpaceReflections","c","fragment","constants","add","code","uniforms","lighting","mainLight","specularStrength","environmentStrength","Water"],"sources":["C:/Users/hp/Desktop/eco-friendly atmosphere/Atmosphere/eco-friendly/node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/Water.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport{FoamColor as e}from\"./FoamRendering.glsl.js\";import{Gamma as o}from\"./Gamma.glsl.js\";import{PhysicallyBasedRendering as r}from\"./PhysicallyBasedRendering.glsl.js\";import{ScreenSpaceReflections as t}from\"./ScreenSpaceReflections.glsl.js\";import{CloudsParallaxShading as i}from\"../util/CloudsParallaxShading.glsl.js\";import{FloatPassUniform as a}from\"../../shaderModules/FloatPassUniform.js\";import{glsl as l}from\"../../shaderModules/interfaces.js\";function n(n,d){n.include(r,d),n.include(o),n.include(e),d.hasCloudsReflections&&n.include(i,d),d.hasScreenSpaceReflections&&n.include(t,d);const c=n.fragment;c.constants.add(\"fresnelSky\",\"vec3\",[.02,1,15]).add(\"fresnelMaterial\",\"vec2\",[.02,.1]).add(\"roughness\",\"float\",.015).add(\"foamIntensityExternal\",\"float\",1.7).add(\"ssrIntensity\",\"float\",.65).add(\"ssrHeightFadeStart\",\"float\",3e5).add(\"ssrHeightFadeEnd\",\"float\",5e5).add(\"waterDiffusion\",\"float\",.92).add(\"waterSeaColorMod\",\"float\",.8).add(\"correctionViewingPowerFactor\",\"float\",.4).add(\"skyZenitColor\",\"vec3\",[.52,.68,.9]).add(\"skyColor\",\"vec3\",[.67,.79,.9]).add(\"cloudFresnelModifier\",\"vec2\",[1.2,.01]),c.code.add(l`PBRShadingWater shadingInfo;\nvec3 getSkyGradientColor(in float cosTheta, in vec3 horizon, in vec3 zenit) {\nfloat exponent = pow((1.0 - cosTheta), fresnelSky[2]);\nreturn mix(zenit, horizon, exponent);\n}`),c.uniforms.add([new a(\"lightingSpecularStrength\",((e,o)=>o.lighting.mainLight.specularStrength)),new a(\"lightingEnvironmentStrength\",((e,o)=>o.lighting.mainLight.environmentStrength))]),c.code.add(l`vec3 getSeaColor(in vec3 n, in vec3 v, in vec3 l, vec3 color, in vec3 lightIntensity, in vec3 localUp, in float shadow, float foamIntensity, vec3 viewPosition, vec3 position) {\nfloat reflectionHit = 0.0;\nfloat reflectionHitDiffused = 0.0;\nvec3 seaWaterColor = linearizeGamma(color);\nvec3 h = normalize(l + v);\nshadingInfo.NdotL = clamp(dot(n, l), 0.0, 1.0);\nshadingInfo.NdotV = clamp(dot(n, v), 0.001, 1.0);\nshadingInfo.VdotN = clamp(dot(v, n), 0.001, 1.0);\nshadingInfo.NdotH = clamp(dot(n, h), 0.0, 1.0);\nshadingInfo.VdotH = clamp(dot(v, h), 0.0, 1.0);\nshadingInfo.LdotH = clamp(dot(l, h), 0.0, 1.0);\nfloat upDotV = max(dot(localUp,v), 0.0);\nvec3 skyHorizon = linearizeGamma(skyColor);\nvec3 skyZenit = linearizeGamma(skyZenitColor);\nvec3 skyColor = getSkyGradientColor(upDotV, skyHorizon, skyZenit );\nfloat upDotL = max(dot(localUp,l),0.0);\nfloat daytimeMod = 0.1 + upDotL * 0.9;\nskyColor *= daytimeMod;\nfloat shadowModifier = clamp(shadow, 0.8, 1.0);\nvec3 fresnelModifier = fresnelReflection(shadingInfo.VdotN, vec3(fresnelSky[0]), fresnelSky[1]);\nvec3 reflSky = lightingEnvironmentStrength * fresnelModifier * skyColor * shadowModifier;\nvec3 reflSea = seaWaterColor * mix(skyColor, upDotL * lightIntensity * LIGHT_NORMALIZATION, 2.0 / 3.0) * shadowModifier;\nvec3 specular = vec3(0.0);\nif(upDotV > 0.0 && upDotL > 0.0) {\nvec3 specularSun = brdfSpecularWater(shadingInfo, roughness, vec3(fresnelMaterial[0]), fresnelMaterial[1]);\nvec3 incidentLight = lightIntensity * LIGHT_NORMALIZATION * shadow;\nspecular = lightingSpecularStrength * shadingInfo.NdotL * incidentLight * specularSun;\n}\nvec3 foam = vec3(0.0);\nif(upDotV > 0.0) {\nfoam = foamIntensity2FoamColor(foamIntensityExternal, foamIntensity, skyZenitColor, daytimeMod);\n}\nfloat correctionViewingFactor = pow(max(dot(v, localUp), 0.0), correctionViewingPowerFactor);\nvec3 normalCorrectedClouds = mix(localUp, n, correctionViewingFactor);\nvec3 reflectedWorld = normalize(reflect(-v, normalCorrectedClouds));`),d.hasCloudsReflections&&c.code.add(l`vec4 cloudsColor = renderClouds(reflectedWorld, position);\ncloudsColor.a = 1.0 - cloudsColor.a;\ncloudsColor = pow(cloudsColor, vec4(GAMMA));\ncloudsColor *= clamp(fresnelModifier.y*cloudFresnelModifier[0] - cloudFresnelModifier[1], 0.0, 1.0) * clamp((1.0 - totalFadeInOut), 0.0, 1.0);`),d.hasScreenSpaceReflections?c.code.add(l`vec3 viewDir = normalize(viewPosition);\nvec4 viewNormalVectorCoordinate = view *vec4(n, 0.0);\nvec3 viewNormal = normalize(viewNormalVectorCoordinate.xyz);\nvec4 viewUp = view *vec4(localUp, 0.0);\nvec3 viewNormalCorrectedSSR = mix(viewUp.xyz, viewNormal, correctionViewingFactor);\nvec3 reflected = normalize(reflect(viewDir, viewNormalCorrectedSSR));\nvec3 hitCoordinate = screenSpaceIntersection(reflected, viewPosition, viewDir, viewUp.xyz);\nvec3 reflectedColor = vec3(0.0);\nif (hitCoordinate.z > 0.0)\n{\nvec2 reprojectedCoordinate = reprojectionCoordinate(hitCoordinate);\nvec2 dCoords = smoothstep(0.3, 0.6, abs(vec2(0.5, 0.5) - hitCoordinate.xy));\nfloat heightMod = smoothstep(ssrHeightFadeEnd, ssrHeightFadeStart, -viewPosition.z);\nreflectionHit = clamp(1.0 - (1.3*dCoords.y), 0.0, 1.0) * heightMod;\nreflectionHitDiffused = waterDiffusion * reflectionHit;\nreflectedColor = linearizeGamma(texture2D(lastFrameColorMap, reprojectedCoordinate).xyz)* reflectionHitDiffused * fresnelModifier.y * ssrIntensity;\n}\nfloat seaColorMod =  mix(waterSeaColorMod, waterSeaColorMod*0.5, reflectionHitDiffused);\nvec3 waterRenderedColor = tonemapACES((1.0 - reflectionHitDiffused) * reflSky + reflectedColor + reflSea * seaColorMod + specular  + foam);`):c.code.add(l`vec3 waterRenderedColor = tonemapACES(reflSky + reflSea * waterSeaColorMod + specular + foam);`),d.hasCloudsReflections?d.hasScreenSpaceReflections?c.code.add(l`return waterRenderedColor * (1.0 - (1.0 - reflectionHit) * cloudsColor.a) + (1.0 - reflectionHit) * cloudsColor.xyz;\n}`):c.code.add(l`return waterRenderedColor * (1.0 - cloudsColor.a) + cloudsColor.xyz;\n}`):c.code.add(l`return waterRenderedColor;\n}`)}export{n as Water};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}