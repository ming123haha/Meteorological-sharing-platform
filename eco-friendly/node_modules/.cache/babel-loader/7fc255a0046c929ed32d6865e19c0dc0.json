{"ast":null,"code":"import DateTime, { friendlyDateTime } from \"./datetime.js\";\nimport Duration from \"./duration.js\";\nimport Settings from \"./settings.js\";\nimport { InvalidArgumentError, InvalidIntervalError } from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\nconst INVALID = \"Invalid Interval\"; // checks if the start is equal to or before the end\n\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return Interval.invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return Interval.invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return Interval.invalid(\"end before start\", `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`);\n  } else {\n    return null;\n  }\n}\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.\n * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.\n * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}\n * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.\n */\n\n\nexport default class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n\n    this.e = config.end;\n    /**\n     * @access private\n     */\n\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n\n    this.isLuxonInterval = true;\n  }\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n\n\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(invalid);\n    } else {\n      return new Interval({\n        invalid\n      });\n    }\n  }\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|Date|Object} start\n   * @param {DateTime|Date|Object} end\n   * @return {Interval}\n   */\n\n\n  static fromDateTimes(start, end) {\n    const builtStart = friendlyDateTime(start),\n          builtEnd = friendlyDateTime(end);\n    const validateError = validateStartEnd(builtStart, builtEnd);\n\n    if (validateError == null) {\n      return new Interval({\n        start: builtStart,\n        end: builtEnd\n      });\n    } else {\n      return validateError;\n    }\n  }\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|Date|Object} start\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n\n\n  static after(start, duration) {\n    const dur = Duration.fromDurationLike(duration),\n          dt = friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|Date|Object} end\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n\n\n  static before(end, duration) {\n    const dur = Duration.fromDurationLike(duration),\n          dt = friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n  /**\n   * Create an Interval from an ISO 8601 string.\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n   * @param {string} text - the ISO string to parse\n   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {Interval}\n   */\n\n\n  static fromISO(text, opts) {\n    const [s, e] = (text || \"\").split(\"/\", 2);\n\n    if (s && e) {\n      let start, startIsValid;\n\n      try {\n        start = DateTime.fromISO(s, opts);\n        startIsValid = start.isValid;\n      } catch (e) {\n        startIsValid = false;\n      }\n\n      let end, endIsValid;\n\n      try {\n        end = DateTime.fromISO(e, opts);\n        endIsValid = end.isValid;\n      } catch (e) {\n        endIsValid = false;\n      }\n\n      if (startIsValid && endIsValid) {\n        return Interval.fromDateTimes(start, end);\n      }\n\n      if (startIsValid) {\n        const dur = Duration.fromISO(e, opts);\n\n        if (dur.isValid) {\n          return Interval.after(start, dur);\n        }\n      } else if (endIsValid) {\n        const dur = Duration.fromISO(s, opts);\n\n        if (dur.isValid) {\n          return Interval.before(end, dur);\n        }\n      }\n    }\n\n    return Interval.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n  }\n  /**\n   * Check if an object is an Interval. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n\n\n  static isInterval(o) {\n    return o && o.isLuxonInterval || false;\n  }\n  /**\n   * Returns the start of the Interval\n   * @type {DateTime}\n   */\n\n\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n  /**\n   * Returns the end of the Interval\n   * @type {DateTime}\n   */\n\n\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n  /**\n   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.\n   * @type {boolean}\n   */\n\n\n  get isValid() {\n    return this.invalidReason === null;\n  }\n  /**\n   * Returns an error code if this Interval is invalid, or null if the Interval is valid\n   * @type {string}\n   */\n\n\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @type {string}\n   */\n\n\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n\n\n  length(unit = \"milliseconds\") {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n\n\n  count(unit = \"milliseconds\") {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n          end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + 1;\n  }\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n\n\n  hasSame(unit) {\n    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n\n\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n  /**\n   * Return whether this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n\n\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n  /**\n   * Return whether this Interval's end is before the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n\n\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e <= dateTime;\n  }\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n\n\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {Object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n\n\n  set({\n    start,\n    end\n  } = {}) {\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...DateTime} dateTimes - the unit of time to count.\n   * @return {Array}\n   */\n\n\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes.map(friendlyDateTime).filter(d => this.contains(d)).sort(),\n          results = [];\n    let {\n      s\n    } = this,\n        i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n            next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\n   * @return {Array}\n   */\n\n\n  splitBy(duration) {\n    const dur = Duration.fromDurationLike(duration);\n\n    if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n      return [];\n    }\n\n    let {\n      s\n    } = this,\n        idx = 1,\n        next;\n    const results = [];\n\n    while (s < this.e) {\n      const added = this.start.plus(dur.mapUnits(x => x * idx));\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      idx += 1;\n    }\n\n    return results;\n  }\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {Array}\n   */\n\n\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n\n\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n\n\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n\n\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n\n\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n\n\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * Returns null if the intersection is empty, meaning, the intervals don't intersect.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n\n\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n          e = this.e < other.e ? this.e : other.e;\n\n    if (s >= e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n\n\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n          e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n\n\n  static merge(intervals) {\n    const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce(([sofar, current], item) => {\n      if (!current) {\n        return [sofar, item];\n      } else if (current.overlaps(item) || current.abutsStart(item)) {\n        return [sofar, current.union(item)];\n      } else {\n        return [sofar.concat([current]), item];\n      }\n    }, [[], null]);\n\n    if (final) {\n      found.push(final);\n    }\n\n    return found;\n  }\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n\n\n  static xor(intervals) {\n    let start = null,\n        currentCount = 0;\n    const results = [],\n          ends = intervals.map(i => [{\n      time: i.s,\n      type: \"s\"\n    }, {\n      time: i.e,\n      type: \"e\"\n    }]),\n          flattened = Array.prototype.concat(...ends),\n          arr = flattened.sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === \"s\" ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {Array}\n   */\n\n\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals)).map(i => this.intersection(i)).filter(i => i && !i.isEmpty());\n  }\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n\n\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n\n\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n  /**\n   * Returns an ISO 8601-compliant string representation of date of this Interval.\n   * The time components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {string}\n   */\n\n\n  toISODate() {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISODate()}/${this.e.toISODate()}`;\n  }\n  /**\n   * Returns an ISO 8601-compliant string representation of time of this Interval.\n   * The date components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n\n\n  toISOTime(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;\n  }\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format string.\n   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime#toFormat} for details.\n   * @param {Object} opts - options\n   * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations\n   * @return {string}\n   */\n\n\n  toFormat(dateFormat, {\n    separator = \" – \"\n  } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n\n\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n\n    return this.e.diff(this.s, unit, opts);\n  }\n  /**\n   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\n   * @param {function} mapFn\n   * @return {Interval}\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\n   */\n\n\n  mapEndpoints(mapFn) {\n    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n  }\n\n}","map":{"version":3,"names":["DateTime","friendlyDateTime","Duration","Settings","InvalidArgumentError","InvalidIntervalError","Invalid","INVALID","validateStartEnd","start","end","isValid","Interval","invalid","toISO","constructor","config","s","e","isLuxonInterval","reason","explanation","throwOnInvalid","fromDateTimes","builtStart","builtEnd","validateError","after","duration","dur","fromDurationLike","dt","plus","before","minus","fromISO","text","opts","split","startIsValid","endIsValid","isInterval","o","invalidReason","invalidExplanation","length","unit","toDuration","get","NaN","count","startOf","Math","floor","diff","hasSame","isEmpty","valueOf","isAfter","dateTime","isBefore","contains","set","splitAt","dateTimes","sorted","map","filter","d","sort","results","i","added","next","push","splitBy","as","idx","mapUnits","x","divideEqually","numberOfParts","slice","overlaps","other","abutsStart","abutsEnd","engulfs","equals","intersection","union","merge","intervals","found","final","a","b","reduce","sofar","current","item","concat","xor","currentCount","ends","time","type","flattened","Array","prototype","arr","difference","toString","toISODate","toISOTime","toFormat","dateFormat","separator","mapEndpoints","mapFn"],"sources":["E:/各个学科/论文/毕业论文/Atmosphere/eco-friendly/node_modules/luxon/src/interval.js"],"sourcesContent":["import DateTime, { friendlyDateTime } from \"./datetime.js\";\nimport Duration from \"./duration.js\";\nimport Settings from \"./settings.js\";\nimport { InvalidArgumentError, InvalidIntervalError } from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\n\nconst INVALID = \"Invalid Interval\";\n\n// checks if the start is equal to or before the end\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return Interval.invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return Interval.invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return Interval.invalid(\n      \"end before start\",\n      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`\n    );\n  } else {\n    return null;\n  }\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.\n * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.\n * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}\n * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.\n */\nexport default class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n    this.e = config.end;\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.isLuxonInterval = true;\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(invalid);\n    } else {\n      return new Interval({ invalid });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|Date|Object} start\n   * @param {DateTime|Date|Object} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start, end) {\n    const builtStart = friendlyDateTime(start),\n      builtEnd = friendlyDateTime(end);\n\n    const validateError = validateStartEnd(builtStart, builtEnd);\n\n    if (validateError == null) {\n      return new Interval({\n        start: builtStart,\n        end: builtEnd,\n      });\n    } else {\n      return validateError;\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|Date|Object} start\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static after(start, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|Date|Object} end\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static before(end, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string.\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n   * @param {string} text - the ISO string to parse\n   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {Interval}\n   */\n  static fromISO(text, opts) {\n    const [s, e] = (text || \"\").split(\"/\", 2);\n    if (s && e) {\n      let start, startIsValid;\n      try {\n        start = DateTime.fromISO(s, opts);\n        startIsValid = start.isValid;\n      } catch (e) {\n        startIsValid = false;\n      }\n\n      let end, endIsValid;\n      try {\n        end = DateTime.fromISO(e, opts);\n        endIsValid = end.isValid;\n      } catch (e) {\n        endIsValid = false;\n      }\n\n      if (startIsValid && endIsValid) {\n        return Interval.fromDateTimes(start, end);\n      }\n\n      if (startIsValid) {\n        const dur = Duration.fromISO(e, opts);\n        if (dur.isValid) {\n          return Interval.after(start, dur);\n        }\n      } else if (endIsValid) {\n        const dur = Duration.fromISO(s, opts);\n        if (dur.isValid) {\n          return Interval.before(end, dur);\n        }\n      }\n    }\n    return Interval.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n  }\n\n  /**\n   * Check if an object is an Interval. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isInterval(o) {\n    return (o && o.isLuxonInterval) || false;\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @type {DateTime}\n   */\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @type {DateTime}\n   */\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n\n  /**\n   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an error code if this Interval is invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  length(unit = \"milliseconds\") {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n  count(unit = \"milliseconds\") {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n      end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + 1;\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit) {\n    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return whether this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return whether this Interval's end is before the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e <= dateTime;\n  }\n\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {Object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set({ start, end } = {}) {\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...DateTime} dateTimes - the unit of time to count.\n   * @return {Array}\n   */\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes\n        .map(friendlyDateTime)\n        .filter((d) => this.contains(d))\n        .sort(),\n      results = [];\n    let { s } = this,\n      i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\n   * @return {Array}\n   */\n  splitBy(duration) {\n    const dur = Duration.fromDurationLike(duration);\n\n    if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n      return [];\n    }\n\n    let { s } = this,\n      idx = 1,\n      next;\n\n    const results = [];\n    while (s < this.e) {\n      const added = this.start.plus(dur.mapUnits((x) => x * idx));\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      idx += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {Array}\n   */\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * Returns null if the intersection is empty, meaning, the intervals don't intersect.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n\n    if (s >= e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static merge(intervals) {\n    const [found, final] = intervals\n      .sort((a, b) => a.s - b.s)\n      .reduce(\n        ([sofar, current], item) => {\n          if (!current) {\n            return [sofar, item];\n          } else if (current.overlaps(item) || current.abutsStart(item)) {\n            return [sofar, current.union(item)];\n          } else {\n            return [sofar.concat([current]), item];\n          }\n        },\n        [[], null]\n      );\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static xor(intervals) {\n    let start = null,\n      currentCount = 0;\n    const results = [],\n      ends = intervals.map((i) => [\n        { time: i.s, type: \"s\" },\n        { time: i.e, type: \"e\" },\n      ]),\n      flattened = Array.prototype.concat(...ends),\n      arr = flattened.sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === \"s\" ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {Array}\n   */\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals))\n      .map((i) => this.intersection(i))\n      .filter((i) => i && !i.isEmpty());\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of date of this Interval.\n   * The time components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {string}\n   */\n  toISODate() {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISODate()}/${this.e.toISODate()}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of time of this Interval.\n   * The date components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISOTime(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format string.\n   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime#toFormat} for details.\n   * @param {Object} opts - options\n   * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations\n   * @return {string}\n   */\n  toFormat(dateFormat, { separator = \" – \" } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n\n  /**\n   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\n   * @param {function} mapFn\n   * @return {Interval}\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\n   */\n  mapEndpoints(mapFn) {\n    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}