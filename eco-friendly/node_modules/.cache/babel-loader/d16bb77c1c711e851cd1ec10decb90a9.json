{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport { EvaluateAmbientLighting as i } from \"./EvaluateAmbientLighting.glsl.js\";\nimport { EvaluateAmbientOcclusion as n } from \"./EvaluateAmbientOcclusion.glsl.js\";\nimport { MainLighting as t } from \"./MainLighting.glsl.js\";\nimport { PhysicallyBasedRendering as o } from \"./PhysicallyBasedRendering.glsl.js\";\nimport { PBRMode as e } from \"./PhysicallyBasedRenderingParameters.glsl.js\";\nimport { PiUtils as a } from \"./PiUtils.glsl.js\";\nimport { BooleanPassUniform as r } from \"../../shaderModules/BooleanPassUniform.js\";\nimport { Float3PassUniform as l } from \"../../shaderModules/Float3PassUniform.js\";\nimport { FloatPassUniform as d } from \"../../shaderModules/FloatPassUniform.js\";\nimport { glsl as c } from \"../../shaderModules/interfaces.js\";\nimport { ambientBoost as s } from \"../../../lighting/SceneLighting.js\";\n\nfunction m(m, g) {\n  const h = m.fragment;\n  m.include(n, g), g.pbrMode !== e.Disabled && m.include(o, g), m.include(i, g), h.constants.add(\"ambientBoostFactor\", \"float\", s), m.include(a), h.code.add(c`\n    const float GAMMA_SRGB = 2.1;\n    const float INV_GAMMA_SRGB = 0.4761904;\n    ${g.pbrMode === e.Disabled ? \"\" : \"const vec3 GROUND_REFLECTANCE = vec3(0.2);\"}\n  `), h.uniforms.add(new l(\"lightingMainDirection\", (i, n) => n.lighting.lightingMainDirection)), h.code.add(c`\n    float additionalDirectedAmbientLight(vec3 vPosWorld) {\n      float vndl = dot(${g.spherical ? c`normalize(vPosWorld)` : c`vec3(0.0, 0.0, 1.0)`}, lightingMainDirection);\n      return smoothstep(0.0, 1.0, clamp(vndl * 2.5, 0.0, 1.0));\n    }\n  `), h.uniforms.add([new d(\"lightingGlobalFactor\", (i, n) => n.lighting.globalFactor), new l(\"lightingMainIntensity\", (i, n) => n.lighting.mainLight.intensity)]), h.code.add(c`vec3 evaluateAdditionalLighting(float ambientOcclusion, vec3 vPosWorld) {\nfloat additionalAmbientScale = additionalDirectedAmbientLight(vPosWorld);\nreturn (1.0 - ambientOcclusion) * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor * lightingMainIntensity;\n}`), g.pbrMode === e.Disabled || g.pbrMode === e.WaterOnIntegratedMesh ? (m.include(t, g), h.code.add(c`vec3 evaluateSceneLighting(vec3 normalWorld, vec3 albedo, float shadow, float ssao, vec3 additionalLight)\n{\nvec3 mainLighting = evaluateMainLighting(normalWorld, shadow);\nvec3 ambientLighting = calculateAmbientIrradiance(normalWorld, ssao);\nvec3 albedoLinear = pow(albedo, vec3(GAMMA_SRGB));\nvec3 totalLight = mainLighting + ambientLighting + additionalLight;\ntotalLight = min(totalLight, vec3(PI));\nvec3 outColor = vec3((albedoLinear / PI) * totalLight);\nreturn pow(outColor, vec3(INV_GAMMA_SRGB));\n}`)) : g.pbrMode !== e.Normal && g.pbrMode !== e.Schematic || (h.code.add(c`const float fillLightIntensity = 0.25;\nconst float horizonLightDiffusion = 0.4;\nconst float additionalAmbientIrradianceFactor = 0.02;\nvec3 evaluateSceneLightingPBR(vec3 normal, vec3 albedo, float shadow, float ssao, vec3 additionalLight, vec3 viewDir, vec3 normalGround, vec3 mrr, vec3 _emission, float additionalAmbientIrradiance)\n{\nvec3 viewDirection = -viewDir;\nvec3 mainLightDirection = lightingMainDirection;\nvec3 h = normalize(viewDirection + mainLightDirection);\nPBRShadingInfo inputs;\ninputs.NdotL = clamp(dot(normal, mainLightDirection), 0.001, 1.0);\ninputs.NdotV = clamp(abs(dot(normal, viewDirection)), 0.001, 1.0);\ninputs.NdotH = clamp(dot(normal, h), 0.0, 1.0);\ninputs.VdotH = clamp(dot(viewDirection, h), 0.0, 1.0);\ninputs.NdotNG = clamp(dot(normal, normalGround), -1.0, 1.0);\nvec3 reflectedView = normalize(reflect(viewDirection, normal));\ninputs.RdotNG = clamp(dot(reflectedView, normalGround), -1.0, 1.0);\ninputs.albedoLinear = pow(albedo, vec3(GAMMA_SRGB));\ninputs.ssao = ssao;\ninputs.metalness = mrr[0];\ninputs.roughness = clamp(mrr[1] * mrr[1], 0.001, 0.99);`), h.code.add(c`inputs.f0 = (0.16 * mrr[2] * mrr[2]) * (1.0 - inputs.metalness) + inputs.albedoLinear * inputs.metalness;\ninputs.f90 = vec3(clamp(dot(inputs.f0, vec3(50.0 * 0.33)), 0.0, 1.0));\ninputs.diffuseColor = inputs.albedoLinear * (vec3(1.0) - inputs.f0) * (1.0 - inputs.metalness);`), g.useFillLights ? h.uniforms.add(new r(\"hasFillLights\", (i, n) => n.enableFillLights)) : h.constants.add(\"hasFillLights\", \"bool\", !1), h.code.add(c`vec3 ambientDir = vec3(5.0 * normalGround[1] - normalGround[0] * normalGround[2], - 5.0 * normalGround[0] - normalGround[2] * normalGround[1], normalGround[1] * normalGround[1] + normalGround[0] * normalGround[0]);\nambientDir = ambientDir != vec3(0.0)? normalize(ambientDir) : normalize(vec3(5.0, -1.0, 0.0));\ninputs.NdotAmbDir = hasFillLights ? abs(dot(normal, ambientDir)) : 1.0;\nvec3 mainLightIrradianceComponent = inputs.NdotL * (1.0 - shadow) * lightingMainIntensity;\nvec3 fillLightsIrradianceComponent = inputs.NdotAmbDir * lightingMainIntensity * fillLightIntensity;\nvec3 ambientLightIrradianceComponent = calculateAmbientIrradiance(normal, ssao) + additionalLight;\ninputs.skyIrradianceToSurface = ambientLightIrradianceComponent + mainLightIrradianceComponent + fillLightsIrradianceComponent ;\ninputs.groundIrradianceToSurface = GROUND_REFLECTANCE * ambientLightIrradianceComponent + mainLightIrradianceComponent + fillLightsIrradianceComponent ;`), h.uniforms.add([new d(\"lightingSpecularStrength\", (i, n) => n.lighting.mainLight.specularStrength), new d(\"lightingEnvironmentStrength\", (i, n) => n.lighting.mainLight.environmentStrength)]), h.code.add(c`vec3 horizonRingDir = inputs.RdotNG * normalGround - reflectedView;\nvec3 horizonRingH = normalize(viewDirection + horizonRingDir);\ninputs.NdotH_Horizon = dot(normal, horizonRingH);\nvec3 mainLightRadianceComponent = lightingSpecularStrength * normalDistribution(inputs.NdotH, inputs.roughness) * lightingMainIntensity * (1.0 - shadow);\nvec3 horizonLightRadianceComponent = lightingEnvironmentStrength * normalDistribution(inputs.NdotH_Horizon, min(inputs.roughness + horizonLightDiffusion, 1.0)) * lightingMainIntensity * fillLightIntensity;\nvec3 ambientLightRadianceComponent = lightingEnvironmentStrength * calculateAmbientRadiance(ssao) + additionalLight;\ninputs.skyRadianceToSurface = ambientLightRadianceComponent + mainLightRadianceComponent + horizonLightRadianceComponent;\ninputs.groundRadianceToSurface = GROUND_REFLECTANCE * (ambientLightRadianceComponent + horizonLightRadianceComponent) + mainLightRadianceComponent;\ninputs.averageAmbientRadiance = ambientLightIrradianceComponent[1] * (1.0 + GROUND_REFLECTANCE[1]);`), h.code.add(c`\n        vec3 reflectedColorComponent = evaluateEnvironmentIllumination(inputs);\n        vec3 additionalMaterialReflectanceComponent = inputs.albedoLinear * additionalAmbientIrradiance;\n        vec3 emissionComponent = pow(_emission, vec3(GAMMA_SRGB));\n        vec3 outColorLinear = reflectedColorComponent + additionalMaterialReflectanceComponent + emissionComponent;\n        ${g.pbrMode === e.Schematic ? c`vec3 outColor = pow(max(vec3(0.0), outColorLinear - 0.005 * inputs.averageAmbientRadiance), vec3(INV_GAMMA_SRGB));` : c`vec3 outColor = pow(blackLevelSoftCompression(outColorLinear, inputs), vec3(INV_GAMMA_SRGB));`}\n        return outColor;\n      }\n    `));\n}\n\nexport { m as EvaluateSceneLighting };","map":{"version":3,"names":["EvaluateAmbientLighting","i","EvaluateAmbientOcclusion","n","MainLighting","t","PhysicallyBasedRendering","o","PBRMode","e","PiUtils","a","BooleanPassUniform","r","Float3PassUniform","l","FloatPassUniform","d","glsl","c","ambientBoost","s","m","g","h","fragment","include","pbrMode","Disabled","constants","add","code","uniforms","lighting","lightingMainDirection","spherical","globalFactor","mainLight","intensity","WaterOnIntegratedMesh","Normal","Schematic","useFillLights","enableFillLights","specularStrength","environmentStrength","EvaluateSceneLighting"],"sources":["C:/Users/hp/Desktop/eco-friendly atmosphere/Atmosphere/eco-friendly/node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport{EvaluateAmbientLighting as i}from\"./EvaluateAmbientLighting.glsl.js\";import{EvaluateAmbientOcclusion as n}from\"./EvaluateAmbientOcclusion.glsl.js\";import{MainLighting as t}from\"./MainLighting.glsl.js\";import{PhysicallyBasedRendering as o}from\"./PhysicallyBasedRendering.glsl.js\";import{PBRMode as e}from\"./PhysicallyBasedRenderingParameters.glsl.js\";import{PiUtils as a}from\"./PiUtils.glsl.js\";import{BooleanPassUniform as r}from\"../../shaderModules/BooleanPassUniform.js\";import{Float3PassUniform as l}from\"../../shaderModules/Float3PassUniform.js\";import{FloatPassUniform as d}from\"../../shaderModules/FloatPassUniform.js\";import{glsl as c}from\"../../shaderModules/interfaces.js\";import{ambientBoost as s}from\"../../../lighting/SceneLighting.js\";function m(m,g){const h=m.fragment;m.include(n,g),g.pbrMode!==e.Disabled&&m.include(o,g),m.include(i,g),h.constants.add(\"ambientBoostFactor\",\"float\",s),m.include(a),h.code.add(c`\n    const float GAMMA_SRGB = 2.1;\n    const float INV_GAMMA_SRGB = 0.4761904;\n    ${g.pbrMode===e.Disabled?\"\":\"const vec3 GROUND_REFLECTANCE = vec3(0.2);\"}\n  `),h.uniforms.add(new l(\"lightingMainDirection\",((i,n)=>n.lighting.lightingMainDirection))),h.code.add(c`\n    float additionalDirectedAmbientLight(vec3 vPosWorld) {\n      float vndl = dot(${g.spherical?c`normalize(vPosWorld)`:c`vec3(0.0, 0.0, 1.0)`}, lightingMainDirection);\n      return smoothstep(0.0, 1.0, clamp(vndl * 2.5, 0.0, 1.0));\n    }\n  `),h.uniforms.add([new d(\"lightingGlobalFactor\",((i,n)=>n.lighting.globalFactor)),new l(\"lightingMainIntensity\",((i,n)=>n.lighting.mainLight.intensity))]),h.code.add(c`vec3 evaluateAdditionalLighting(float ambientOcclusion, vec3 vPosWorld) {\nfloat additionalAmbientScale = additionalDirectedAmbientLight(vPosWorld);\nreturn (1.0 - ambientOcclusion) * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor * lightingMainIntensity;\n}`),g.pbrMode===e.Disabled||g.pbrMode===e.WaterOnIntegratedMesh?(m.include(t,g),h.code.add(c`vec3 evaluateSceneLighting(vec3 normalWorld, vec3 albedo, float shadow, float ssao, vec3 additionalLight)\n{\nvec3 mainLighting = evaluateMainLighting(normalWorld, shadow);\nvec3 ambientLighting = calculateAmbientIrradiance(normalWorld, ssao);\nvec3 albedoLinear = pow(albedo, vec3(GAMMA_SRGB));\nvec3 totalLight = mainLighting + ambientLighting + additionalLight;\ntotalLight = min(totalLight, vec3(PI));\nvec3 outColor = vec3((albedoLinear / PI) * totalLight);\nreturn pow(outColor, vec3(INV_GAMMA_SRGB));\n}`)):g.pbrMode!==e.Normal&&g.pbrMode!==e.Schematic||(h.code.add(c`const float fillLightIntensity = 0.25;\nconst float horizonLightDiffusion = 0.4;\nconst float additionalAmbientIrradianceFactor = 0.02;\nvec3 evaluateSceneLightingPBR(vec3 normal, vec3 albedo, float shadow, float ssao, vec3 additionalLight, vec3 viewDir, vec3 normalGround, vec3 mrr, vec3 _emission, float additionalAmbientIrradiance)\n{\nvec3 viewDirection = -viewDir;\nvec3 mainLightDirection = lightingMainDirection;\nvec3 h = normalize(viewDirection + mainLightDirection);\nPBRShadingInfo inputs;\ninputs.NdotL = clamp(dot(normal, mainLightDirection), 0.001, 1.0);\ninputs.NdotV = clamp(abs(dot(normal, viewDirection)), 0.001, 1.0);\ninputs.NdotH = clamp(dot(normal, h), 0.0, 1.0);\ninputs.VdotH = clamp(dot(viewDirection, h), 0.0, 1.0);\ninputs.NdotNG = clamp(dot(normal, normalGround), -1.0, 1.0);\nvec3 reflectedView = normalize(reflect(viewDirection, normal));\ninputs.RdotNG = clamp(dot(reflectedView, normalGround), -1.0, 1.0);\ninputs.albedoLinear = pow(albedo, vec3(GAMMA_SRGB));\ninputs.ssao = ssao;\ninputs.metalness = mrr[0];\ninputs.roughness = clamp(mrr[1] * mrr[1], 0.001, 0.99);`),h.code.add(c`inputs.f0 = (0.16 * mrr[2] * mrr[2]) * (1.0 - inputs.metalness) + inputs.albedoLinear * inputs.metalness;\ninputs.f90 = vec3(clamp(dot(inputs.f0, vec3(50.0 * 0.33)), 0.0, 1.0));\ninputs.diffuseColor = inputs.albedoLinear * (vec3(1.0) - inputs.f0) * (1.0 - inputs.metalness);`),g.useFillLights?h.uniforms.add(new r(\"hasFillLights\",((i,n)=>n.enableFillLights))):h.constants.add(\"hasFillLights\",\"bool\",!1),h.code.add(c`vec3 ambientDir = vec3(5.0 * normalGround[1] - normalGround[0] * normalGround[2], - 5.0 * normalGround[0] - normalGround[2] * normalGround[1], normalGround[1] * normalGround[1] + normalGround[0] * normalGround[0]);\nambientDir = ambientDir != vec3(0.0)? normalize(ambientDir) : normalize(vec3(5.0, -1.0, 0.0));\ninputs.NdotAmbDir = hasFillLights ? abs(dot(normal, ambientDir)) : 1.0;\nvec3 mainLightIrradianceComponent = inputs.NdotL * (1.0 - shadow) * lightingMainIntensity;\nvec3 fillLightsIrradianceComponent = inputs.NdotAmbDir * lightingMainIntensity * fillLightIntensity;\nvec3 ambientLightIrradianceComponent = calculateAmbientIrradiance(normal, ssao) + additionalLight;\ninputs.skyIrradianceToSurface = ambientLightIrradianceComponent + mainLightIrradianceComponent + fillLightsIrradianceComponent ;\ninputs.groundIrradianceToSurface = GROUND_REFLECTANCE * ambientLightIrradianceComponent + mainLightIrradianceComponent + fillLightsIrradianceComponent ;`),h.uniforms.add([new d(\"lightingSpecularStrength\",((i,n)=>n.lighting.mainLight.specularStrength)),new d(\"lightingEnvironmentStrength\",((i,n)=>n.lighting.mainLight.environmentStrength))]),h.code.add(c`vec3 horizonRingDir = inputs.RdotNG * normalGround - reflectedView;\nvec3 horizonRingH = normalize(viewDirection + horizonRingDir);\ninputs.NdotH_Horizon = dot(normal, horizonRingH);\nvec3 mainLightRadianceComponent = lightingSpecularStrength * normalDistribution(inputs.NdotH, inputs.roughness) * lightingMainIntensity * (1.0 - shadow);\nvec3 horizonLightRadianceComponent = lightingEnvironmentStrength * normalDistribution(inputs.NdotH_Horizon, min(inputs.roughness + horizonLightDiffusion, 1.0)) * lightingMainIntensity * fillLightIntensity;\nvec3 ambientLightRadianceComponent = lightingEnvironmentStrength * calculateAmbientRadiance(ssao) + additionalLight;\ninputs.skyRadianceToSurface = ambientLightRadianceComponent + mainLightRadianceComponent + horizonLightRadianceComponent;\ninputs.groundRadianceToSurface = GROUND_REFLECTANCE * (ambientLightRadianceComponent + horizonLightRadianceComponent) + mainLightRadianceComponent;\ninputs.averageAmbientRadiance = ambientLightIrradianceComponent[1] * (1.0 + GROUND_REFLECTANCE[1]);`),h.code.add(c`\n        vec3 reflectedColorComponent = evaluateEnvironmentIllumination(inputs);\n        vec3 additionalMaterialReflectanceComponent = inputs.albedoLinear * additionalAmbientIrradiance;\n        vec3 emissionComponent = pow(_emission, vec3(GAMMA_SRGB));\n        vec3 outColorLinear = reflectedColorComponent + additionalMaterialReflectanceComponent + emissionComponent;\n        ${g.pbrMode===e.Schematic?c`vec3 outColor = pow(max(vec3(0.0), outColorLinear - 0.005 * inputs.averageAmbientRadiance), vec3(INV_GAMMA_SRGB));`:c`vec3 outColor = pow(blackLevelSoftCompression(outColorLinear, inputs), vec3(INV_GAMMA_SRGB));`}\n        return outColor;\n      }\n    `))}export{m as EvaluateSceneLighting};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}