{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport { result as e } from \"../../core/asyncUtils.js\";\nimport t from \"../../core/Error.js\";\nimport { isNone as i, isSome as o } from \"../../core/maybe.js\";\nimport { whenOrAbort as s, throwIfAbortError as l, eachAlways as n } from \"../../core/promiseUtils.js\";\nimport { getMetersPerUnitForSR as a } from \"../../core/unitUtils.js\";\nimport r from \"../../geometry/Multipoint.js\";\nimport c from \"../../geometry/Point.js\";\nimport u from \"../../geometry/Polyline.js\";\nimport { initializeProjection as h, project as p } from \"../../geometry/projection.js\";\nimport { fromExtent as m, create as f, contains as d } from \"../../geometry/support/aaBoundingRect.js\";\nimport { MultiTileElevationSampler as y } from \"./ElevationSampler.js\";\nimport { ElevationTile as T } from \"./ElevationTile.js\";\n\nclass v {\n  async queryAll(e, i, o) {\n    if (!(e = o && o.ignoreInvisibleLayers ? e.filter(e => e.visible) : e.slice()).length) throw new t(\"elevation-query:invalid-layer\", \"Elevation queries require at least one elevation layer to fetch tiles from\");\n    const s = x.fromGeometry(i);\n    let l = !1;\n    o && o.returnSampleInfo || (l = !0);\n    const n = { ...R,\n      ...o,\n      returnSampleInfo: !0\n    },\n          a = await this.query(e[e.length - 1], s, n),\n          r = await this._queryAllContinue(e, a, n);\n    return r.geometry = r.geometry.export(), l && delete r.sampleInfo, r;\n  }\n\n  async query(e, i, o) {\n    if (!e) throw new t(\"elevation-query:invalid-layer\", \"Elevation queries require an elevation layer to fetch tiles from\");\n    if (!i || !(i instanceof x) && \"point\" !== i.type && \"multipoint\" !== i.type && \"polyline\" !== i.type) throw new t(\"elevation-query:invalid-geometry\", \"Only point, polyline and multipoint geometries can be used to query elevation\");\n    const s = { ...R,\n      ...o\n    },\n          l = new w(e, i.spatialReference, s),\n          n = s.signal;\n    return await e.load({\n      signal: n\n    }), await this._createGeometryDescriptor(l, i, n), await this._selectTiles(l, n), await this._populateElevationTiles(l, n), this._sampleGeometryWithElevation(l), this._createQueryResult(l, n);\n  }\n\n  async createSampler(e, i, o) {\n    if (!e) throw new t(\"elevation-query:invalid-layer\", \"Elevation queries require an elevation layer to fetch tiles from\");\n    if (!i || \"extent\" !== i.type) throw new t(\"elevation-query:invalid-extent\", \"Invalid or undefined extent\");\n    const s = { ...R,\n      ...o\n    };\n    return this._createSampler(e, i, s);\n  }\n\n  async createSamplerAll(e, i, o) {\n    if (!(e = o && o.ignoreInvisibleLayers ? e.filter(e => e.visible) : e.slice()).length) throw new t(\"elevation-query:invalid-layer\", \"Elevation queries require at least one elevation layer to fetch tiles from\");\n    if (!i || \"extent\" !== i.type) throw new t(\"elevation-query:invalid-extent\", \"Invalid or undefined extent\");\n    const s = { ...R,\n      ...o,\n      returnSampleInfo: !0\n    },\n          l = await this._createSampler(e[e.length - 1], i, s);\n    return this._createSamplerAllContinue(e, i, l, s);\n  }\n\n  async _createSampler(e, t, i, o) {\n    const s = i.signal;\n    await e.load({\n      signal: s\n    });\n    const l = t.spatialReference,\n          n = e.tileInfo.spatialReference;\n    l.equals(n) || (await h([{\n      source: l,\n      dest: n\n    }], {\n      signal: s\n    }), t = p(t, n));\n    const a = new _(e, t, i, o);\n    return await this._selectTiles(a, s), await this._populateElevationTiles(a, s), new y(a.elevationTiles, a.layer.tileInfo, a.options.noDataValue);\n  }\n\n  async _createSamplerAllContinue(e, t, i, o) {\n    if (e.pop(), !e.length) return i;\n    const s = i.samplers.map(e => m(e.extent)),\n          l = await this._createSampler(e[e.length - 1], t, o, s);\n    if (0 === l.samplers.length) return i;\n    const n = i.samplers.concat(l.samplers),\n          a = new y(n, o.noDataValue);\n    return this._createSamplerAllContinue(e, t, a, o);\n  }\n\n  async _queryAllContinue(e, t, i) {\n    const o = e.pop(),\n          s = t.geometry.coordinates,\n          l = [],\n          n = [];\n\n    for (let c = 0; c < s.length; c++) {\n      const i = t.sampleInfo[c];\n      i.demResolution >= 0 ? i.source || (i.source = o) : e.length && (l.push(s[c]), n.push(c));\n    }\n\n    if (!e.length || 0 === l.length) return t;\n    const a = t.geometry.clone(l),\n          r = await this.query(e[e.length - 1], a, i);\n    return n.forEach((e, i) => {\n      s[e].z = r.geometry.coordinates[i].z, t.sampleInfo[e].demResolution = r.sampleInfo[i].demResolution;\n    }), this._queryAllContinue(e, t, i);\n  }\n\n  async _createQueryResult(e, t) {\n    const i = {\n      geometry: (await e.geometry.project(e.outSpatialReference, t)).export(),\n      noDataValue: e.options.noDataValue\n    };\n    return e.options.returnSampleInfo && (i.sampleInfo = this._extractSampleInfo(e)), e.geometry.coordinates.forEach(e => {\n      e.tile = null, e.elevationTile = null;\n    }), i;\n  }\n\n  async _createGeometryDescriptor(e, i, o) {\n    let s;\n    const l = e.layer.tileInfo.spatialReference;\n    if (i instanceof x ? s = await i.project(l, o) : (await h([{\n      source: i.spatialReference,\n      dest: l\n    }], {\n      signal: o\n    }), s = p(i, l)), !s) throw new t(\"elevation-query:spatial-reference-mismatch\", `Cannot query elevation in '${i.spatialReference.wkid}' on an elevation service in '${l.wkid}'`);\n    e.geometry = x.fromGeometry(s);\n  }\n\n  async _selectTiles(e, i) {\n    const o = e.options.demResolution;\n    if (\"geometry\" === e.type && this._preselectOutsideLayerExtent(e), \"number\" == typeof o) this._selectTilesClosestResolution(e);else if (\"finest-contiguous\" === o) await this._selectTilesFinestContiguous(e, i);else {\n      if (\"auto\" !== o) throw new t(\"elevation-query:invalid-dem-resolution\", `Invalid dem resolution value '${o}', expected a number, \"finest-contiguous\" or \"auto\"`);\n      await this._selectTilesAuto(e, i);\n    }\n  }\n\n  _preselectOutsideLayerExtent(e) {\n    if (i(e.layer.fullExtent)) return;\n    const t = new T(null);\n    t.sample = () => e.options.noDataValue, e.outsideExtentTile = t;\n    const o = e.layer.fullExtent;\n    e.geometry.coordinates.forEach(e => {\n      const i = e.x,\n            s = e.y;\n      (i < o.xmin || i > o.xmax || s < o.ymin || s > o.ymax) && (e.elevationTile = t);\n    });\n  }\n\n  _selectTilesClosestResolution(e) {\n    const t = e.layer.tileInfo,\n          i = this._findNearestDemResolutionLODIndex(t, e.options.demResolution);\n\n    e.selectTilesAtLOD(i);\n  }\n\n  _findNearestDemResolutionLODIndex(e, t) {\n    const i = t / a(e.spatialReference);\n    let o = e.lods[0],\n        s = 0;\n\n    for (let l = 1; l < e.lods.length; l++) {\n      const t = e.lods[l];\n      Math.abs(t.resolution - i) < Math.abs(o.resolution - i) && (o = t, s = l);\n    }\n\n    return s;\n  }\n\n  async _selectTilesFinestContiguous(e, t) {\n    const i = E(e.layer.tileInfo, e.options.minDemResolution);\n    await this._selectTilesFinestContiguousAt(e, i, t);\n  }\n\n  async _selectTilesFinestContiguousAt(e, i, o) {\n    const n = e.layer;\n    if (e.selectTilesAtLOD(i), i < 0) return;\n    const a = n.tilemapCache,\n          r = e.getTilesToFetch();\n\n    try {\n      if (a) await s(Promise.all(r.map(e => a.fetchAvailability(e.level, e.row, e.col, {\n        signal: o\n      }))), o);else if (await this._populateElevationTiles(e, o), !e.allElevationTilesFetched()) throw e.clearElevationTiles(), new t(\"elevation-query:has-unavailable-tiles\");\n    } catch (c) {\n      l(c), await this._selectTilesFinestContiguousAt(e, i - 1, o);\n    }\n  }\n\n  async _populateElevationTiles(e, t) {\n    const i = e.getTilesToFetch(),\n          l = {},\n          a = e.options.cache,\n          r = e.options.noDataValue,\n          c = i.map(async i => {\n      const s = `${e.layer.uid}:${i.id}:${r}`,\n            n = o(a) ? a.get(s) : null,\n            c = o(n) ? n : await e.layer.fetchTile(i.level, i.row, i.col, {\n        noDataValue: r,\n        signal: t\n      });\n      o(a) && a.put(s, c), l[i.id] = new T(i, c);\n    });\n    await s(n(c), t), e.populateElevationTiles(l);\n  }\n\n  async _selectTilesAuto(t, i) {\n    this._selectTilesAutoFinest(t), this._reduceTilesForMaximumRequests(t);\n    const o = t.layer.tilemapCache;\n    if (!o) return this._selectTilesAutoPrefetchUpsample(t, i);\n    const n = t.getTilesToFetch(),\n          a = {},\n          r = n.map(async t => {\n      const s = {\n        id: null,\n        level: 0,\n        row: 0,\n        col: 0,\n        extent: f()\n      },\n            n = await e(o.fetchAvailabilityUpsample(t.level, t.row, t.col, s, {\n        signal: i\n      }));\n      !1 === n.ok ? l(n.error) : a[t.id] = s;\n    });\n    await s(Promise.all(r), i), t.remapTiles(a);\n  }\n\n  _reduceTilesForMaximumRequests(e) {\n    const t = e.layer.tileInfo;\n    let i = 0;\n\n    const o = {},\n          s = e => {\n      e.id in o ? o[e.id]++ : (o[e.id] = 1, i++);\n    },\n          l = e => {\n      const t = o[e.id];\n      1 === t ? (delete o[e.id], i--) : o[e.id] = t - 1;\n    };\n\n    e.forEachTileToFetch(s, l);\n    let n = !0;\n\n    for (; n && (n = !1, e.forEachTileToFetch(o => {\n      i <= e.options.maximumAutoTileRequests || (l(o), t.upsampleTile(o) && (n = !0), s(o));\n    }, l), n););\n  }\n\n  _selectTilesAutoFinest(e) {\n    const t = E(e.layer.tileInfo, e.options.minDemResolution);\n    e.selectTilesAtLOD(t, e.options.maximumAutoTileRequests);\n  }\n\n  async _selectTilesAutoPrefetchUpsample(e, t) {\n    const i = e.layer.tileInfo;\n    await this._populateElevationTiles(e, t);\n    let o = !1;\n    e.forEachTileToFetch((e, t) => {\n      i.upsampleTile(e) ? o = !0 : t();\n    }), o && (await this._selectTilesAutoPrefetchUpsample(e, t));\n  }\n\n  _sampleGeometryWithElevation(e) {\n    e.geometry.coordinates.forEach(t => {\n      const i = t.elevationTile;\n      let s = e.options.noDataValue;\n\n      if (i) {\n        const e = i.sample(t.x, t.y);\n        o(e) ? s = e : t.elevationTile = null;\n      }\n\n      t.z = s;\n    });\n  }\n\n  _extractSampleInfo(e) {\n    const t = e.layer.tileInfo,\n          i = a(t.spatialReference);\n    return e.geometry.coordinates.map(o => {\n      let s = -1;\n\n      if (o.elevationTile && o.elevationTile !== e.outsideExtentTile) {\n        s = t.lodAt(o.elevationTile.tile.level).resolution * i;\n      }\n\n      return {\n        demResolution: s\n      };\n    });\n  }\n\n}\n\nclass x {\n  export() {\n    return this._exporter(this.coordinates, this.spatialReference);\n  }\n\n  clone(e) {\n    const t = new x();\n    return t.geometry = this.geometry, t.spatialReference = this.spatialReference, t.coordinates = e || this.coordinates.map(e => this._cloneCoordinate(e)), t._exporter = this._exporter, t;\n  }\n\n  async project(e, t) {\n    if (this.spatialReference.equals(e)) return this.clone();\n    await h([{\n      source: this.spatialReference,\n      dest: e\n    }], {\n      signal: t\n    });\n    const i = new r({\n      spatialReference: this.spatialReference,\n      points: this.coordinates.map(e => [e.x, e.y])\n    }),\n          o = p(i, e);\n    if (!o) return null;\n    const s = this.coordinates.map((e, t) => {\n      const i = this._cloneCoordinate(e),\n            s = o.points[t];\n\n      return i.x = s[0], i.y = s[1], i;\n    }),\n          l = this.clone(s);\n    return l.spatialReference = e, l;\n  }\n\n  _cloneCoordinate(e) {\n    return {\n      x: e.x,\n      y: e.y,\n      z: e.z,\n      m: e.m,\n      tile: null,\n      elevationTile: null\n    };\n  }\n\n  static fromGeometry(e) {\n    const t = new x();\n    if (t.geometry = e, t.spatialReference = e.spatialReference, e instanceof x) t.coordinates = e.coordinates.map(e => t._cloneCoordinate(e)), t._exporter = (t, i) => {\n      const o = e.clone(t);\n      return o.spatialReference = i, o;\n    };else switch (e.type) {\n      case \"point\":\n        {\n          const i = e,\n                {\n            hasZ: o,\n            hasM: s\n          } = i;\n          t.coordinates = o && s ? [{\n            x: i.x,\n            y: i.y,\n            z: i.z,\n            m: i.m\n          }] : o ? [{\n            x: i.x,\n            y: i.y,\n            z: i.z\n          }] : s ? [{\n            x: i.x,\n            y: i.y,\n            m: i.m\n          }] : [{\n            x: i.x,\n            y: i.y\n          }], t._exporter = (t, i) => e.hasM ? new c(t[0].x, t[0].y, t[0].z, t[0].m, i) : new c(t[0].x, t[0].y, t[0].z, i);\n          break;\n        }\n\n      case \"multipoint\":\n        {\n          const i = e,\n                {\n            hasZ: o,\n            hasM: s\n          } = i;\n          t.coordinates = o && s ? i.points.map(e => ({\n            x: e[0],\n            y: e[1],\n            z: e[2],\n            m: e[3]\n          })) : o ? i.points.map(e => ({\n            x: e[0],\n            y: e[1],\n            z: e[2]\n          })) : s ? i.points.map(e => ({\n            x: e[0],\n            y: e[1],\n            m: e[2]\n          })) : i.points.map(e => ({\n            x: e[0],\n            y: e[1]\n          })), t._exporter = (t, i) => e.hasM ? new r({\n            points: t.map(e => [e.x, e.y, e.z, e.m]),\n            hasZ: !0,\n            hasM: !0,\n            spatiaReference: i\n          }) : new r(t.map(e => [e.x, e.y, e.z]), i);\n          break;\n        }\n\n      case \"polyline\":\n        {\n          const i = e,\n                o = [],\n                s = [],\n                {\n            hasZ: l,\n            hasM: n\n          } = e;\n          let a = 0;\n\n          for (const e of i.paths) if (s.push([a, a + e.length]), a += e.length, l && n) for (const t of e) o.push({\n            x: t[0],\n            y: t[1],\n            z: t[2],\n            m: t[3]\n          });else if (l) for (const t of e) o.push({\n            x: t[0],\n            y: t[1],\n            z: t[2]\n          });else if (n) for (const t of e) o.push({\n            x: t[0],\n            y: t[1],\n            m: t[2]\n          });else for (const t of e) o.push({\n            x: t[0],\n            y: t[1]\n          });\n\n          t.coordinates = o, t._exporter = (t, i) => {\n            const o = e.hasM ? t.map(e => [e.x, e.y, e.z, e.m]) : t.map(e => [e.x, e.y, e.z]),\n                  l = s.map(e => o.slice(e[0], e[1]));\n            return new u({\n              paths: l,\n              hasM: e.hasM,\n              hasZ: !0,\n              spatialReference: i\n            });\n          };\n          break;\n        }\n    }\n    return t;\n  }\n\n}\n\nclass g {\n  constructor(e, t) {\n    this.layer = e, this.options = t;\n  }\n\n}\n\nclass w extends g {\n  constructor(e, t, i) {\n    super(e, i), this.outSpatialReference = t, this.type = \"geometry\";\n  }\n\n  selectTilesAtLOD(e) {\n    if (e < 0) this.geometry.coordinates.forEach(e => e.tile = null);else {\n      const t = this.layer.tileInfo,\n            i = t.lods[e].level;\n      this.geometry.coordinates.forEach(e => {\n        e.tile = t.tileAt(i, e.x, e.y);\n      });\n    }\n  }\n\n  allElevationTilesFetched() {\n    return !this.geometry.coordinates.some(e => !e.elevationTile);\n  }\n\n  clearElevationTiles() {\n    for (const e of this.geometry.coordinates) e.elevationTile !== this.outsideExtentTile && (e.elevationTile = null);\n  }\n\n  populateElevationTiles(e) {\n    for (const t of this.geometry.coordinates) !t.elevationTile && t.tile && (t.elevationTile = e[t.tile.id]);\n  }\n\n  remapTiles(e) {\n    for (const t of this.geometry.coordinates) t.tile = e[t.tile.id];\n  }\n\n  getTilesToFetch() {\n    const e = {},\n          t = [];\n\n    for (const i of this.geometry.coordinates) {\n      const o = i.tile;\n      i.elevationTile || !i.tile || e[o.id] || (e[o.id] = o, t.push(o));\n    }\n\n    return t;\n  }\n\n  forEachTileToFetch(e) {\n    for (const t of this.geometry.coordinates) t.tile && !t.elevationTile && e(t.tile, () => t.tile = null);\n  }\n\n}\n\nclass _ extends g {\n  constructor(e, t, i, o) {\n    super(e, i), this.type = \"extent\", this.elevationTiles = [], this.candidateTiles = [], this.fetchedCandidates = new Set(), this.extent = t.intersection(e.fullExtent), this.maskExtents = o;\n  }\n\n  selectTilesAtLOD(e, t) {\n    const i = this._maximumLodForRequests(t),\n          o = Math.min(i, e);\n\n    o < 0 ? this.candidateTiles.length = 0 : this._selectCandidateTilesCoveringExtentAt(o);\n  }\n\n  _maximumLodForRequests(e) {\n    const t = this.layer.tileInfo;\n    if (!e) return t.lods.length - 1;\n    const o = this.extent;\n    if (i(o)) return -1;\n\n    for (let i = t.lods.length - 1; i >= 0; i--) {\n      const s = t.lods[i],\n            l = s.resolution * t.size[0],\n            n = s.resolution * t.size[1];\n      if (Math.ceil(o.width / l) * Math.ceil(o.height / n) <= e) return i;\n    }\n\n    return -1;\n  }\n\n  allElevationTilesFetched() {\n    return this.candidateTiles.length === this.elevationTiles.length;\n  }\n\n  clearElevationTiles() {\n    this.elevationTiles.length = 0, this.fetchedCandidates.clear();\n  }\n\n  populateElevationTiles(e) {\n    for (const t of this.candidateTiles) {\n      const i = e[t.id];\n      i && (this.fetchedCandidates.add(t), this.elevationTiles.push(i));\n    }\n  }\n\n  remapTiles(e) {\n    this.candidateTiles = this._uniqueNonOverlappingTiles(this.candidateTiles.map(t => e[t.id]));\n  }\n\n  getTilesToFetch() {\n    return this.candidateTiles;\n  }\n\n  forEachTileToFetch(e, t) {\n    const i = this.candidateTiles;\n    this.candidateTiles = [], i.forEach(i => {\n      if (this.fetchedCandidates.has(i)) return void (t && t(i));\n      let o = !1;\n      e(i, () => o = !0), o ? t && t(i) : this.candidateTiles.push(i);\n    }), this.candidateTiles = this._uniqueNonOverlappingTiles(this.candidateTiles, t);\n  }\n\n  _uniqueNonOverlappingTiles(e, t) {\n    const i = {},\n          o = [];\n\n    for (const l of e) i[l.id] ? t && t(l) : (i[l.id] = l, o.push(l));\n\n    const s = o.sort((e, t) => e.level - t.level);\n    return s.filter((e, i) => {\n      for (let o = 0; o < i; o++) if (d(s[o].extent, e.extent)) return t && t(e), !1;\n\n      return !0;\n    });\n  }\n\n  _selectCandidateTilesCoveringExtentAt(e) {\n    this.candidateTiles.length = 0;\n    const t = this.extent;\n    if (i(t)) return;\n    const o = this.layer.tileInfo,\n          s = o.lods[e],\n          l = o.tileAt(s.level, t.xmin, t.ymin),\n          n = s.resolution * o.size[0],\n          a = s.resolution * o.size[1],\n          r = Math.ceil((t.xmax - l.extent[0]) / n),\n          c = Math.ceil((t.ymax - l.extent[1]) / a);\n\n    for (let i = 0; i < c; i++) for (let e = 0; e < r; e++) {\n      const t = {\n        id: null,\n        level: l.level,\n        row: l.row - i,\n        col: l.col + e\n      };\n      o.updateTileInfo(t), this._tileIsMasked(t) || this.candidateTiles.push(t);\n    }\n  }\n\n  _tileIsMasked(e) {\n    return !!this.maskExtents && this.maskExtents.some(t => d(t, e.extent));\n  }\n\n}\n\nfunction E(e, t) {\n  let i = e.lods.length - 1;\n\n  if (t > 0) {\n    const o = e.lods.findIndex(e => e.resolution < t);\n    0 === o ? i = 0 : o > 0 && (i = o - 1);\n  }\n\n  return i;\n}\n\nconst R = {\n  maximumAutoTileRequests: 20,\n  noDataValue: 0,\n  returnSampleInfo: !1,\n  demResolution: \"auto\",\n  minDemResolution: 0\n};\nexport { v as ElevationQuery, x as GeometryDescriptor, E as getFinestLodIndex };","map":{"version":3,"names":["result","e","t","isNone","i","isSome","o","whenOrAbort","s","throwIfAbortError","l","eachAlways","n","getMetersPerUnitForSR","a","r","c","u","initializeProjection","h","project","p","fromExtent","m","create","f","contains","d","MultiTileElevationSampler","y","ElevationTile","T","v","queryAll","ignoreInvisibleLayers","filter","visible","slice","length","x","fromGeometry","returnSampleInfo","R","query","_queryAllContinue","geometry","export","sampleInfo","type","w","spatialReference","signal","load","_createGeometryDescriptor","_selectTiles","_populateElevationTiles","_sampleGeometryWithElevation","_createQueryResult","createSampler","_createSampler","createSamplerAll","_createSamplerAllContinue","tileInfo","equals","source","dest","_","elevationTiles","layer","options","noDataValue","pop","samplers","map","extent","concat","coordinates","demResolution","push","clone","forEach","z","outSpatialReference","_extractSampleInfo","tile","elevationTile","wkid","_preselectOutsideLayerExtent","_selectTilesClosestResolution","_selectTilesFinestContiguous","_selectTilesAuto","fullExtent","sample","outsideExtentTile","xmin","xmax","ymin","ymax","_findNearestDemResolutionLODIndex","selectTilesAtLOD","lods","Math","abs","resolution","E","minDemResolution","_selectTilesFinestContiguousAt","tilemapCache","getTilesToFetch","Promise","all","fetchAvailability","level","row","col","allElevationTilesFetched","clearElevationTiles","cache","uid","id","get","fetchTile","put","populateElevationTiles","_selectTilesAutoFinest","_reduceTilesForMaximumRequests","_selectTilesAutoPrefetchUpsample","fetchAvailabilityUpsample","ok","error","remapTiles","forEachTileToFetch","maximumAutoTileRequests","upsampleTile","lodAt","_exporter","_cloneCoordinate","points","hasZ","hasM","spatiaReference","paths","g","constructor","tileAt","some","candidateTiles","fetchedCandidates","Set","intersection","maskExtents","_maximumLodForRequests","min","_selectCandidateTilesCoveringExtentAt","size","ceil","width","height","clear","add","_uniqueNonOverlappingTiles","has","sort","updateTileInfo","_tileIsMasked","findIndex","ElevationQuery","GeometryDescriptor","getFinestLodIndex"],"sources":["C:/Users/hp/Desktop/eco-friendly atmosphere/Atmosphere/eco-friendly/node_modules/@arcgis/core/layers/support/ElevationQuery.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport{result as e}from\"../../core/asyncUtils.js\";import t from\"../../core/Error.js\";import{isNone as i,isSome as o}from\"../../core/maybe.js\";import{whenOrAbort as s,throwIfAbortError as l,eachAlways as n}from\"../../core/promiseUtils.js\";import{getMetersPerUnitForSR as a}from\"../../core/unitUtils.js\";import r from\"../../geometry/Multipoint.js\";import c from\"../../geometry/Point.js\";import u from\"../../geometry/Polyline.js\";import{initializeProjection as h,project as p}from\"../../geometry/projection.js\";import{fromExtent as m,create as f,contains as d}from\"../../geometry/support/aaBoundingRect.js\";import{MultiTileElevationSampler as y}from\"./ElevationSampler.js\";import{ElevationTile as T}from\"./ElevationTile.js\";class v{async queryAll(e,i,o){if(!(e=o&&o.ignoreInvisibleLayers?e.filter((e=>e.visible)):e.slice()).length)throw new t(\"elevation-query:invalid-layer\",\"Elevation queries require at least one elevation layer to fetch tiles from\");const s=x.fromGeometry(i);let l=!1;o&&o.returnSampleInfo||(l=!0);const n={...R,...o,returnSampleInfo:!0},a=await this.query(e[e.length-1],s,n),r=await this._queryAllContinue(e,a,n);return r.geometry=r.geometry.export(),l&&delete r.sampleInfo,r}async query(e,i,o){if(!e)throw new t(\"elevation-query:invalid-layer\",\"Elevation queries require an elevation layer to fetch tiles from\");if(!i||!(i instanceof x)&&\"point\"!==i.type&&\"multipoint\"!==i.type&&\"polyline\"!==i.type)throw new t(\"elevation-query:invalid-geometry\",\"Only point, polyline and multipoint geometries can be used to query elevation\");const s={...R,...o},l=new w(e,i.spatialReference,s),n=s.signal;return await e.load({signal:n}),await this._createGeometryDescriptor(l,i,n),await this._selectTiles(l,n),await this._populateElevationTiles(l,n),this._sampleGeometryWithElevation(l),this._createQueryResult(l,n)}async createSampler(e,i,o){if(!e)throw new t(\"elevation-query:invalid-layer\",\"Elevation queries require an elevation layer to fetch tiles from\");if(!i||\"extent\"!==i.type)throw new t(\"elevation-query:invalid-extent\",\"Invalid or undefined extent\");const s={...R,...o};return this._createSampler(e,i,s)}async createSamplerAll(e,i,o){if(!(e=o&&o.ignoreInvisibleLayers?e.filter((e=>e.visible)):e.slice()).length)throw new t(\"elevation-query:invalid-layer\",\"Elevation queries require at least one elevation layer to fetch tiles from\");if(!i||\"extent\"!==i.type)throw new t(\"elevation-query:invalid-extent\",\"Invalid or undefined extent\");const s={...R,...o,returnSampleInfo:!0},l=await this._createSampler(e[e.length-1],i,s);return this._createSamplerAllContinue(e,i,l,s)}async _createSampler(e,t,i,o){const s=i.signal;await e.load({signal:s});const l=t.spatialReference,n=e.tileInfo.spatialReference;l.equals(n)||(await h([{source:l,dest:n}],{signal:s}),t=p(t,n));const a=new _(e,t,i,o);return await this._selectTiles(a,s),await this._populateElevationTiles(a,s),new y(a.elevationTiles,a.layer.tileInfo,a.options.noDataValue)}async _createSamplerAllContinue(e,t,i,o){if(e.pop(),!e.length)return i;const s=i.samplers.map((e=>m(e.extent))),l=await this._createSampler(e[e.length-1],t,o,s);if(0===l.samplers.length)return i;const n=i.samplers.concat(l.samplers),a=new y(n,o.noDataValue);return this._createSamplerAllContinue(e,t,a,o)}async _queryAllContinue(e,t,i){const o=e.pop(),s=t.geometry.coordinates,l=[],n=[];for(let c=0;c<s.length;c++){const i=t.sampleInfo[c];i.demResolution>=0?i.source||(i.source=o):e.length&&(l.push(s[c]),n.push(c))}if(!e.length||0===l.length)return t;const a=t.geometry.clone(l),r=await this.query(e[e.length-1],a,i);return n.forEach(((e,i)=>{s[e].z=r.geometry.coordinates[i].z,t.sampleInfo[e].demResolution=r.sampleInfo[i].demResolution})),this._queryAllContinue(e,t,i)}async _createQueryResult(e,t){const i={geometry:(await e.geometry.project(e.outSpatialReference,t)).export(),noDataValue:e.options.noDataValue};return e.options.returnSampleInfo&&(i.sampleInfo=this._extractSampleInfo(e)),e.geometry.coordinates.forEach((e=>{e.tile=null,e.elevationTile=null})),i}async _createGeometryDescriptor(e,i,o){let s;const l=e.layer.tileInfo.spatialReference;if(i instanceof x?s=await i.project(l,o):(await h([{source:i.spatialReference,dest:l}],{signal:o}),s=p(i,l)),!s)throw new t(\"elevation-query:spatial-reference-mismatch\",`Cannot query elevation in '${i.spatialReference.wkid}' on an elevation service in '${l.wkid}'`);e.geometry=x.fromGeometry(s)}async _selectTiles(e,i){const o=e.options.demResolution;if(\"geometry\"===e.type&&this._preselectOutsideLayerExtent(e),\"number\"==typeof o)this._selectTilesClosestResolution(e);else if(\"finest-contiguous\"===o)await this._selectTilesFinestContiguous(e,i);else{if(\"auto\"!==o)throw new t(\"elevation-query:invalid-dem-resolution\",`Invalid dem resolution value '${o}', expected a number, \"finest-contiguous\" or \"auto\"`);await this._selectTilesAuto(e,i)}}_preselectOutsideLayerExtent(e){if(i(e.layer.fullExtent))return;const t=new T(null);t.sample=()=>e.options.noDataValue,e.outsideExtentTile=t;const o=e.layer.fullExtent;e.geometry.coordinates.forEach((e=>{const i=e.x,s=e.y;(i<o.xmin||i>o.xmax||s<o.ymin||s>o.ymax)&&(e.elevationTile=t)}))}_selectTilesClosestResolution(e){const t=e.layer.tileInfo,i=this._findNearestDemResolutionLODIndex(t,e.options.demResolution);e.selectTilesAtLOD(i)}_findNearestDemResolutionLODIndex(e,t){const i=t/a(e.spatialReference);let o=e.lods[0],s=0;for(let l=1;l<e.lods.length;l++){const t=e.lods[l];Math.abs(t.resolution-i)<Math.abs(o.resolution-i)&&(o=t,s=l)}return s}async _selectTilesFinestContiguous(e,t){const i=E(e.layer.tileInfo,e.options.minDemResolution);await this._selectTilesFinestContiguousAt(e,i,t)}async _selectTilesFinestContiguousAt(e,i,o){const n=e.layer;if(e.selectTilesAtLOD(i),i<0)return;const a=n.tilemapCache,r=e.getTilesToFetch();try{if(a)await s(Promise.all(r.map((e=>a.fetchAvailability(e.level,e.row,e.col,{signal:o})))),o);else if(await this._populateElevationTiles(e,o),!e.allElevationTilesFetched())throw e.clearElevationTiles(),new t(\"elevation-query:has-unavailable-tiles\")}catch(c){l(c),await this._selectTilesFinestContiguousAt(e,i-1,o)}}async _populateElevationTiles(e,t){const i=e.getTilesToFetch(),l={},a=e.options.cache,r=e.options.noDataValue,c=i.map((async i=>{const s=`${e.layer.uid}:${i.id}:${r}`,n=o(a)?a.get(s):null,c=o(n)?n:await e.layer.fetchTile(i.level,i.row,i.col,{noDataValue:r,signal:t});o(a)&&a.put(s,c),l[i.id]=new T(i,c)}));await s(n(c),t),e.populateElevationTiles(l)}async _selectTilesAuto(t,i){this._selectTilesAutoFinest(t),this._reduceTilesForMaximumRequests(t);const o=t.layer.tilemapCache;if(!o)return this._selectTilesAutoPrefetchUpsample(t,i);const n=t.getTilesToFetch(),a={},r=n.map((async t=>{const s={id:null,level:0,row:0,col:0,extent:f()},n=await e(o.fetchAvailabilityUpsample(t.level,t.row,t.col,s,{signal:i}));!1===n.ok?l(n.error):a[t.id]=s}));await s(Promise.all(r),i),t.remapTiles(a)}_reduceTilesForMaximumRequests(e){const t=e.layer.tileInfo;let i=0;const o={},s=e=>{e.id in o?o[e.id]++:(o[e.id]=1,i++)},l=e=>{const t=o[e.id];1===t?(delete o[e.id],i--):o[e.id]=t-1};e.forEachTileToFetch(s,l);let n=!0;for(;n&&(n=!1,e.forEachTileToFetch((o=>{i<=e.options.maximumAutoTileRequests||(l(o),t.upsampleTile(o)&&(n=!0),s(o))}),l),n););}_selectTilesAutoFinest(e){const t=E(e.layer.tileInfo,e.options.minDemResolution);e.selectTilesAtLOD(t,e.options.maximumAutoTileRequests)}async _selectTilesAutoPrefetchUpsample(e,t){const i=e.layer.tileInfo;await this._populateElevationTiles(e,t);let o=!1;e.forEachTileToFetch(((e,t)=>{i.upsampleTile(e)?o=!0:t()})),o&&await this._selectTilesAutoPrefetchUpsample(e,t)}_sampleGeometryWithElevation(e){e.geometry.coordinates.forEach((t=>{const i=t.elevationTile;let s=e.options.noDataValue;if(i){const e=i.sample(t.x,t.y);o(e)?s=e:t.elevationTile=null}t.z=s}))}_extractSampleInfo(e){const t=e.layer.tileInfo,i=a(t.spatialReference);return e.geometry.coordinates.map((o=>{let s=-1;if(o.elevationTile&&o.elevationTile!==e.outsideExtentTile){s=t.lodAt(o.elevationTile.tile.level).resolution*i}return{demResolution:s}}))}}class x{export(){return this._exporter(this.coordinates,this.spatialReference)}clone(e){const t=new x;return t.geometry=this.geometry,t.spatialReference=this.spatialReference,t.coordinates=e||this.coordinates.map((e=>this._cloneCoordinate(e))),t._exporter=this._exporter,t}async project(e,t){if(this.spatialReference.equals(e))return this.clone();await h([{source:this.spatialReference,dest:e}],{signal:t});const i=new r({spatialReference:this.spatialReference,points:this.coordinates.map((e=>[e.x,e.y]))}),o=p(i,e);if(!o)return null;const s=this.coordinates.map(((e,t)=>{const i=this._cloneCoordinate(e),s=o.points[t];return i.x=s[0],i.y=s[1],i})),l=this.clone(s);return l.spatialReference=e,l}_cloneCoordinate(e){return{x:e.x,y:e.y,z:e.z,m:e.m,tile:null,elevationTile:null}}static fromGeometry(e){const t=new x;if(t.geometry=e,t.spatialReference=e.spatialReference,e instanceof x)t.coordinates=e.coordinates.map((e=>t._cloneCoordinate(e))),t._exporter=(t,i)=>{const o=e.clone(t);return o.spatialReference=i,o};else switch(e.type){case\"point\":{const i=e,{hasZ:o,hasM:s}=i;t.coordinates=o&&s?[{x:i.x,y:i.y,z:i.z,m:i.m}]:o?[{x:i.x,y:i.y,z:i.z}]:s?[{x:i.x,y:i.y,m:i.m}]:[{x:i.x,y:i.y}],t._exporter=(t,i)=>e.hasM?new c(t[0].x,t[0].y,t[0].z,t[0].m,i):new c(t[0].x,t[0].y,t[0].z,i);break}case\"multipoint\":{const i=e,{hasZ:o,hasM:s}=i;t.coordinates=o&&s?i.points.map((e=>({x:e[0],y:e[1],z:e[2],m:e[3]}))):o?i.points.map((e=>({x:e[0],y:e[1],z:e[2]}))):s?i.points.map((e=>({x:e[0],y:e[1],m:e[2]}))):i.points.map((e=>({x:e[0],y:e[1]}))),t._exporter=(t,i)=>e.hasM?new r({points:t.map((e=>[e.x,e.y,e.z,e.m])),hasZ:!0,hasM:!0,spatiaReference:i}):new r(t.map((e=>[e.x,e.y,e.z])),i);break}case\"polyline\":{const i=e,o=[],s=[],{hasZ:l,hasM:n}=e;let a=0;for(const e of i.paths)if(s.push([a,a+e.length]),a+=e.length,l&&n)for(const t of e)o.push({x:t[0],y:t[1],z:t[2],m:t[3]});else if(l)for(const t of e)o.push({x:t[0],y:t[1],z:t[2]});else if(n)for(const t of e)o.push({x:t[0],y:t[1],m:t[2]});else for(const t of e)o.push({x:t[0],y:t[1]});t.coordinates=o,t._exporter=(t,i)=>{const o=e.hasM?t.map((e=>[e.x,e.y,e.z,e.m])):t.map((e=>[e.x,e.y,e.z])),l=s.map((e=>o.slice(e[0],e[1])));return new u({paths:l,hasM:e.hasM,hasZ:!0,spatialReference:i})};break}}return t}}class g{constructor(e,t){this.layer=e,this.options=t}}class w extends g{constructor(e,t,i){super(e,i),this.outSpatialReference=t,this.type=\"geometry\"}selectTilesAtLOD(e){if(e<0)this.geometry.coordinates.forEach((e=>e.tile=null));else{const t=this.layer.tileInfo,i=t.lods[e].level;this.geometry.coordinates.forEach((e=>{e.tile=t.tileAt(i,e.x,e.y)}))}}allElevationTilesFetched(){return!this.geometry.coordinates.some((e=>!e.elevationTile))}clearElevationTiles(){for(const e of this.geometry.coordinates)e.elevationTile!==this.outsideExtentTile&&(e.elevationTile=null)}populateElevationTiles(e){for(const t of this.geometry.coordinates)!t.elevationTile&&t.tile&&(t.elevationTile=e[t.tile.id])}remapTiles(e){for(const t of this.geometry.coordinates)t.tile=e[t.tile.id]}getTilesToFetch(){const e={},t=[];for(const i of this.geometry.coordinates){const o=i.tile;i.elevationTile||!i.tile||e[o.id]||(e[o.id]=o,t.push(o))}return t}forEachTileToFetch(e){for(const t of this.geometry.coordinates)t.tile&&!t.elevationTile&&e(t.tile,(()=>t.tile=null))}}class _ extends g{constructor(e,t,i,o){super(e,i),this.type=\"extent\",this.elevationTiles=[],this.candidateTiles=[],this.fetchedCandidates=new Set,this.extent=t.intersection(e.fullExtent),this.maskExtents=o}selectTilesAtLOD(e,t){const i=this._maximumLodForRequests(t),o=Math.min(i,e);o<0?this.candidateTiles.length=0:this._selectCandidateTilesCoveringExtentAt(o)}_maximumLodForRequests(e){const t=this.layer.tileInfo;if(!e)return t.lods.length-1;const o=this.extent;if(i(o))return-1;for(let i=t.lods.length-1;i>=0;i--){const s=t.lods[i],l=s.resolution*t.size[0],n=s.resolution*t.size[1];if(Math.ceil(o.width/l)*Math.ceil(o.height/n)<=e)return i}return-1}allElevationTilesFetched(){return this.candidateTiles.length===this.elevationTiles.length}clearElevationTiles(){this.elevationTiles.length=0,this.fetchedCandidates.clear()}populateElevationTiles(e){for(const t of this.candidateTiles){const i=e[t.id];i&&(this.fetchedCandidates.add(t),this.elevationTiles.push(i))}}remapTiles(e){this.candidateTiles=this._uniqueNonOverlappingTiles(this.candidateTiles.map((t=>e[t.id])))}getTilesToFetch(){return this.candidateTiles}forEachTileToFetch(e,t){const i=this.candidateTiles;this.candidateTiles=[],i.forEach((i=>{if(this.fetchedCandidates.has(i))return void(t&&t(i));let o=!1;e(i,(()=>o=!0)),o?t&&t(i):this.candidateTiles.push(i)})),this.candidateTiles=this._uniqueNonOverlappingTiles(this.candidateTiles,t)}_uniqueNonOverlappingTiles(e,t){const i={},o=[];for(const l of e)i[l.id]?t&&t(l):(i[l.id]=l,o.push(l));const s=o.sort(((e,t)=>e.level-t.level));return s.filter(((e,i)=>{for(let o=0;o<i;o++)if(d(s[o].extent,e.extent))return t&&t(e),!1;return!0}))}_selectCandidateTilesCoveringExtentAt(e){this.candidateTiles.length=0;const t=this.extent;if(i(t))return;const o=this.layer.tileInfo,s=o.lods[e],l=o.tileAt(s.level,t.xmin,t.ymin),n=s.resolution*o.size[0],a=s.resolution*o.size[1],r=Math.ceil((t.xmax-l.extent[0])/n),c=Math.ceil((t.ymax-l.extent[1])/a);for(let i=0;i<c;i++)for(let e=0;e<r;e++){const t={id:null,level:l.level,row:l.row-i,col:l.col+e};o.updateTileInfo(t),this._tileIsMasked(t)||this.candidateTiles.push(t)}}_tileIsMasked(e){return!!this.maskExtents&&this.maskExtents.some((t=>d(t,e.extent)))}}function E(e,t){let i=e.lods.length-1;if(t>0){const o=e.lods.findIndex((e=>e.resolution<t));0===o?i=0:o>0&&(i=o-1)}return i}const R={maximumAutoTileRequests:20,noDataValue:0,returnSampleInfo:!1,demResolution:\"auto\",minDemResolution:0};export{v as ElevationQuery,x as GeometryDescriptor,E as getFinestLodIndex};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}