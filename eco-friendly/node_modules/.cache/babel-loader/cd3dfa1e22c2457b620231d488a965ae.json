{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.error.cause.js\";\n\n/*!\n* tabbable 5.3.3\n* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE\n*/\nvar candidateSelectors = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]:not(slot)', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable=\"false\"])', 'details>summary:first-of-type', 'details'];\nvar candidateSelector = /* #__PURE__ */candidateSelectors.join(',');\nvar NoElement = typeof Element === 'undefined';\nvar matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\nvar getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {\n  return element.getRootNode();\n} : function (element) {\n  return element.ownerDocument;\n};\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\n\nvar getCandidates = function getCandidates(el, includeContainer, filter) {\n  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));\n\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidatesScope\n * @property {Element} scope contains inner candidates\n * @property {Element[]} candidates\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidatesScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidatesScope>}\n */\n\n\nvar getCandidatesIteratively = function getCandidatesIteratively(elements, includeContainer, options) {\n  var candidates = [];\n  var elementsToCheck = Array.from(elements);\n\n  while (elementsToCheck.length) {\n    var element = elementsToCheck.shift();\n\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      var assigned = element.assignedElements();\n      var content = assigned.length ? assigned : element.children;\n      var nestedCandidates = getCandidatesIteratively(content, true, options);\n\n      if (options.flatten) {\n        candidates.push.apply(candidates, nestedCandidates);\n      } else {\n        candidates.push({\n          scope: element,\n          candidates: nestedCandidates\n        });\n      }\n    } else {\n      // check candidate element\n      var validCandidate = matches.call(element, candidateSelector);\n\n      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {\n        candidates.push(element);\n      } // iterate over shadow content if possible\n\n\n      var shadowRoot = element.shadowRoot || // check for an undisclosed shadow\n      typeof options.getShadowRoot === 'function' && options.getShadowRoot(element);\n      var validShadowRoot = !options.shadowRootFilter || options.shadowRootFilter(element);\n\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        var _nestedCandidates = getCandidatesIteratively(shadowRoot === true ? element.children : shadowRoot.children, true, options);\n\n        if (options.flatten) {\n          candidates.push.apply(candidates, _nestedCandidates);\n        } else {\n          candidates.push({\n            scope: element,\n            candidates: _nestedCandidates\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift.apply(elementsToCheck, element.children);\n      }\n    }\n  }\n\n  return candidates;\n};\n\nvar getTabindex = function getTabindex(node, isScope) {\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    //\n    // isScope is positive for custom element with shadow root or slot that by default\n    // have tabIndex -1, but need to be sorted by document order in order for their\n    // content to be inserted in the correct position\n    if ((isScope || /^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || node.isContentEditable) && isNaN(parseInt(node.getAttribute('tabindex'), 10))) {\n      return 0;\n    }\n  }\n\n  return node.tabIndex;\n};\n\nvar sortOrderedTabbables = function sortOrderedTabbables(a, b) {\n  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;\n};\n\nvar isInput = function isInput(node) {\n  return node.tagName === 'INPUT';\n};\n\nvar isHiddenInput = function isHiddenInput(node) {\n  return isInput(node) && node.type === 'hidden';\n};\n\nvar isDetailsWithSummary = function isDetailsWithSummary(node) {\n  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {\n    return child.tagName === 'SUMMARY';\n  });\n  return r;\n};\n\nvar getCheckedRadio = function getCheckedRadio(nodes, form) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\n\nvar isTabbableRadio = function isTabbableRadio(node) {\n  if (!node.name) {\n    return true;\n  }\n\n  var radioScope = node.form || getRootNode(node);\n\n  var queryRadios = function queryRadios(name) {\n    return radioScope.querySelectorAll('input[type=\"radio\"][name=\"' + name + '\"]');\n  };\n\n  var radioSet;\n\n  if (typeof window !== 'undefined' && typeof window.CSS !== 'undefined' && typeof window.CSS.escape === 'function') {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s', err.message);\n      return false;\n    }\n  }\n\n  var checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\n\nvar isRadio = function isRadio(node) {\n  return isInput(node) && node.type === 'radio';\n};\n\nvar isNonTabbableRadio = function isNonTabbableRadio(node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\nvar isZeroArea = function isZeroArea(node) {\n  var _node$getBoundingClie = node.getBoundingClientRect(),\n      width = _node$getBoundingClie.width,\n      height = _node$getBoundingClie.height;\n\n  return width === 0 && height === 0;\n};\n\nvar isHidden = function isHidden(node, _ref) {\n  var displayCheck = _ref.displayCheck,\n      getShadowRoot = _ref.getShadowRoot; // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n\n  var isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  } // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n\n\n  var nodeRootHost = getRootNode(node).host;\n  var nodeIsAttached = (nodeRootHost === null || nodeRootHost === void 0 ? void 0 : nodeRootHost.ownerDocument.contains(nodeRootHost)) || node.ownerDocument.contains(node);\n\n  if (!displayCheck || displayCheck === 'full') {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      var originalNode = node;\n\n      while (node) {\n        var parentElement = node.parentElement;\n        var rootNode = getRootNode(node);\n\n        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n\n      node = originalNode;\n    } // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n\n    if (nodeIsAttached) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    } // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  } // visible, as far as we can tell, or per current `displayCheck` mode\n\n\n  return false;\n}; // form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\n\n\nvar isDisabledFromFieldset = function isDisabledFromFieldset(node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    var parentNode = node.parentElement; // check if `node` is contained in a disabled <fieldset>\n\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (var i = 0; i < parentNode.children.length; i++) {\n          var child = parentNode.children.item(i); // when the first <legend> (in document order) is found\n\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);\n          }\n        } // the disabled <fieldset> containing `node` has no <legend>\n\n\n        return true;\n      }\n\n      parentNode = parentNode.parentElement;\n    }\n  } // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n\n\n  return false;\n};\n\nvar isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {\n  if (node.disabled || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus\n  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {\n    return false;\n  }\n\n  return true;\n};\n\nvar isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable(options, node) {\n  if (isNonTabbableRadio(node) || getTabindex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {\n    return false;\n  }\n\n  return true;\n};\n\nvar isValidShadowRootTabbable = function isValidShadowRootTabbable(shadowHostNode) {\n  var tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  } // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n\n\n  return false;\n};\n/**\n * @param {Array.<Element|CandidatesScope>} candidates\n * @returns Element[]\n */\n\n\nvar sortByOrder = function sortByOrder(candidates) {\n  var regularTabbables = [];\n  var orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    var isScope = !!item.scope;\n    var element = isScope ? item.scope : item;\n    var candidateTabindex = getTabindex(element, isScope);\n    var elements = isScope ? sortByOrder(item.candidates) : element;\n\n    if (candidateTabindex === 0) {\n      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements\n      });\n    }\n  });\n  return orderedTabbables.sort(sortOrderedTabbables).reduce(function (acc, sortable) {\n    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);\n    return acc;\n  }, []).concat(regularTabbables);\n};\n\nvar tabbable = function tabbable(el, options) {\n  options = options || {};\n  var candidates;\n\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorTabbable.bind(null, options),\n      flatten: false,\n      getShadowRoot: options.getShadowRoot,\n      shadowRootFilter: isValidShadowRootTabbable\n    });\n  } else {\n    candidates = getCandidates(el, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));\n  }\n\n  return sortByOrder(candidates);\n};\n\nvar focusable = function focusable(el, options) {\n  options = options || {};\n  var candidates;\n\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorFocusable.bind(null, options),\n      flatten: true,\n      getShadowRoot: options.getShadowRoot\n    });\n  } else {\n    candidates = getCandidates(el, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));\n  }\n\n  return candidates;\n};\n\nvar isTabbable = function isTabbable(node, options) {\n  options = options || {};\n\n  if (!node) {\n    throw new Error('No node provided');\n  }\n\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n\n  return isNodeMatchingSelectorTabbable(options, node);\n};\n\nvar focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');\n\nvar isFocusable = function isFocusable(node, options) {\n  options = options || {};\n\n  if (!node) {\n    throw new Error('No node provided');\n  }\n\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { focusable, isFocusable, isTabbable, tabbable };","map":{"version":3,"mappings":"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","names":["candidateSelectors","candidateSelector","join","NoElement","Element","matches","prototype","msMatchesSelector","webkitMatchesSelector","getRootNode","element","ownerDocument","getCandidates","el","includeContainer","filter","candidates","Array","slice","apply","querySelectorAll","call","unshift","getCandidatesIteratively","elements","options","elementsToCheck","from","length","shift","tagName","assigned","assignedElements","content","children","nestedCandidates","flatten","push","scope","validCandidate","includes","shadowRoot","getShadowRoot","validShadowRoot","shadowRootFilter","getTabindex","node","isScope","tabIndex","test","isContentEditable","isNaN","parseInt","getAttribute","sortOrderedTabbables","a","b","documentOrder","isInput","isHiddenInput","type","isDetailsWithSummary","r","some","child","getCheckedRadio","nodes","form","i","checked","isTabbableRadio","name","radioScope","queryRadios","radioSet","window","CSS","escape","err","console","error","message","isRadio","isNonTabbableRadio","isZeroArea","getBoundingClientRect","width","height","isHidden","_ref","displayCheck","getComputedStyle","visibility","isDirectSummary","nodeUnderDetails","parentElement","nodeRootHost","host","nodeIsAttached","contains","originalNode","rootNode","assignedSlot","getClientRects","isDisabledFromFieldset","parentNode","disabled","item","isNodeMatchingSelectorFocusable","isNodeMatchingSelectorTabbable","isValidShadowRootTabbable","shadowHostNode","sortByOrder","regularTabbables","orderedTabbables","forEach","candidateTabindex","sort","reduce","acc","sortable","concat","tabbable","bind","focusable","isTabbable","Error","focusableCandidateSelector","isFocusable"],"sources":["../src/index.js"],"sourcesContent":["const candidateSelectors = [\n  'input',\n  'select',\n  'textarea',\n  'a[href]',\n  'button',\n  '[tabindex]:not(slot)',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]:not([contenteditable=\"false\"])',\n  'details>summary:first-of-type',\n  'details',\n];\nconst candidateSelector = /* #__PURE__ */ candidateSelectors.join(',');\n\nconst NoElement = typeof Element === 'undefined';\n\nconst matches = NoElement\n  ? function () {}\n  : Element.prototype.matches ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.webkitMatchesSelector;\n\nconst getRootNode =\n  !NoElement && Element.prototype.getRootNode\n    ? (element) => element.getRootNode()\n    : (element) => element.ownerDocument;\n\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\nconst getCandidates = function (el, includeContainer, filter) {\n  let candidates = Array.prototype.slice.apply(\n    el.querySelectorAll(candidateSelector)\n  );\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidatesScope\n * @property {Element} scope contains inner candidates\n * @property {Element[]} candidates\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidatesScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidatesScope>}\n */\nconst getCandidatesIteratively = function (\n  elements,\n  includeContainer,\n  options\n) {\n  const candidates = [];\n  const elementsToCheck = Array.from(elements);\n  while (elementsToCheck.length) {\n    const element = elementsToCheck.shift();\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      const assigned = element.assignedElements();\n      const content = assigned.length ? assigned : element.children;\n      const nestedCandidates = getCandidatesIteratively(content, true, options);\n      if (options.flatten) {\n        candidates.push(...nestedCandidates);\n      } else {\n        candidates.push({\n          scope: element,\n          candidates: nestedCandidates,\n        });\n      }\n    } else {\n      // check candidate element\n      const validCandidate = matches.call(element, candidateSelector);\n      if (\n        validCandidate &&\n        options.filter(element) &&\n        (includeContainer || !elements.includes(element))\n      ) {\n        candidates.push(element);\n      }\n\n      // iterate over shadow content if possible\n      const shadowRoot =\n        element.shadowRoot ||\n        // check for an undisclosed shadow\n        (typeof options.getShadowRoot === 'function' &&\n          options.getShadowRoot(element));\n\n      const validShadowRoot =\n        !options.shadowRootFilter || options.shadowRootFilter(element);\n\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        const nestedCandidates = getCandidatesIteratively(\n          shadowRoot === true ? element.children : shadowRoot.children,\n          true,\n          options\n        );\n\n        if (options.flatten) {\n          candidates.push(...nestedCandidates);\n        } else {\n          candidates.push({\n            scope: element,\n            candidates: nestedCandidates,\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift(...element.children);\n      }\n    }\n  }\n  return candidates;\n};\n\nconst getTabindex = function (node, isScope) {\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    //\n    // isScope is positive for custom element with shadow root or slot that by default\n    // have tabIndex -1, but need to be sorted by document order in order for their\n    // content to be inserted in the correct position\n    if (\n      (isScope ||\n        /^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) ||\n        node.isContentEditable) &&\n      isNaN(parseInt(node.getAttribute('tabindex'), 10))\n    ) {\n      return 0;\n    }\n  }\n\n  return node.tabIndex;\n};\n\nconst sortOrderedTabbables = function (a, b) {\n  return a.tabIndex === b.tabIndex\n    ? a.documentOrder - b.documentOrder\n    : a.tabIndex - b.tabIndex;\n};\n\nconst isInput = function (node) {\n  return node.tagName === 'INPUT';\n};\n\nconst isHiddenInput = function (node) {\n  return isInput(node) && node.type === 'hidden';\n};\n\nconst isDetailsWithSummary = function (node) {\n  const r =\n    node.tagName === 'DETAILS' &&\n    Array.prototype.slice\n      .apply(node.children)\n      .some((child) => child.tagName === 'SUMMARY');\n  return r;\n};\n\nconst getCheckedRadio = function (nodes, form) {\n  for (let i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\n\nconst isTabbableRadio = function (node) {\n  if (!node.name) {\n    return true;\n  }\n  const radioScope = node.form || getRootNode(node);\n  const queryRadios = function (name) {\n    return radioScope.querySelectorAll(\n      'input[type=\"radio\"][name=\"' + name + '\"]'\n    );\n  };\n\n  let radioSet;\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.CSS !== 'undefined' &&\n    typeof window.CSS.escape === 'function'\n  ) {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s',\n        err.message\n      );\n      return false;\n    }\n  }\n\n  const checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\n\nconst isRadio = function (node) {\n  return isInput(node) && node.type === 'radio';\n};\n\nconst isNonTabbableRadio = function (node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\nconst isZeroArea = function (node) {\n  const { width, height } = node.getBoundingClientRect();\n  return width === 0 && height === 0;\n};\nconst isHidden = function (node, { displayCheck, getShadowRoot }) {\n  // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n\n  const isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  const nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n\n  // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  const nodeRootHost = getRootNode(node).host;\n  const nodeIsAttached =\n    nodeRootHost?.ownerDocument.contains(nodeRootHost) ||\n    node.ownerDocument.contains(node);\n\n  if (!displayCheck || displayCheck === 'full') {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      const originalNode = node;\n      while (node) {\n        const parentElement = node.parentElement;\n        const rootNode = getRootNode(node);\n        if (\n          parentElement &&\n          !parentElement.shadowRoot &&\n          getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n\n      node = originalNode;\n    }\n    // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n    if (nodeIsAttached) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    }\n\n    // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  }\n\n  // visible, as far as we can tell, or per current `displayCheck` mode\n  return false;\n};\n\n// form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\nconst isDisabledFromFieldset = function (node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    let parentNode = node.parentElement;\n    // check if `node` is contained in a disabled <fieldset>\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (let i = 0; i < parentNode.children.length; i++) {\n          const child = parentNode.children.item(i);\n          // when the first <legend> (in document order) is found\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *')\n              ? true\n              : !child.contains(node);\n          }\n        }\n        // the disabled <fieldset> containing `node` has no <legend>\n        return true;\n      }\n      parentNode = parentNode.parentElement;\n    }\n  }\n\n  // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n  return false;\n};\n\nconst isNodeMatchingSelectorFocusable = function (options, node) {\n  if (\n    node.disabled ||\n    isHiddenInput(node) ||\n    isHidden(node, options) ||\n    // For a details element with a summary, the summary element gets the focus\n    isDetailsWithSummary(node) ||\n    isDisabledFromFieldset(node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isNodeMatchingSelectorTabbable = function (options, node) {\n  if (\n    isNonTabbableRadio(node) ||\n    getTabindex(node) < 0 ||\n    !isNodeMatchingSelectorFocusable(options, node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isValidShadowRootTabbable = function (shadowHostNode) {\n  const tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  }\n  // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n  return false;\n};\n\n/**\n * @param {Array.<Element|CandidatesScope>} candidates\n * @returns Element[]\n */\nconst sortByOrder = function (candidates) {\n  const regularTabbables = [];\n  const orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    const isScope = !!item.scope;\n    const element = isScope ? item.scope : item;\n    const candidateTabindex = getTabindex(element, isScope);\n    const elements = isScope ? sortByOrder(item.candidates) : element;\n    if (candidateTabindex === 0) {\n      isScope\n        ? regularTabbables.push(...elements)\n        : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements,\n      });\n    }\n  });\n\n  return orderedTabbables\n    .sort(sortOrderedTabbables)\n    .reduce((acc, sortable) => {\n      sortable.isScope\n        ? acc.push(...sortable.content)\n        : acc.push(sortable.content);\n      return acc;\n    }, [])\n    .concat(regularTabbables);\n};\n\nconst tabbable = function (el, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorTabbable.bind(null, options),\n      flatten: false,\n      getShadowRoot: options.getShadowRoot,\n      shadowRootFilter: isValidShadowRootTabbable,\n    });\n  } else {\n    candidates = getCandidates(\n      el,\n      options.includeContainer,\n      isNodeMatchingSelectorTabbable.bind(null, options)\n    );\n  }\n  return sortByOrder(candidates);\n};\n\nconst focusable = function (el, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorFocusable.bind(null, options),\n      flatten: true,\n      getShadowRoot: options.getShadowRoot,\n    });\n  } else {\n    candidates = getCandidates(\n      el,\n      options.includeContainer,\n      isNodeMatchingSelectorFocusable.bind(null, options)\n    );\n  }\n\n  return candidates;\n};\n\nconst isTabbable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorTabbable(options, node);\n};\n\nconst focusableCandidateSelector = /* #__PURE__ */ candidateSelectors\n  .concat('iframe')\n  .join(',');\n\nconst isFocusable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { tabbable, focusable, isTabbable, isFocusable };\n"]},"metadata":{},"sourceType":"module"}