{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/*!\n* focus-trap 7.0.0\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/\nimport { tabbable, focusable, isTabbable, isFocusable } from 'tabbable';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar activeFocusTraps = function () {\n  var trapQueue = [];\n  return {\n    activateTrap: function activateTrap(trap) {\n      if (trapQueue.length > 0) {\n        var activeTrap = trapQueue[trapQueue.length - 1];\n\n        if (activeTrap !== trap) {\n          activeTrap.pause();\n        }\n      }\n\n      var trapIndex = trapQueue.indexOf(trap);\n\n      if (trapIndex === -1) {\n        trapQueue.push(trap);\n      } else {\n        // move this existing trap to the front of the queue\n        trapQueue.splice(trapIndex, 1);\n        trapQueue.push(trap);\n      }\n    },\n    deactivateTrap: function deactivateTrap(trap) {\n      var trapIndex = trapQueue.indexOf(trap);\n\n      if (trapIndex !== -1) {\n        trapQueue.splice(trapIndex, 1);\n      }\n\n      if (trapQueue.length > 0) {\n        trapQueue[trapQueue.length - 1].unpause();\n      }\n    }\n  };\n}();\n\nvar isSelectableInput = function isSelectableInput(node) {\n  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';\n};\n\nvar isEscapeEvent = function isEscapeEvent(e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\nvar isTabEvent = function isTabEvent(e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\nvar delay = function delay(fn) {\n  return setTimeout(fn, 0);\n}; // Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\n\n\nvar findIndex = function findIndex(arr, fn) {\n  var idx = -1;\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n  return idx;\n};\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\n\n\nvar valueOrHandler = function valueOrHandler(value) {\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n\n  return typeof value === 'function' ? value.apply(void 0, params) : value;\n};\n\nvar getActualTarget = function getActualTarget(event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function' ? event.composedPath()[0] : event.target;\n};\n\nvar createFocusTrap = function createFocusTrap(elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;\n\n  var config = _objectSpread2({\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true\n  }, userOptions);\n\n  var state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [],\n    // same order/length as `containers` list\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined\n  };\n  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n\n  var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {\n    return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];\n  };\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n\n\n  var findContainerIndex = function findContainerIndex(element) {\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(function (_ref) {\n      var container = _ref.container,\n          tabbableNodes = _ref.tabbableNodes;\n      return container.contains(element) || // fall back to explicit tabbable search which will take into consideration any\n      //  web components if the `tabbableOptions.getShadowRoot` option was used for\n      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n      //  look inside web components even if open)\n      tabbableNodes.find(function (node) {\n        return node === element;\n      });\n    });\n  };\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n\n\n  var getNodeForOption = function getNodeForOption(optionName) {\n    var optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        params[_key2 - 1] = arguments[_key2];\n      }\n\n      optionValue = optionValue.apply(void 0, params);\n    }\n\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      } // else, empty string (invalid), null (invalid), 0 (invalid)\n\n\n      throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n    }\n\n    var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n\n      if (!node) {\n        throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n      }\n    }\n\n    return node;\n  };\n\n  var getInitialFocusNode = function getInitialFocusNode() {\n    var node = getNodeForOption('initialFocus'); // false explicitly indicates we want no initialFocus at all\n\n    if (node === false) {\n      return false;\n    }\n\n    if (node === undefined) {\n      // option not specified: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        var firstTabbableGroup = state.tabbableGroups[0];\n        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode; // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n\n    if (!node) {\n      throw new Error('Your focus-trap needs to have at least one focusable element');\n    }\n\n    return node;\n  };\n\n  var updateTabbableNodes = function updateTabbableNodes() {\n    state.containerGroups = state.containers.map(function (container) {\n      var tabbableNodes = tabbable(container, config.tabbableOptions); // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes\n\n      var focusableNodes = focusable(container, config.tabbableOptions);\n      return {\n        container: container,\n        tabbableNodes: tabbableNodes,\n        focusableNodes: focusableNodes,\n        firstTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[0] : null,\n        lastTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : null,\n\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode: function nextTabbableNode(node) {\n          var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true; // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n          //  from the DOM order), this __will not work__ because the list of focusableNodes,\n          //  while it contains tabbable nodes, does not sort its nodes in any order other\n          //  than DOM order, because it can't: Where would you place focusable (but not\n          //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n          // Support for positive tabindex is already broken and hard to manage (possibly\n          //  not supportable, TBD), so this isn't going to make things worse than they\n          //  already are, and at least makes things better for the majority of cases where\n          //  tabindex is either 0/unset or negative.\n          // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n\n          var nodeIdx = focusableNodes.findIndex(function (n) {\n            return n === node;\n          });\n\n          if (nodeIdx < 0) {\n            return undefined;\n          }\n\n          if (forward) {\n            return focusableNodes.slice(nodeIdx + 1).find(function (n) {\n              return isTabbable(n, config.tabbableOptions);\n            });\n          }\n\n          return focusableNodes.slice(0, nodeIdx).reverse().find(function (n) {\n            return isTabbable(n, config.tabbableOptions);\n          });\n        }\n      };\n    });\n    state.tabbableGroups = state.containerGroups.filter(function (group) {\n      return group.tabbableNodes.length > 0;\n    }); // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n\n    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');\n    }\n  };\n\n  var tryFocus = function tryFocus(node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === doc.activeElement) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({\n      preventScroll: !!config.preventScroll\n    });\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {\n    var node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  }; // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n\n\n  var checkPointerDown = function checkPointerDown(e) {\n    var target = getActualTarget(e);\n\n    if (findContainerIndex(target) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // if, on deactivation, we should return focus to the node originally-focused\n        //  when the trap was activated (or the configured `setReturnFocus` node),\n        //  then assume it's also OK to return focus to the outside node that was\n        //  just clicked, causing deactivation, as long as that node is focusable;\n        //  if it isn't focusable, then return focus to the original node focused\n        //  on activation (or the configured `setReturnFocus` node)\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked, whether it's focusable or not; by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node)\n        returnFocus: config.returnFocusOnDeactivate && !isFocusable(target, config.tabbableOptions)\n      });\n      return;\n    } // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    } // otherwise, prevent the click\n\n\n    e.preventDefault();\n  }; // In case focus escapes the trap for some strange reason, pull it back in.\n\n\n  var checkFocusIn = function checkFocusIn(e) {\n    var target = getActualTarget(e);\n    var targetContained = findContainerIndex(target) >= 0; // In Firefox when you Tab out of an iframe the Document is briefly focused.\n\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  }; // Hijack Tab events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n\n\n  var checkTab = function checkTab(e) {\n    var target = getActualTarget(e);\n    updateTabbableNodes();\n    var destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      var containerIndex = findContainerIndex(target);\n      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back in to...\n        if (e.shiftKey) {\n          // ...the last node in the last group\n          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (e.shiftKey) {\n        // REVERSE\n        // is the target the first tabbable node in a group?\n        var startOfGroupIndex = findIndex(state.tabbableGroups, function (_ref2) {\n          var firstTabbableNode = _ref2.firstTabbableNode;\n          return target === firstTabbableNode;\n        });\n\n        if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;\n          var destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        }\n      } else {\n        // FORWARD\n        // is the target the last tabbable node in a group?\n        var lastOfGroupIndex = findIndex(state.tabbableGroups, function (_ref3) {\n          var lastTabbableNode = _ref3.lastTabbableNode;\n          return target === lastTabbableNode;\n        });\n\n        if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;\n\n          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];\n          destinationNode = _destinationGroup.firstTabbableNode;\n        }\n      }\n    } else {\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    if (destinationNode) {\n      e.preventDefault();\n      tryFocus(destinationNode);\n    } // else, let the browser take care of [shift+]tab and move the focus\n\n  };\n\n  var checkKey = function checkKey(e) {\n    if (isEscapeEvent(e) && valueOrHandler(config.escapeDeactivates, e) !== false) {\n      e.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (isTabEvent(e)) {\n      checkTab(e);\n      return;\n    }\n  };\n\n  var checkClick = function checkClick(e) {\n    var target = getActualTarget(e);\n\n    if (findContainerIndex(target) >= 0) {\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  }; //\n  // EVENT LISTENERS\n  //\n\n\n  var addListeners = function addListeners() {\n    if (!state.active) {\n      return;\n    } // There can be only one listening focus trap at a time\n\n\n    activeFocusTraps.activateTrap(trap); // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n\n    state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {\n      tryFocus(getInitialFocusNode());\n    }) : tryFocus(getInitialFocusNode());\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false\n    });\n    return trap;\n  };\n\n  var removeListeners = function removeListeners() {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n    return trap;\n  }; //\n  // TRAP DEFINITION\n  //\n\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n\n    get paused() {\n      return state.paused;\n    },\n\n    activate: function activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      var onActivate = getOption(activateOptions, 'onActivate');\n      var onPostActivate = getOption(activateOptions, 'onPostActivate');\n      var checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      if (onActivate) {\n        onActivate();\n      }\n\n      var finishActivation = function finishActivation() {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n\n        addListeners();\n\n        if (onPostActivate) {\n          onPostActivate();\n        }\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n    deactivate: function deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      var options = _objectSpread2({\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus\n      }, deactivateOptions);\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n\n      state.delayInitialFocusTimer = undefined;\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      activeFocusTraps.deactivateTrap(trap);\n      var onDeactivate = getOption(options, 'onDeactivate');\n      var onPostDeactivate = getOption(options, 'onPostDeactivate');\n      var checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      var returnFocus = getOption(options, 'returnFocus', 'returnFocusOnDeactivate');\n\n      if (onDeactivate) {\n        onDeactivate();\n      }\n\n      var finishDeactivation = function finishDeactivation() {\n        delay(function () {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n\n          if (onPostDeactivate) {\n            onPostDeactivate();\n          }\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n    pause: function pause() {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = true;\n      removeListeners();\n      return this;\n    },\n    unpause: function unpause() {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = false;\n      updateTabbableNodes();\n      addListeners();\n      return this;\n    },\n    updateContainerElements: function updateContainerElements(containerElements) {\n      var elementsAsArray = [].concat(containerElements).filter(Boolean);\n      state.containers = elementsAsArray.map(function (element) {\n        return typeof element === 'string' ? doc.querySelector(element) : element;\n      });\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      return this;\n    }\n  }; // initialize container elements\n\n  trap.updateContainerElements(elements);\n  return trap;\n};\n\nexport { createFocusTrap };","map":{"version":3,"mappings":"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","names":["activeFocusTraps","trapQueue","activateTrap","trap","length","activeTrap","pause","trapIndex","indexOf","push","splice","deactivateTrap","unpause","isSelectableInput","node","tagName","toLowerCase","select","isEscapeEvent","e","key","keyCode","isTabEvent","delay","fn","setTimeout","findIndex","arr","idx","every","value","i","valueOrHandler","params","arguments","getActualTarget","event","target","shadowRoot","composedPath","createFocusTrap","elements","userOptions","doc","document","config","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","state","containers","containerGroups","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","delayInitialFocusTimer","undefined","getOption","configOverrideOptions","optionName","configOptionName","findContainerIndex","element","container","tabbableNodes","contains","find","getNodeForOption","optionValue","apply","Error","querySelector","getInitialFocusNode","activeElement","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","tabbable","tabbableOptions","focusableNodes","focusable","lastTabbableNode","nextTabbableNode","forward","nodeIdx","n","slice","isTabbable","reverse","filter","group","tryFocus","focus","preventScroll","getReturnFocusNode","previousActiveElement","checkPointerDown","clickOutsideDeactivates","deactivate","returnFocus","isFocusable","allowOutsideClick","preventDefault","checkFocusIn","targetContained","Document","stopImmediatePropagation","checkTab","destinationNode","containerIndex","containerGroup","shiftKey","startOfGroupIndex","destinationGroupIndex","destinationGroup","lastOfGroupIndex","checkKey","checkClick","addListeners","addEventListener","capture","passive","removeListeners","removeEventListener","activate","activateOptions","onActivate","onPostActivate","checkCanFocusTrap","finishActivation","concat","then","deactivateOptions","options","onDeactivate","onPostDeactivate","checkCanReturnFocus","clearTimeout","finishDeactivation","updateContainerElements","containerElements","elementsAsArray","Boolean"],"sources":["../index.js"],"sourcesContent":["import { tabbable, focusable, isFocusable, isTabbable } from 'tabbable';\n\nconst activeFocusTraps = (function () {\n  const trapQueue = [];\n  return {\n    activateTrap(trap) {\n      if (trapQueue.length > 0) {\n        const activeTrap = trapQueue[trapQueue.length - 1];\n        if (activeTrap !== trap) {\n          activeTrap.pause();\n        }\n      }\n\n      const trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex === -1) {\n        trapQueue.push(trap);\n      } else {\n        // move this existing trap to the front of the queue\n        trapQueue.splice(trapIndex, 1);\n        trapQueue.push(trap);\n      }\n    },\n\n    deactivateTrap(trap) {\n      const trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex !== -1) {\n        trapQueue.splice(trapIndex, 1);\n      }\n\n      if (trapQueue.length > 0) {\n        trapQueue[trapQueue.length - 1].unpause();\n      }\n    },\n  };\n})();\n\nconst isSelectableInput = function (node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\nconst isEscapeEvent = function (e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\nconst isTabEvent = function (e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\nconst delay = function (fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nconst findIndex = function (arr, fn) {\n  let idx = -1;\n\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nconst valueOrHandler = function (value, ...params) {\n  return typeof value === 'function' ? value(...params) : value;\n};\n\nconst getActualTarget = function (event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function'\n    ? event.composedPath()[0]\n    : event.target;\n};\n\nconst createFocusTrap = function (elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  const doc = userOptions?.document || document;\n\n  const config = {\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    ...userOptions,\n  };\n\n  const state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [], // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n  };\n\n  let trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  const getOption = (configOverrideOptions, optionName, configOptionName) => {\n    return configOverrideOptions &&\n      configOverrideOptions[optionName] !== undefined\n      ? configOverrideOptions[optionName]\n      : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  const findContainerIndex = function (element) {\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(\n      ({ container, tabbableNodes }) =>\n        container.contains(element) ||\n        // fall back to explicit tabbable search which will take into consideration any\n        //  web components if the `tabbableOptions.getShadowRoot` option was used for\n        //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n        //  look inside web components even if open)\n        tabbableNodes.find((node) => node === element)\n    );\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  const getNodeForOption = function (optionName, ...params) {\n    let optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      optionValue = optionValue(...params);\n    }\n\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\n        `\\`${optionName}\\` was specified but was not a node, or did not return a node`\n      );\n    }\n\n    let node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\n          `\\`${optionName}\\` as selector refers to no known node`\n        );\n      }\n    }\n\n    return node;\n  };\n\n  const getInitialFocusNode = function () {\n    let node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n\n    if (node === undefined) {\n      // option not specified: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        const firstTabbableGroup = state.tabbableGroups[0];\n        const firstTabbableNode =\n          firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n\n    if (!node) {\n      throw new Error(\n        'Your focus-trap needs to have at least one focusable element'\n      );\n    }\n\n    return node;\n  };\n\n  const updateTabbableNodes = function () {\n    state.containerGroups = state.containers.map((container) => {\n      const tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes\n      const focusableNodes = focusable(container, config.tabbableOptions);\n\n      return {\n        container,\n        tabbableNodes,\n        focusableNodes,\n        firstTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[0] : null,\n        lastTabbableNode:\n          tabbableNodes.length > 0\n            ? tabbableNodes[tabbableNodes.length - 1]\n            : null,\n\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode(node, forward = true) {\n          // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n          //  from the DOM order), this __will not work__ because the list of focusableNodes,\n          //  while it contains tabbable nodes, does not sort its nodes in any order other\n          //  than DOM order, because it can't: Where would you place focusable (but not\n          //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n          // Support for positive tabindex is already broken and hard to manage (possibly\n          //  not supportable, TBD), so this isn't going to make things worse than they\n          //  already are, and at least makes things better for the majority of cases where\n          //  tabindex is either 0/unset or negative.\n          // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n          const nodeIdx = focusableNodes.findIndex((n) => n === node);\n          if (nodeIdx < 0) {\n            return undefined;\n          }\n\n          if (forward) {\n            return focusableNodes\n              .slice(nodeIdx + 1)\n              .find((n) => isTabbable(n, config.tabbableOptions));\n          }\n\n          return focusableNodes\n            .slice(0, nodeIdx)\n            .reverse()\n            .find((n) => isTabbable(n, config.tabbableOptions));\n        },\n      };\n    });\n\n    state.tabbableGroups = state.containerGroups.filter(\n      (group) => group.tabbableNodes.length > 0\n    );\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (\n      state.tabbableGroups.length <= 0 &&\n      !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error(\n        'Your focus-trap must have at least one container with at least one tabbable node in it at all times'\n      );\n    }\n  };\n\n  const tryFocus = function (node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === doc.activeElement) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({ preventScroll: !!config.preventScroll });\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  const getReturnFocusNode = function (previousActiveElement) {\n    const node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  const checkPointerDown = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // if, on deactivation, we should return focus to the node originally-focused\n        //  when the trap was activated (or the configured `setReturnFocus` node),\n        //  then assume it's also OK to return focus to the outside node that was\n        //  just clicked, causing deactivation, as long as that node is focusable;\n        //  if it isn't focusable, then return focus to the original node focused\n        //  on activation (or the configured `setReturnFocus` node)\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked, whether it's focusable or not; by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node)\n        returnFocus:\n          config.returnFocusOnDeactivate &&\n          !isFocusable(target, config.tabbableOptions),\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  const checkFocusIn = function (e) {\n    const target = getActualTarget(e);\n    const targetContained = findContainerIndex(target) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  };\n\n  // Hijack Tab events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  const checkTab = function (e) {\n    const target = getActualTarget(e);\n    updateTabbableNodes();\n\n    let destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      const containerIndex = findContainerIndex(target);\n      const containerGroup =\n        containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back in to...\n        if (e.shiftKey) {\n          // ...the last node in the last group\n          destinationNode =\n            state.tabbableGroups[state.tabbableGroups.length - 1]\n              .lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (e.shiftKey) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        let startOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ firstTabbableNode }) => target === firstTabbableNode\n        );\n\n        if (\n          startOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target, false)))\n        ) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          const destinationGroupIndex =\n            startOfGroupIndex === 0\n              ? state.tabbableGroups.length - 1\n              : startOfGroupIndex - 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        let lastOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ lastTabbableNode }) => target === lastTabbableNode\n        );\n\n        if (\n          lastOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target)))\n        ) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          const destinationGroupIndex =\n            lastOfGroupIndex === state.tabbableGroups.length - 1\n              ? 0\n              : lastOfGroupIndex + 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.firstTabbableNode;\n        }\n      }\n    } else {\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    if (destinationNode) {\n      e.preventDefault();\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  const checkKey = function (e) {\n    if (\n      isEscapeEvent(e) &&\n      valueOrHandler(config.escapeDeactivates, e) !== false\n    ) {\n      e.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (isTabEvent(e)) {\n      checkTab(e);\n      return;\n    }\n  };\n\n  const checkClick = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target) >= 0) {\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  const addListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus\n      ? delay(function () {\n          tryFocus(getInitialFocusNode());\n        })\n      : tryFocus(getInitialFocusNode());\n\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false,\n    });\n\n    return trap;\n  };\n\n  const removeListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n\n    return trap;\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n\n    get paused() {\n      return state.paused;\n    },\n\n    activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      const onActivate = getOption(activateOptions, 'onActivate');\n      const onPostActivate = getOption(activateOptions, 'onPostActivate');\n      const checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      if (onActivate) {\n        onActivate();\n      }\n\n      const finishActivation = () => {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        if (onPostActivate) {\n          onPostActivate();\n        }\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(\n          finishActivation,\n          finishActivation\n        );\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n\n    deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      const options = {\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus,\n        ...deactivateOptions,\n      };\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n\n      activeFocusTraps.deactivateTrap(trap);\n\n      const onDeactivate = getOption(options, 'onDeactivate');\n      const onPostDeactivate = getOption(options, 'onPostDeactivate');\n      const checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      const returnFocus = getOption(\n        options,\n        'returnFocus',\n        'returnFocusOnDeactivate'\n      );\n\n      if (onDeactivate) {\n        onDeactivate();\n      }\n\n      const finishDeactivation = () => {\n        delay(() => {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          if (onPostDeactivate) {\n            onPostDeactivate();\n          }\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(\n          getReturnFocusNode(state.nodeFocusedBeforeActivation)\n        ).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n\n    pause() {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = true;\n      removeListeners();\n\n      return this;\n    },\n\n    unpause() {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = false;\n      updateTabbableNodes();\n      addListeners();\n\n      return this;\n    },\n\n    updateContainerElements(containerElements) {\n      const elementsAsArray = [].concat(containerElements).filter(Boolean);\n\n      state.containers = elementsAsArray.map((element) =>\n        typeof element === 'string' ? doc.querySelector(element) : element\n      );\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      return this;\n    },\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n\n  return trap;\n};\n\nexport { createFocusTrap };\n"]},"metadata":{},"sourceType":"module"}