{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport AxisBuilder from '../axis/AxisBuilder.js';\nimport * as graphic from '../../util/graphic.js';\nimport ComponentView from '../../view/Component.js';\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\n\nvar RadarView =\n/** @class */\nfunction (_super) {\n  __extends(RadarView, _super);\n\n  function RadarView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = RadarView.type;\n    return _this;\n  }\n\n  RadarView.prototype.render = function (radarModel, ecModel, api) {\n    var group = this.group;\n    group.removeAll();\n\n    this._buildAxes(radarModel);\n\n    this._buildSplitLineAndArea(radarModel);\n  };\n\n  RadarView.prototype._buildAxes = function (radarModel) {\n    var radar = radarModel.coordinateSystem;\n    var indicatorAxes = radar.getIndicatorAxes();\n    var axisBuilders = zrUtil.map(indicatorAxes, function (indicatorAxis) {\n      var axisName = indicatorAxis.model.get('showName') ? indicatorAxis.name : ''; // hide name\n\n      var axisBuilder = new AxisBuilder(indicatorAxis.model, {\n        axisName: axisName,\n        position: [radar.cx, radar.cy],\n        rotation: indicatorAxis.angle,\n        labelDirection: -1,\n        tickDirection: -1,\n        nameDirection: 1\n      });\n      return axisBuilder;\n    });\n    zrUtil.each(axisBuilders, function (axisBuilder) {\n      zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n      this.group.add(axisBuilder.getGroup());\n    }, this);\n  };\n\n  RadarView.prototype._buildSplitLineAndArea = function (radarModel) {\n    var radar = radarModel.coordinateSystem;\n    var indicatorAxes = radar.getIndicatorAxes();\n\n    if (!indicatorAxes.length) {\n      return;\n    }\n\n    var shape = radarModel.get('shape');\n    var splitLineModel = radarModel.getModel('splitLine');\n    var splitAreaModel = radarModel.getModel('splitArea');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\n    var showSplitLine = splitLineModel.get('show');\n    var showSplitArea = splitAreaModel.get('show');\n    var splitLineColors = lineStyleModel.get('color');\n    var splitAreaColors = areaStyleModel.get('color');\n    var splitLineColorsArr = zrUtil.isArray(splitLineColors) ? splitLineColors : [splitLineColors];\n    var splitAreaColorsArr = zrUtil.isArray(splitAreaColors) ? splitAreaColors : [splitAreaColors];\n    var splitLines = [];\n    var splitAreas = [];\n\n    function getColorIndex(areaOrLine, areaOrLineColorList, idx) {\n      var colorIndex = idx % areaOrLineColorList.length;\n      areaOrLine[colorIndex] = areaOrLine[colorIndex] || [];\n      return colorIndex;\n    }\n\n    if (shape === 'circle') {\n      var ticksRadius = indicatorAxes[0].getTicksCoords();\n      var cx = radar.cx;\n      var cy = radar.cy;\n\n      for (var i = 0; i < ticksRadius.length; i++) {\n        if (showSplitLine) {\n          var colorIndex = getColorIndex(splitLines, splitLineColorsArr, i);\n          splitLines[colorIndex].push(new graphic.Circle({\n            shape: {\n              cx: cx,\n              cy: cy,\n              r: ticksRadius[i].coord\n            }\n          }));\n        }\n\n        if (showSplitArea && i < ticksRadius.length - 1) {\n          var colorIndex = getColorIndex(splitAreas, splitAreaColorsArr, i);\n          splitAreas[colorIndex].push(new graphic.Ring({\n            shape: {\n              cx: cx,\n              cy: cy,\n              r0: ticksRadius[i].coord,\n              r: ticksRadius[i + 1].coord\n            }\n          }));\n        }\n      }\n    } // Polyyon\n    else {\n      var realSplitNumber_1;\n      var axesTicksPoints = zrUtil.map(indicatorAxes, function (indicatorAxis, idx) {\n        var ticksCoords = indicatorAxis.getTicksCoords();\n        realSplitNumber_1 = realSplitNumber_1 == null ? ticksCoords.length - 1 : Math.min(ticksCoords.length - 1, realSplitNumber_1);\n        return zrUtil.map(ticksCoords, function (tickCoord) {\n          return radar.coordToPoint(tickCoord.coord, idx);\n        });\n      });\n      var prevPoints = [];\n\n      for (var i = 0; i <= realSplitNumber_1; i++) {\n        var points = [];\n\n        for (var j = 0; j < indicatorAxes.length; j++) {\n          points.push(axesTicksPoints[j][i]);\n        } // Close\n\n\n        if (points[0]) {\n          points.push(points[0].slice());\n        } else {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error('Can\\'t draw value axis ' + i);\n          }\n        }\n\n        if (showSplitLine) {\n          var colorIndex = getColorIndex(splitLines, splitLineColorsArr, i);\n          splitLines[colorIndex].push(new graphic.Polyline({\n            shape: {\n              points: points\n            }\n          }));\n        }\n\n        if (showSplitArea && prevPoints) {\n          var colorIndex = getColorIndex(splitAreas, splitAreaColorsArr, i - 1);\n          splitAreas[colorIndex].push(new graphic.Polygon({\n            shape: {\n              points: points.concat(prevPoints)\n            }\n          }));\n        }\n\n        prevPoints = points.slice().reverse();\n      }\n    }\n\n    var lineStyle = lineStyleModel.getLineStyle();\n    var areaStyle = areaStyleModel.getAreaStyle(); // Add splitArea before splitLine\n\n    zrUtil.each(splitAreas, function (splitAreas, idx) {\n      this.group.add(graphic.mergePath(splitAreas, {\n        style: zrUtil.defaults({\n          stroke: 'none',\n          fill: splitAreaColorsArr[idx % splitAreaColorsArr.length]\n        }, areaStyle),\n        silent: true\n      }));\n    }, this);\n    zrUtil.each(splitLines, function (splitLines, idx) {\n      this.group.add(graphic.mergePath(splitLines, {\n        style: zrUtil.defaults({\n          fill: 'none',\n          stroke: splitLineColorsArr[idx % splitLineColorsArr.length]\n        }, lineStyle),\n        silent: true\n      }));\n    }, this);\n  };\n\n  RadarView.type = 'radar';\n  return RadarView;\n}(ComponentView);\n\nexport default RadarView;","map":{"version":3,"names":["__extends","zrUtil","AxisBuilder","graphic","ComponentView","axisBuilderAttrs","RadarView","_super","_this","apply","arguments","type","prototype","render","radarModel","ecModel","api","group","removeAll","_buildAxes","_buildSplitLineAndArea","radar","coordinateSystem","indicatorAxes","getIndicatorAxes","axisBuilders","map","indicatorAxis","axisName","model","get","name","axisBuilder","position","cx","cy","rotation","angle","labelDirection","tickDirection","nameDirection","each","add","getGroup","length","shape","splitLineModel","getModel","splitAreaModel","lineStyleModel","areaStyleModel","showSplitLine","showSplitArea","splitLineColors","splitAreaColors","splitLineColorsArr","isArray","splitAreaColorsArr","splitLines","splitAreas","getColorIndex","areaOrLine","areaOrLineColorList","idx","colorIndex","ticksRadius","getTicksCoords","i","push","Circle","r","coord","Ring","r0","realSplitNumber_1","axesTicksPoints","ticksCoords","Math","min","tickCoord","coordToPoint","prevPoints","points","j","slice","process","env","NODE_ENV","console","error","Polyline","Polygon","concat","reverse","lineStyle","getLineStyle","areaStyle","getAreaStyle","mergePath","style","defaults","stroke","fill","silent"],"sources":["E:/各个学科/论文/毕业论文/Atmosphere/eco-friendly/node_modules/echarts/lib/component/radar/RadarView.js"],"sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n\r\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nimport { __extends } from \"tslib\";\r\nimport * as zrUtil from 'zrender/lib/core/util.js';\r\nimport AxisBuilder from '../axis/AxisBuilder.js';\r\nimport * as graphic from '../../util/graphic.js';\r\nimport ComponentView from '../../view/Component.js';\r\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\r\n\r\nvar RadarView =\r\n/** @class */\r\nfunction (_super) {\r\n  __extends(RadarView, _super);\r\n\r\n  function RadarView() {\r\n    var _this = _super !== null && _super.apply(this, arguments) || this;\r\n\r\n    _this.type = RadarView.type;\r\n    return _this;\r\n  }\r\n\r\n  RadarView.prototype.render = function (radarModel, ecModel, api) {\r\n    var group = this.group;\r\n    group.removeAll();\r\n\r\n    this._buildAxes(radarModel);\r\n\r\n    this._buildSplitLineAndArea(radarModel);\r\n  };\r\n\r\n  RadarView.prototype._buildAxes = function (radarModel) {\r\n    var radar = radarModel.coordinateSystem;\r\n    var indicatorAxes = radar.getIndicatorAxes();\r\n    var axisBuilders = zrUtil.map(indicatorAxes, function (indicatorAxis) {\r\n      var axisName = indicatorAxis.model.get('showName') ? indicatorAxis.name : ''; // hide name\r\n\r\n      var axisBuilder = new AxisBuilder(indicatorAxis.model, {\r\n        axisName: axisName,\r\n        position: [radar.cx, radar.cy],\r\n        rotation: indicatorAxis.angle,\r\n        labelDirection: -1,\r\n        tickDirection: -1,\r\n        nameDirection: 1\r\n      });\r\n      return axisBuilder;\r\n    });\r\n    zrUtil.each(axisBuilders, function (axisBuilder) {\r\n      zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\r\n      this.group.add(axisBuilder.getGroup());\r\n    }, this);\r\n  };\r\n\r\n  RadarView.prototype._buildSplitLineAndArea = function (radarModel) {\r\n    var radar = radarModel.coordinateSystem;\r\n    var indicatorAxes = radar.getIndicatorAxes();\r\n\r\n    if (!indicatorAxes.length) {\r\n      return;\r\n    }\r\n\r\n    var shape = radarModel.get('shape');\r\n    var splitLineModel = radarModel.getModel('splitLine');\r\n    var splitAreaModel = radarModel.getModel('splitArea');\r\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\r\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\r\n    var showSplitLine = splitLineModel.get('show');\r\n    var showSplitArea = splitAreaModel.get('show');\r\n    var splitLineColors = lineStyleModel.get('color');\r\n    var splitAreaColors = areaStyleModel.get('color');\r\n    var splitLineColorsArr = zrUtil.isArray(splitLineColors) ? splitLineColors : [splitLineColors];\r\n    var splitAreaColorsArr = zrUtil.isArray(splitAreaColors) ? splitAreaColors : [splitAreaColors];\r\n    var splitLines = [];\r\n    var splitAreas = [];\r\n\r\n    function getColorIndex(areaOrLine, areaOrLineColorList, idx) {\r\n      var colorIndex = idx % areaOrLineColorList.length;\r\n      areaOrLine[colorIndex] = areaOrLine[colorIndex] || [];\r\n      return colorIndex;\r\n    }\r\n\r\n    if (shape === 'circle') {\r\n      var ticksRadius = indicatorAxes[0].getTicksCoords();\r\n      var cx = radar.cx;\r\n      var cy = radar.cy;\r\n\r\n      for (var i = 0; i < ticksRadius.length; i++) {\r\n        if (showSplitLine) {\r\n          var colorIndex = getColorIndex(splitLines, splitLineColorsArr, i);\r\n          splitLines[colorIndex].push(new graphic.Circle({\r\n            shape: {\r\n              cx: cx,\r\n              cy: cy,\r\n              r: ticksRadius[i].coord\r\n            }\r\n          }));\r\n        }\r\n\r\n        if (showSplitArea && i < ticksRadius.length - 1) {\r\n          var colorIndex = getColorIndex(splitAreas, splitAreaColorsArr, i);\r\n          splitAreas[colorIndex].push(new graphic.Ring({\r\n            shape: {\r\n              cx: cx,\r\n              cy: cy,\r\n              r0: ticksRadius[i].coord,\r\n              r: ticksRadius[i + 1].coord\r\n            }\r\n          }));\r\n        }\r\n      }\r\n    } // Polyyon\r\n    else {\r\n        var realSplitNumber_1;\r\n        var axesTicksPoints = zrUtil.map(indicatorAxes, function (indicatorAxis, idx) {\r\n          var ticksCoords = indicatorAxis.getTicksCoords();\r\n          realSplitNumber_1 = realSplitNumber_1 == null ? ticksCoords.length - 1 : Math.min(ticksCoords.length - 1, realSplitNumber_1);\r\n          return zrUtil.map(ticksCoords, function (tickCoord) {\r\n            return radar.coordToPoint(tickCoord.coord, idx);\r\n          });\r\n        });\r\n        var prevPoints = [];\r\n\r\n        for (var i = 0; i <= realSplitNumber_1; i++) {\r\n          var points = [];\r\n\r\n          for (var j = 0; j < indicatorAxes.length; j++) {\r\n            points.push(axesTicksPoints[j][i]);\r\n          } // Close\r\n\r\n\r\n          if (points[0]) {\r\n            points.push(points[0].slice());\r\n          } else {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n              console.error('Can\\'t draw value axis ' + i);\r\n            }\r\n          }\r\n\r\n          if (showSplitLine) {\r\n            var colorIndex = getColorIndex(splitLines, splitLineColorsArr, i);\r\n            splitLines[colorIndex].push(new graphic.Polyline({\r\n              shape: {\r\n                points: points\r\n              }\r\n            }));\r\n          }\r\n\r\n          if (showSplitArea && prevPoints) {\r\n            var colorIndex = getColorIndex(splitAreas, splitAreaColorsArr, i - 1);\r\n            splitAreas[colorIndex].push(new graphic.Polygon({\r\n              shape: {\r\n                points: points.concat(prevPoints)\r\n              }\r\n            }));\r\n          }\r\n\r\n          prevPoints = points.slice().reverse();\r\n        }\r\n      }\r\n\r\n    var lineStyle = lineStyleModel.getLineStyle();\r\n    var areaStyle = areaStyleModel.getAreaStyle(); // Add splitArea before splitLine\r\n\r\n    zrUtil.each(splitAreas, function (splitAreas, idx) {\r\n      this.group.add(graphic.mergePath(splitAreas, {\r\n        style: zrUtil.defaults({\r\n          stroke: 'none',\r\n          fill: splitAreaColorsArr[idx % splitAreaColorsArr.length]\r\n        }, areaStyle),\r\n        silent: true\r\n      }));\r\n    }, this);\r\n    zrUtil.each(splitLines, function (splitLines, idx) {\r\n      this.group.add(graphic.mergePath(splitLines, {\r\n        style: zrUtil.defaults({\r\n          fill: 'none',\r\n          stroke: splitLineColorsArr[idx % splitLineColorsArr.length]\r\n        }, lineStyle),\r\n        silent: true\r\n      }));\r\n    }, this);\r\n  };\r\n\r\n  RadarView.type = 'radar';\r\n  return RadarView;\r\n}(ComponentView);\r\n\r\nexport default RadarView;"],"mappings":"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"},"metadata":{},"sourceType":"module"}