{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport { parsePercent } from '../util/number.js';\nimport { isDimensionStacked } from '../data/helper/dataStackHelper.js';\n\nfunction getSeriesStackId(seriesModel) {\n  return seriesModel.get('stack') || '__ec_stack_' + seriesModel.seriesIndex;\n}\n\nfunction getAxisKey(polar, axis) {\n  return axis.dim + polar.model.componentIndex;\n}\n\nfunction barLayoutPolar(seriesType, ecModel, api) {\n  var lastStackCoords = {};\n  var barWidthAndOffset = calRadialBar(zrUtil.filter(ecModel.getSeriesByType(seriesType), function (seriesModel) {\n    return !ecModel.isSeriesFiltered(seriesModel) && seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'polar';\n  }));\n  ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n    // Check series coordinate, do layout for polar only\n    if (seriesModel.coordinateSystem.type !== 'polar') {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    var polar = seriesModel.coordinateSystem;\n    var baseAxis = polar.getBaseAxis();\n    var axisKey = getAxisKey(polar, baseAxis);\n    var stackId = getSeriesStackId(seriesModel);\n    var columnLayoutInfo = barWidthAndOffset[axisKey][stackId];\n    var columnOffset = columnLayoutInfo.offset;\n    var columnWidth = columnLayoutInfo.width;\n    var valueAxis = polar.getOtherAxis(baseAxis);\n    var cx = seriesModel.coordinateSystem.cx;\n    var cy = seriesModel.coordinateSystem.cy;\n    var barMinHeight = seriesModel.get('barMinHeight') || 0;\n    var barMinAngle = seriesModel.get('barMinAngle') || 0;\n    lastStackCoords[stackId] = lastStackCoords[stackId] || [];\n    var valueDim = data.mapDimension(valueAxis.dim);\n    var baseDim = data.mapDimension(baseAxis.dim);\n    var stacked = isDimensionStacked(data, valueDim\n    /*, baseDim*/\n    );\n    var clampLayout = baseAxis.dim !== 'radius' || !seriesModel.get('roundCap', true);\n    var valueAxisStart = valueAxis.dataToCoord(0);\n\n    for (var idx = 0, len = data.count(); idx < len; idx++) {\n      var value = data.get(valueDim, idx);\n      var baseValue = data.get(baseDim, idx);\n      var sign = value >= 0 ? 'p' : 'n';\n      var baseCoord = valueAxisStart; // Because of the barMinHeight, we can not use the value in\n      // stackResultDimension directly.\n      // Only ordinal axis can be stacked.\n\n      if (stacked) {\n        if (!lastStackCoords[stackId][baseValue]) {\n          lastStackCoords[stackId][baseValue] = {\n            p: valueAxisStart,\n            n: valueAxisStart // Negative stack\n\n          };\n        } // Should also consider #4243\n\n\n        baseCoord = lastStackCoords[stackId][baseValue][sign];\n      }\n\n      var r0 = void 0;\n      var r = void 0;\n      var startAngle = void 0;\n      var endAngle = void 0; // radial sector\n\n      if (valueAxis.dim === 'radius') {\n        var radiusSpan = valueAxis.dataToCoord(value) - valueAxisStart;\n        var angle = baseAxis.dataToCoord(baseValue);\n\n        if (Math.abs(radiusSpan) < barMinHeight) {\n          radiusSpan = (radiusSpan < 0 ? -1 : 1) * barMinHeight;\n        }\n\n        r0 = baseCoord;\n        r = baseCoord + radiusSpan;\n        startAngle = angle - columnOffset;\n        endAngle = startAngle - columnWidth;\n        stacked && (lastStackCoords[stackId][baseValue][sign] = r);\n      } // tangential sector\n      else {\n        var angleSpan = valueAxis.dataToCoord(value, clampLayout) - valueAxisStart;\n        var radius = baseAxis.dataToCoord(baseValue);\n\n        if (Math.abs(angleSpan) < barMinAngle) {\n          angleSpan = (angleSpan < 0 ? -1 : 1) * barMinAngle;\n        }\n\n        r0 = radius + columnOffset;\n        r = r0 + columnWidth;\n        startAngle = baseCoord;\n        endAngle = baseCoord + angleSpan; // if the previous stack is at the end of the ring,\n        // add a round to differentiate it from origin\n        // let extent = angleAxis.getExtent();\n        // let stackCoord = angle;\n        // if (stackCoord === extent[0] && value > 0) {\n        //     stackCoord = extent[1];\n        // }\n        // else if (stackCoord === extent[1] && value < 0) {\n        //     stackCoord = extent[0];\n        // }\n\n        stacked && (lastStackCoords[stackId][baseValue][sign] = endAngle);\n      }\n\n      data.setItemLayout(idx, {\n        cx: cx,\n        cy: cy,\n        r0: r0,\n        r: r,\n        // Consider that positive angle is anti-clockwise,\n        // while positive radian of sector is clockwise\n        startAngle: -startAngle * Math.PI / 180,\n        endAngle: -endAngle * Math.PI / 180,\n\n        /**\r\n         * Keep the same logic with bar in catesion: use end value to\r\n         * control direction. Notice that if clockwise is true (by\r\n         * default), the sector will always draw clockwisely, no matter\r\n         * whether endAngle is greater or less than startAngle.\r\n         */\n        clockwise: startAngle >= endAngle\n      });\n    }\n  });\n}\n/**\r\n * Calculate bar width and offset for radial bar charts\r\n */\n\n\nfunction calRadialBar(barSeries) {\n  // Columns info on each category axis. Key is polar name\n  var columnsMap = {};\n  zrUtil.each(barSeries, function (seriesModel, idx) {\n    var data = seriesModel.getData();\n    var polar = seriesModel.coordinateSystem;\n    var baseAxis = polar.getBaseAxis();\n    var axisKey = getAxisKey(polar, baseAxis);\n    var axisExtent = baseAxis.getExtent();\n    var bandWidth = baseAxis.type === 'category' ? baseAxis.getBandWidth() : Math.abs(axisExtent[1] - axisExtent[0]) / data.count();\n    var columnsOnAxis = columnsMap[axisKey] || {\n      bandWidth: bandWidth,\n      remainedWidth: bandWidth,\n      autoWidthCount: 0,\n      categoryGap: '20%',\n      gap: '30%',\n      stacks: {}\n    };\n    var stacks = columnsOnAxis.stacks;\n    columnsMap[axisKey] = columnsOnAxis;\n    var stackId = getSeriesStackId(seriesModel);\n\n    if (!stacks[stackId]) {\n      columnsOnAxis.autoWidthCount++;\n    }\n\n    stacks[stackId] = stacks[stackId] || {\n      width: 0,\n      maxWidth: 0\n    };\n    var barWidth = parsePercent(seriesModel.get('barWidth'), bandWidth);\n    var barMaxWidth = parsePercent(seriesModel.get('barMaxWidth'), bandWidth);\n    var barGap = seriesModel.get('barGap');\n    var barCategoryGap = seriesModel.get('barCategoryGap');\n\n    if (barWidth && !stacks[stackId].width) {\n      barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);\n      stacks[stackId].width = barWidth;\n      columnsOnAxis.remainedWidth -= barWidth;\n    }\n\n    barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);\n    barGap != null && (columnsOnAxis.gap = barGap);\n    barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);\n  });\n  var result = {};\n  zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {\n    result[coordSysName] = {};\n    var stacks = columnsOnAxis.stacks;\n    var bandWidth = columnsOnAxis.bandWidth;\n    var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);\n    var barGapPercent = parsePercent(columnsOnAxis.gap, 1);\n    var remainedWidth = columnsOnAxis.remainedWidth;\n    var autoWidthCount = columnsOnAxis.autoWidthCount;\n    var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0); // Find if any auto calculated bar exceeded maxBarWidth\n\n    zrUtil.each(stacks, function (column, stack) {\n      var maxWidth = column.maxWidth;\n\n      if (maxWidth && maxWidth < autoWidth) {\n        maxWidth = Math.min(maxWidth, remainedWidth);\n\n        if (column.width) {\n          maxWidth = Math.min(maxWidth, column.width);\n        }\n\n        remainedWidth -= maxWidth;\n        column.width = maxWidth;\n        autoWidthCount--;\n      }\n    }); // Recalculate width again\n\n    autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0);\n    var widthSum = 0;\n    var lastColumn;\n    zrUtil.each(stacks, function (column, idx) {\n      if (!column.width) {\n        column.width = autoWidth;\n      }\n\n      lastColumn = column;\n      widthSum += column.width * (1 + barGapPercent);\n    });\n\n    if (lastColumn) {\n      widthSum -= lastColumn.width * barGapPercent;\n    }\n\n    var offset = -widthSum / 2;\n    zrUtil.each(stacks, function (column, stackId) {\n      result[coordSysName][stackId] = result[coordSysName][stackId] || {\n        offset: offset,\n        width: column.width\n      };\n      offset += column.width * (1 + barGapPercent);\n    });\n  });\n  return result;\n}\n\nexport default barLayoutPolar;","map":{"version":3,"names":["zrUtil","parsePercent","isDimensionStacked","getSeriesStackId","seriesModel","get","seriesIndex","getAxisKey","polar","axis","dim","model","componentIndex","barLayoutPolar","seriesType","ecModel","api","lastStackCoords","barWidthAndOffset","calRadialBar","filter","getSeriesByType","isSeriesFiltered","coordinateSystem","type","eachSeriesByType","data","getData","baseAxis","getBaseAxis","axisKey","stackId","columnLayoutInfo","columnOffset","offset","columnWidth","width","valueAxis","getOtherAxis","cx","cy","barMinHeight","barMinAngle","valueDim","mapDimension","baseDim","stacked","clampLayout","valueAxisStart","dataToCoord","idx","len","count","value","baseValue","sign","baseCoord","p","n","r0","r","startAngle","endAngle","radiusSpan","angle","Math","abs","angleSpan","radius","setItemLayout","PI","clockwise","barSeries","columnsMap","each","axisExtent","getExtent","bandWidth","getBandWidth","columnsOnAxis","remainedWidth","autoWidthCount","categoryGap","gap","stacks","maxWidth","barWidth","barMaxWidth","barGap","barCategoryGap","min","result","coordSysName","barGapPercent","autoWidth","max","column","stack","widthSum","lastColumn"],"sources":["E:/各个学科/论文/毕业论文/Atmosphere/eco-friendly/node_modules/echarts/lib/layout/barPolar.js"],"sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n\r\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nimport * as zrUtil from 'zrender/lib/core/util.js';\r\nimport { parsePercent } from '../util/number.js';\r\nimport { isDimensionStacked } from '../data/helper/dataStackHelper.js';\r\n\r\nfunction getSeriesStackId(seriesModel) {\r\n  return seriesModel.get('stack') || '__ec_stack_' + seriesModel.seriesIndex;\r\n}\r\n\r\nfunction getAxisKey(polar, axis) {\r\n  return axis.dim + polar.model.componentIndex;\r\n}\r\n\r\nfunction barLayoutPolar(seriesType, ecModel, api) {\r\n  var lastStackCoords = {};\r\n  var barWidthAndOffset = calRadialBar(zrUtil.filter(ecModel.getSeriesByType(seriesType), function (seriesModel) {\r\n    return !ecModel.isSeriesFiltered(seriesModel) && seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'polar';\r\n  }));\r\n  ecModel.eachSeriesByType(seriesType, function (seriesModel) {\r\n    // Check series coordinate, do layout for polar only\r\n    if (seriesModel.coordinateSystem.type !== 'polar') {\r\n      return;\r\n    }\r\n\r\n    var data = seriesModel.getData();\r\n    var polar = seriesModel.coordinateSystem;\r\n    var baseAxis = polar.getBaseAxis();\r\n    var axisKey = getAxisKey(polar, baseAxis);\r\n    var stackId = getSeriesStackId(seriesModel);\r\n    var columnLayoutInfo = barWidthAndOffset[axisKey][stackId];\r\n    var columnOffset = columnLayoutInfo.offset;\r\n    var columnWidth = columnLayoutInfo.width;\r\n    var valueAxis = polar.getOtherAxis(baseAxis);\r\n    var cx = seriesModel.coordinateSystem.cx;\r\n    var cy = seriesModel.coordinateSystem.cy;\r\n    var barMinHeight = seriesModel.get('barMinHeight') || 0;\r\n    var barMinAngle = seriesModel.get('barMinAngle') || 0;\r\n    lastStackCoords[stackId] = lastStackCoords[stackId] || [];\r\n    var valueDim = data.mapDimension(valueAxis.dim);\r\n    var baseDim = data.mapDimension(baseAxis.dim);\r\n    var stacked = isDimensionStacked(data, valueDim\r\n    /*, baseDim*/\r\n    );\r\n    var clampLayout = baseAxis.dim !== 'radius' || !seriesModel.get('roundCap', true);\r\n    var valueAxisStart = valueAxis.dataToCoord(0);\r\n\r\n    for (var idx = 0, len = data.count(); idx < len; idx++) {\r\n      var value = data.get(valueDim, idx);\r\n      var baseValue = data.get(baseDim, idx);\r\n      var sign = value >= 0 ? 'p' : 'n';\r\n      var baseCoord = valueAxisStart; // Because of the barMinHeight, we can not use the value in\r\n      // stackResultDimension directly.\r\n      // Only ordinal axis can be stacked.\r\n\r\n      if (stacked) {\r\n        if (!lastStackCoords[stackId][baseValue]) {\r\n          lastStackCoords[stackId][baseValue] = {\r\n            p: valueAxisStart,\r\n            n: valueAxisStart // Negative stack\r\n\r\n          };\r\n        } // Should also consider #4243\r\n\r\n\r\n        baseCoord = lastStackCoords[stackId][baseValue][sign];\r\n      }\r\n\r\n      var r0 = void 0;\r\n      var r = void 0;\r\n      var startAngle = void 0;\r\n      var endAngle = void 0; // radial sector\r\n\r\n      if (valueAxis.dim === 'radius') {\r\n        var radiusSpan = valueAxis.dataToCoord(value) - valueAxisStart;\r\n        var angle = baseAxis.dataToCoord(baseValue);\r\n\r\n        if (Math.abs(radiusSpan) < barMinHeight) {\r\n          radiusSpan = (radiusSpan < 0 ? -1 : 1) * barMinHeight;\r\n        }\r\n\r\n        r0 = baseCoord;\r\n        r = baseCoord + radiusSpan;\r\n        startAngle = angle - columnOffset;\r\n        endAngle = startAngle - columnWidth;\r\n        stacked && (lastStackCoords[stackId][baseValue][sign] = r);\r\n      } // tangential sector\r\n      else {\r\n          var angleSpan = valueAxis.dataToCoord(value, clampLayout) - valueAxisStart;\r\n          var radius = baseAxis.dataToCoord(baseValue);\r\n\r\n          if (Math.abs(angleSpan) < barMinAngle) {\r\n            angleSpan = (angleSpan < 0 ? -1 : 1) * barMinAngle;\r\n          }\r\n\r\n          r0 = radius + columnOffset;\r\n          r = r0 + columnWidth;\r\n          startAngle = baseCoord;\r\n          endAngle = baseCoord + angleSpan; // if the previous stack is at the end of the ring,\r\n          // add a round to differentiate it from origin\r\n          // let extent = angleAxis.getExtent();\r\n          // let stackCoord = angle;\r\n          // if (stackCoord === extent[0] && value > 0) {\r\n          //     stackCoord = extent[1];\r\n          // }\r\n          // else if (stackCoord === extent[1] && value < 0) {\r\n          //     stackCoord = extent[0];\r\n          // }\r\n\r\n          stacked && (lastStackCoords[stackId][baseValue][sign] = endAngle);\r\n        }\r\n\r\n      data.setItemLayout(idx, {\r\n        cx: cx,\r\n        cy: cy,\r\n        r0: r0,\r\n        r: r,\r\n        // Consider that positive angle is anti-clockwise,\r\n        // while positive radian of sector is clockwise\r\n        startAngle: -startAngle * Math.PI / 180,\r\n        endAngle: -endAngle * Math.PI / 180,\r\n\r\n        /**\r\n         * Keep the same logic with bar in catesion: use end value to\r\n         * control direction. Notice that if clockwise is true (by\r\n         * default), the sector will always draw clockwisely, no matter\r\n         * whether endAngle is greater or less than startAngle.\r\n         */\r\n        clockwise: startAngle >= endAngle\r\n      });\r\n    }\r\n  });\r\n}\r\n/**\r\n * Calculate bar width and offset for radial bar charts\r\n */\r\n\r\n\r\nfunction calRadialBar(barSeries) {\r\n  // Columns info on each category axis. Key is polar name\r\n  var columnsMap = {};\r\n  zrUtil.each(barSeries, function (seriesModel, idx) {\r\n    var data = seriesModel.getData();\r\n    var polar = seriesModel.coordinateSystem;\r\n    var baseAxis = polar.getBaseAxis();\r\n    var axisKey = getAxisKey(polar, baseAxis);\r\n    var axisExtent = baseAxis.getExtent();\r\n    var bandWidth = baseAxis.type === 'category' ? baseAxis.getBandWidth() : Math.abs(axisExtent[1] - axisExtent[0]) / data.count();\r\n    var columnsOnAxis = columnsMap[axisKey] || {\r\n      bandWidth: bandWidth,\r\n      remainedWidth: bandWidth,\r\n      autoWidthCount: 0,\r\n      categoryGap: '20%',\r\n      gap: '30%',\r\n      stacks: {}\r\n    };\r\n    var stacks = columnsOnAxis.stacks;\r\n    columnsMap[axisKey] = columnsOnAxis;\r\n    var stackId = getSeriesStackId(seriesModel);\r\n\r\n    if (!stacks[stackId]) {\r\n      columnsOnAxis.autoWidthCount++;\r\n    }\r\n\r\n    stacks[stackId] = stacks[stackId] || {\r\n      width: 0,\r\n      maxWidth: 0\r\n    };\r\n    var barWidth = parsePercent(seriesModel.get('barWidth'), bandWidth);\r\n    var barMaxWidth = parsePercent(seriesModel.get('barMaxWidth'), bandWidth);\r\n    var barGap = seriesModel.get('barGap');\r\n    var barCategoryGap = seriesModel.get('barCategoryGap');\r\n\r\n    if (barWidth && !stacks[stackId].width) {\r\n      barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);\r\n      stacks[stackId].width = barWidth;\r\n      columnsOnAxis.remainedWidth -= barWidth;\r\n    }\r\n\r\n    barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);\r\n    barGap != null && (columnsOnAxis.gap = barGap);\r\n    barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);\r\n  });\r\n  var result = {};\r\n  zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {\r\n    result[coordSysName] = {};\r\n    var stacks = columnsOnAxis.stacks;\r\n    var bandWidth = columnsOnAxis.bandWidth;\r\n    var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);\r\n    var barGapPercent = parsePercent(columnsOnAxis.gap, 1);\r\n    var remainedWidth = columnsOnAxis.remainedWidth;\r\n    var autoWidthCount = columnsOnAxis.autoWidthCount;\r\n    var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\r\n    autoWidth = Math.max(autoWidth, 0); // Find if any auto calculated bar exceeded maxBarWidth\r\n\r\n    zrUtil.each(stacks, function (column, stack) {\r\n      var maxWidth = column.maxWidth;\r\n\r\n      if (maxWidth && maxWidth < autoWidth) {\r\n        maxWidth = Math.min(maxWidth, remainedWidth);\r\n\r\n        if (column.width) {\r\n          maxWidth = Math.min(maxWidth, column.width);\r\n        }\r\n\r\n        remainedWidth -= maxWidth;\r\n        column.width = maxWidth;\r\n        autoWidthCount--;\r\n      }\r\n    }); // Recalculate width again\r\n\r\n    autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\r\n    autoWidth = Math.max(autoWidth, 0);\r\n    var widthSum = 0;\r\n    var lastColumn;\r\n    zrUtil.each(stacks, function (column, idx) {\r\n      if (!column.width) {\r\n        column.width = autoWidth;\r\n      }\r\n\r\n      lastColumn = column;\r\n      widthSum += column.width * (1 + barGapPercent);\r\n    });\r\n\r\n    if (lastColumn) {\r\n      widthSum -= lastColumn.width * barGapPercent;\r\n    }\r\n\r\n    var offset = -widthSum / 2;\r\n    zrUtil.each(stacks, function (column, stackId) {\r\n      result[coordSysName][stackId] = result[coordSysName][stackId] || {\r\n        offset: offset,\r\n        width: column.width\r\n      };\r\n      offset += column.width * (1 + barGapPercent);\r\n    });\r\n  });\r\n  return result;\r\n}\r\n\r\nexport default barLayoutPolar;"],"mappings":"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"},"metadata":{},"sourceType":"module"}