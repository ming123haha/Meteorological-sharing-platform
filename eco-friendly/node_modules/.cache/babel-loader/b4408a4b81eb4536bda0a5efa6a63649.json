{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\n\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport { unpackFloatRGBA as n } from \"../../core/floatRGBA.js\";\nimport { f as e } from \"../../chunks/vec3f64.js\";\nimport { BufferObject as o } from \"./BufferObject.js\";\nimport { encodeDoubleArray as t } from \"./doublePrecisionUtils.js\";\nimport { TargetType as r, DepthStencilTargetType as i, TextureType as a, TextureWrapMode as c, PixelFormat as s, PixelType as l, TextureSamplingMode as p, Usage as v, DataType as f, PrimitiveType as u } from \"./enums.js\";\nimport { FramebufferObject as m } from \"./FramebufferObject.js\";\nimport { VertexArrayObject as h } from \"./VertexArrayObject.js\";\nimport { VertexElementDescriptor as d } from \"./VertexElementDescriptor.js\";\n\nfunction A(A, _) {\n  const g = new m(A, {\n    colorTarget: r.TEXTURE,\n    depthStencilTarget: i.NONE\n  }, {\n    target: a.TEXTURE_2D,\n    wrapMode: c.CLAMP_TO_EDGE,\n    pixelFormat: s.RGBA,\n    dataType: l.UNSIGNED_BYTE,\n    samplingMode: p.NEAREST,\n    width: 1,\n    height: 1\n  });\n\n  function B(n, e) {\n    const o = `\\n\\n  precision highp float;\\n\\n  attribute vec2 position;\\n\\n  uniform vec3 u_highA;\\n  uniform vec3 u_lowA;\\n  uniform vec3 u_highB;\\n  uniform vec3 u_lowB;\\n\\n  varying vec4 v_color;\\n\\n  ${_ ? \"#define DOUBLE_PRECISION_REQUIRES_OBFUSCATION\" : \"\"}\\n\\n  #ifdef DOUBLE_PRECISION_REQUIRES_OBFUSCATION\\n\\n  vec3 dpPlusFrc(vec3 a, vec3 b) {\\n    return mix(a, a + b, vec3(notEqual(b, vec3(0))));\\n  }\\n\\n  vec3 dpMinusFrc(vec3 a, vec3 b) {\\n    return mix(vec3(0), a - b, vec3(notEqual(a, b)));\\n  }\\n\\n  vec3 dpAdd(vec3 hiA, vec3 loA, vec3 hiB, vec3 loB) {\\n    vec3 t1 = dpPlusFrc(hiA, hiB);\\n    vec3 e = dpMinusFrc(t1, hiA);\\n    vec3 t2 = dpMinusFrc(hiB, e) + dpMinusFrc(hiA, dpMinusFrc(t1, e)) + loA + loB;\\n    return t1 + t2;\\n  }\\n\\n  #else\\n\\n  vec3 dpAdd(vec3 hiA, vec3 loA, vec3 hiB, vec3 loB) {\\n    vec3 t1 = hiA + hiB;\\n    vec3 e = t1 - hiA;\\n    vec3 t2 = ((hiB - e) + (hiA - (t1 - e))) + loA + loB;\\n    return t1 + t2;\\n  }\\n\\n  #endif\\n\\n  const float MAX_RGBA_FLOAT =\\n    255.0 / 256.0 +\\n    255.0 / 256.0 / 256.0 +\\n    255.0 / 256.0 / 256.0 / 256.0 +\\n    255.0 / 256.0 / 256.0 / 256.0 / 256.0;\\n\\n  const vec4 FIXED_POINT_FACTORS = vec4(1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0);\\n\\n  vec4 float2rgba(const float value) {\\n    // Make sure value is in the domain we can represent\\n    float valueInValidDomain = clamp(value, 0.0, MAX_RGBA_FLOAT);\\n\\n    // Decompose value in 32bit fixed point parts represented as\\n    // uint8 rgba components. Decomposition uses the fractional part after multiplying\\n    // by a power of 256 (this removes the bits that are represented in the previous\\n    // component) and then converts the fractional part to 8bits.\\n    vec4 fixedPointU8 = floor(fract(valueInValidDomain * FIXED_POINT_FACTORS) * 256.0);\\n\\n    // Convert uint8 values (from 0 to 255) to floating point representation for\\n    // the shader\\n    const float toU8AsFloat = 1.0 / 255.0;\\n\\n    return fixedPointU8 * toU8AsFloat;\\n  }\\n\\n  void main() {\\n    vec3 val = dpAdd(u_highA, u_lowA, -u_highB, -u_lowB);\\n\\n    v_color = float2rgba(val.z / 25.0);\\n\\n    gl_Position = vec4(position * 2.0 - 1.0, 0.0, 1.0);\\n  }\\n  `,\n          r = \"\\n  precision highp float;\\n\\n  varying vec4 v_color;\\n\\n  void main() {\\n    gl_FragColor = v_color;\\n  }\\n  \",\n          i = A.programCache.acquire(o, r, new Map([[\"position\", 0]])),\n          a = new Float32Array(6);\n    t(n, a, 3);\n    const c = new Float32Array(6);\n    return t(e, c, 3), A.useProgram(i), i.setUniform3f(\"u_highA\", a[0], a[2], a[4]), i.setUniform3f(\"u_lowA\", a[1], a[3], a[5]), i.setUniform3f(\"u_highB\", c[0], c[2], c[4]), i.setUniform3f(\"u_lowB\", c[1], c[3], c[5]), i;\n  }\n\n  const E = o.createVertex(A, v.STATIC_DRAW, new Uint16Array([0, 0, 1, 0, 0, 1, 1, 1])),\n        b = new h(A, new Map([[\"position\", 0]]), {\n    geometry: [new d(\"position\", 2, f.UNSIGNED_SHORT, 0, 4)]\n  }, {\n    geometry: E\n  }),\n        F = e(5633261.287538229, 2626832.878767164, 1434988.0495278358),\n        w = e(5633271.46742708, 2626873.6381334523, 1434963.231608387),\n        T = B(F, w),\n        O = A.getBoundFramebufferObject(),\n        {\n    x: U,\n    y: I,\n    width: R,\n    height: N\n  } = A.getViewport();\n  A.bindFramebuffer(g), A.setViewport(0, 0, 1, 1), A.bindVAO(b), A.drawArrays(u.TRIANGLE_STRIP, 0, 4);\n  const S = new Uint8Array(4);\n  g.readPixels(0, 0, 1, 1, s.RGBA, l.UNSIGNED_BYTE, S), T.dispose(), b.dispose(!1), E.dispose(), g.dispose(), A.setViewport(U, I, R, N), A.bindFramebuffer(O);\n  const D = (F[2] - w[2]) / 25,\n        y = n(S);\n  return Math.abs(D - y);\n}\n\nexport { A as testDoublePrecisionArithmetic };","map":{"version":3,"names":["unpackFloatRGBA","n","f","e","BufferObject","o","encodeDoubleArray","t","TargetType","r","DepthStencilTargetType","i","TextureType","a","TextureWrapMode","c","PixelFormat","s","PixelType","l","TextureSamplingMode","p","Usage","v","DataType","PrimitiveType","u","FramebufferObject","m","VertexArrayObject","h","VertexElementDescriptor","d","A","_","g","colorTarget","TEXTURE","depthStencilTarget","NONE","target","TEXTURE_2D","wrapMode","CLAMP_TO_EDGE","pixelFormat","RGBA","dataType","UNSIGNED_BYTE","samplingMode","NEAREST","width","height","B","programCache","acquire","Map","Float32Array","useProgram","setUniform3f","E","createVertex","STATIC_DRAW","Uint16Array","b","geometry","UNSIGNED_SHORT","F","w","T","O","getBoundFramebufferObject","x","U","y","I","R","N","getViewport","bindFramebuffer","setViewport","bindVAO","drawArrays","TRIANGLE_STRIP","S","Uint8Array","readPixels","dispose","D","Math","abs","testDoublePrecisionArithmetic"],"sources":["C:/Users/hp/Desktop/eco-friendly atmosphere/Atmosphere/eco-friendly/node_modules/@arcgis/core/views/webgl/testDoublePrecisionArithmetic.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport{unpackFloatRGBA as n}from\"../../core/floatRGBA.js\";import{f as e}from\"../../chunks/vec3f64.js\";import{BufferObject as o}from\"./BufferObject.js\";import{encodeDoubleArray as t}from\"./doublePrecisionUtils.js\";import{TargetType as r,DepthStencilTargetType as i,TextureType as a,TextureWrapMode as c,PixelFormat as s,PixelType as l,TextureSamplingMode as p,Usage as v,DataType as f,PrimitiveType as u}from\"./enums.js\";import{FramebufferObject as m}from\"./FramebufferObject.js\";import{VertexArrayObject as h}from\"./VertexArrayObject.js\";import{VertexElementDescriptor as d}from\"./VertexElementDescriptor.js\";function A(A,_){const g=new m(A,{colorTarget:r.TEXTURE,depthStencilTarget:i.NONE},{target:a.TEXTURE_2D,wrapMode:c.CLAMP_TO_EDGE,pixelFormat:s.RGBA,dataType:l.UNSIGNED_BYTE,samplingMode:p.NEAREST,width:1,height:1});function B(n,e){const o=`\\n\\n  precision highp float;\\n\\n  attribute vec2 position;\\n\\n  uniform vec3 u_highA;\\n  uniform vec3 u_lowA;\\n  uniform vec3 u_highB;\\n  uniform vec3 u_lowB;\\n\\n  varying vec4 v_color;\\n\\n  ${_?\"#define DOUBLE_PRECISION_REQUIRES_OBFUSCATION\":\"\"}\\n\\n  #ifdef DOUBLE_PRECISION_REQUIRES_OBFUSCATION\\n\\n  vec3 dpPlusFrc(vec3 a, vec3 b) {\\n    return mix(a, a + b, vec3(notEqual(b, vec3(0))));\\n  }\\n\\n  vec3 dpMinusFrc(vec3 a, vec3 b) {\\n    return mix(vec3(0), a - b, vec3(notEqual(a, b)));\\n  }\\n\\n  vec3 dpAdd(vec3 hiA, vec3 loA, vec3 hiB, vec3 loB) {\\n    vec3 t1 = dpPlusFrc(hiA, hiB);\\n    vec3 e = dpMinusFrc(t1, hiA);\\n    vec3 t2 = dpMinusFrc(hiB, e) + dpMinusFrc(hiA, dpMinusFrc(t1, e)) + loA + loB;\\n    return t1 + t2;\\n  }\\n\\n  #else\\n\\n  vec3 dpAdd(vec3 hiA, vec3 loA, vec3 hiB, vec3 loB) {\\n    vec3 t1 = hiA + hiB;\\n    vec3 e = t1 - hiA;\\n    vec3 t2 = ((hiB - e) + (hiA - (t1 - e))) + loA + loB;\\n    return t1 + t2;\\n  }\\n\\n  #endif\\n\\n  const float MAX_RGBA_FLOAT =\\n    255.0 / 256.0 +\\n    255.0 / 256.0 / 256.0 +\\n    255.0 / 256.0 / 256.0 / 256.0 +\\n    255.0 / 256.0 / 256.0 / 256.0 / 256.0;\\n\\n  const vec4 FIXED_POINT_FACTORS = vec4(1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0);\\n\\n  vec4 float2rgba(const float value) {\\n    // Make sure value is in the domain we can represent\\n    float valueInValidDomain = clamp(value, 0.0, MAX_RGBA_FLOAT);\\n\\n    // Decompose value in 32bit fixed point parts represented as\\n    // uint8 rgba components. Decomposition uses the fractional part after multiplying\\n    // by a power of 256 (this removes the bits that are represented in the previous\\n    // component) and then converts the fractional part to 8bits.\\n    vec4 fixedPointU8 = floor(fract(valueInValidDomain * FIXED_POINT_FACTORS) * 256.0);\\n\\n    // Convert uint8 values (from 0 to 255) to floating point representation for\\n    // the shader\\n    const float toU8AsFloat = 1.0 / 255.0;\\n\\n    return fixedPointU8 * toU8AsFloat;\\n  }\\n\\n  void main() {\\n    vec3 val = dpAdd(u_highA, u_lowA, -u_highB, -u_lowB);\\n\\n    v_color = float2rgba(val.z / 25.0);\\n\\n    gl_Position = vec4(position * 2.0 - 1.0, 0.0, 1.0);\\n  }\\n  `,r=\"\\n  precision highp float;\\n\\n  varying vec4 v_color;\\n\\n  void main() {\\n    gl_FragColor = v_color;\\n  }\\n  \",i=A.programCache.acquire(o,r,new Map([[\"position\",0]])),a=new Float32Array(6);t(n,a,3);const c=new Float32Array(6);return t(e,c,3),A.useProgram(i),i.setUniform3f(\"u_highA\",a[0],a[2],a[4]),i.setUniform3f(\"u_lowA\",a[1],a[3],a[5]),i.setUniform3f(\"u_highB\",c[0],c[2],c[4]),i.setUniform3f(\"u_lowB\",c[1],c[3],c[5]),i}const E=o.createVertex(A,v.STATIC_DRAW,new Uint16Array([0,0,1,0,0,1,1,1])),b=new h(A,new Map([[\"position\",0]]),{geometry:[new d(\"position\",2,f.UNSIGNED_SHORT,0,4)]},{geometry:E}),F=e(5633261.287538229,2626832.878767164,1434988.0495278358),w=e(5633271.46742708,2626873.6381334523,1434963.231608387),T=B(F,w),O=A.getBoundFramebufferObject(),{x:U,y:I,width:R,height:N}=A.getViewport();A.bindFramebuffer(g),A.setViewport(0,0,1,1),A.bindVAO(b),A.drawArrays(u.TRIANGLE_STRIP,0,4);const S=new Uint8Array(4);g.readPixels(0,0,1,1,s.RGBA,l.UNSIGNED_BYTE,S),T.dispose(),b.dispose(!1),E.dispose(),g.dispose(),A.setViewport(U,I,R,N),A.bindFramebuffer(O);const D=(F[2]-w[2])/25,y=n(S);return Math.abs(D-y)}export{A as testDoublePrecisionArithmetic};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}