{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport { ShaderOutput as t } from \"../ShaderOutputOptions.js\";\nimport { RgbaFloatEncoding as a } from \"../util/RgbaFloatEncoding.glsl.js\";\nimport { glsl as o } from \"../../shaderModules/interfaces.js\";\n\nfunction e(e, l) {\n  e.fragment.include(a), l.output === t.Shadow ? (e.extensions.add(\"GL_OES_standard_derivatives\"), e.fragment.code.add(o`float _calculateFragDepth(const in float depth) {\nconst float SLOPE_SCALE = 2.0;\nconst float BIAS = 2.0 * .000015259;\nfloat m = max(abs(dFdx(depth)), abs(dFdy(depth)));\nfloat result = depth + SLOPE_SCALE * m + BIAS;\nreturn clamp(result, .0, .999999);\n}\nvoid outputDepth(float _linearDepth) {\ngl_FragColor = float2rgba(_calculateFragDepth(_linearDepth));\n}`)) : l.output === t.Depth && e.fragment.code.add(o`void outputDepth(float _linearDepth) {\ngl_FragColor = float2rgba(_linearDepth);\n}`);\n}\n\nexport { e as OutputDepth };","map":{"version":3,"names":["ShaderOutput","t","RgbaFloatEncoding","a","glsl","o","e","l","fragment","include","output","Shadow","extensions","add","code","Depth","OutputDepth"],"sources":["C:/Users/hp/Desktop/eco-friendly atmosphere/Atmosphere/eco-friendly/node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/output/OutputDepth.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport{ShaderOutput as t}from\"../ShaderOutputOptions.js\";import{RgbaFloatEncoding as a}from\"../util/RgbaFloatEncoding.glsl.js\";import{glsl as o}from\"../../shaderModules/interfaces.js\";function e(e,l){e.fragment.include(a),l.output===t.Shadow?(e.extensions.add(\"GL_OES_standard_derivatives\"),e.fragment.code.add(o`float _calculateFragDepth(const in float depth) {\nconst float SLOPE_SCALE = 2.0;\nconst float BIAS = 2.0 * .000015259;\nfloat m = max(abs(dFdx(depth)), abs(dFdy(depth)));\nfloat result = depth + SLOPE_SCALE * m + BIAS;\nreturn clamp(result, .0, .999999);\n}\nvoid outputDepth(float _linearDepth) {\ngl_FragColor = float2rgba(_calculateFragDepth(_linearDepth));\n}`)):l.output===t.Depth&&e.fragment.code.add(o`void outputDepth(float _linearDepth) {\ngl_FragColor = float2rgba(_linearDepth);\n}`)}export{e as OutputDepth};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,YAAY,IAAIC,CAAvB,QAA6B,2BAA7B;AAAyD,SAAOC,iBAAiB,IAAIC,CAA5B,QAAkC,mCAAlC;AAAsE,SAAOC,IAAI,IAAIC,CAAf,QAAqB,mCAArB;;AAAyD,SAASC,CAAT,CAAWA,CAAX,EAAaC,CAAb,EAAe;EAACD,CAAC,CAACE,QAAF,CAAWC,OAAX,CAAmBN,CAAnB,GAAsBI,CAAC,CAACG,MAAF,KAAWT,CAAC,CAACU,MAAb,IAAqBL,CAAC,CAACM,UAAF,CAAaC,GAAb,CAAiB,6BAAjB,GAAgDP,CAAC,CAACE,QAAF,CAAWM,IAAX,CAAgBD,GAAhB,CAAoBR,CAAE;AACzT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EATmS,CAArE,IASzNE,CAAC,CAACG,MAAF,KAAWT,CAAC,CAACc,KAAb,IAAoBT,CAAC,CAACE,QAAF,CAAWM,IAAX,CAAgBD,GAAhB,CAAoBR,CAAE;AAC/C;AACA,EAFyB,CAT+K;AAWpM;;AAAA,SAAOC,CAAC,IAAIU,WAAZ"},"metadata":{},"sourceType":"module"}