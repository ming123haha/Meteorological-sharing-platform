{"ast":null,"code":"import * as echarts from 'echarts';\nvar ROOT_PATH = 'https://echarts.apache.org/examples';\nvar chartDom = document.getElementById('main');\nvar myChart = echarts.init(chartDom);\nvar option;\nconst updateFrequency = 2000;\nconst dimension = 0;\nconst countryColors = {\n  Australia: '#00008b',\n  Canada: '#f00',\n  China: '#ffde00',\n  Cuba: '#002a8f',\n  Finland: '#003580',\n  France: '#ed2939',\n  Germany: '#000',\n  Iceland: '#003897',\n  India: '#f93',\n  Japan: '#bc002d',\n  'North Korea': '#024fa2',\n  'South Korea': '#000',\n  'New Zealand': '#00247d',\n  Norway: '#ef2b2d',\n  Poland: '#dc143c',\n  Russia: '#d52b1e',\n  Turkey: '#e30a17',\n  'United Kingdom': '#00247d',\n  'United States': '#b22234'\n};\n$.when($.getJSON('https://fastly.jsdelivr.net/npm/emoji-flags@1.3.0/data.json'), $.getJSON(ROOT_PATH + '/data/asset/data/life-expectancy-table.json')).done(function (res0, res1) {\n  const flags = res0[0];\n  const data = res1[0];\n  const years = [];\n\n  for (let i = 0; i < data.length; ++i) {\n    if (years.length === 0 || years[years.length - 1] !== data[i][4]) {\n      years.push(data[i][4]);\n    }\n  }\n\n  function getFlag(countryName) {\n    if (!countryName) {\n      return '';\n    }\n\n    return (flags.find(function (item) {\n      return item.name === countryName;\n    }) || {}).emoji;\n  }\n\n  let startIndex = 10;\n  let startYear = years[startIndex];\n  option = {\n    grid: {\n      top: 10,\n      bottom: 30,\n      left: 150,\n      right: 80\n    },\n    xAxis: {\n      max: 'dataMax',\n      axisLabel: {\n        formatter: function (n) {\n          return Math.round(n) + '';\n        }\n      }\n    },\n    dataset: {\n      source: data.slice(1).filter(function (d) {\n        return d[4] === startYear;\n      })\n    },\n    yAxis: {\n      type: 'category',\n      inverse: true,\n      max: 10,\n      axisLabel: {\n        show: true,\n        fontSize: 14,\n        formatter: function (value) {\n          return value + '{flag|' + getFlag(value) + '}';\n        },\n        rich: {\n          flag: {\n            fontSize: 25,\n            padding: 5\n          }\n        }\n      },\n      animationDuration: 300,\n      animationDurationUpdate: 300\n    },\n    series: [{\n      realtimeSort: true,\n      seriesLayoutBy: 'column',\n      type: 'bar',\n      itemStyle: {\n        color: function (param) {\n          return countryColors[param.value[3]] || '#5470c6';\n        }\n      },\n      encode: {\n        x: dimension,\n        y: 3\n      },\n      label: {\n        show: true,\n        precision: 1,\n        position: 'right',\n        valueAnimation: true,\n        fontFamily: 'monospace'\n      }\n    }],\n    // Disable init animation.\n    animationDuration: 0,\n    animationDurationUpdate: updateFrequency,\n    animationEasing: 'linear',\n    animationEasingUpdate: 'linear',\n    graphic: {\n      elements: [{\n        type: 'text',\n        right: 160,\n        bottom: 60,\n        style: {\n          text: startYear,\n          font: 'bolder 80px monospace',\n          fill: 'rgba(100, 100, 100, 0.25)'\n        },\n        z: 100\n      }]\n    }\n  }; // console.log(option);\n\n  myChart.setOption(option);\n\n  for (let i = startIndex; i < years.length - 1; ++i) {\n    (function (i) {\n      setTimeout(function () {\n        updateYear(years[i + 1]);\n      }, (i - startIndex) * updateFrequency);\n    })(i);\n  }\n\n  function updateYear(year) {\n    let source = data.slice(1).filter(function (d) {\n      return d[4] === year;\n    });\n    option.series[0].data = source;\n    option.graphic.elements[0].style.text = year;\n    myChart.setOption(option);\n  }\n});\noption && myChart.setOption(option);\nexport default {\n  name: \"Time_SpaceAnalysis\"\n};","map":{"version":3,"mappings":"AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;EACAA,oBADA;EAEAC,cAFA;EAGAC,gBAHA;EAIAC,eAJA;EAKAC,kBALA;EAMAC,iBANA;EAOAC,eAPA;EAQAC,kBARA;EASAC,aATA;EAUAC,gBAVA;EAWA,wBAXA;EAYA,qBAZA;EAaA,wBAbA;EAcAC,iBAdA;EAeAC,iBAfA;EAgBAC,iBAhBA;EAiBAC,iBAjBA;EAkBA,2BAlBA;EAmBA;AAnBA;AAqBAC,OACAA,wEADA,EAEAA,oEAFA,EAGAC,IAHA,CAGA;EACA;EACA;EACA;;EACA;IACA;MACAC;IACA;EACA;;EACA;IACA;MACA;IACA;;IACA,QACAC;MACA;IACA,CAFA,KAEA,EAHA,EAIAC,KAJA;EAKA;;EACA;EACA;EACAC;IACAC;MACAC,OADA;MAEAC,UAFA;MAGAC,SAHA;MAIAC;IAJA,CADA;IAOAC;MACAC,cADA;MAEAC;QACAC;UACA;QACA;MAHA;IAFA,CAPA;IAeAC;MACAC;QACA;MACA,CAFA;IADA,CAfA;IAoBAC;MACAC,gBADA;MAEAC,aAFA;MAGAP,OAHA;MAIAC;QACAO,UADA;QAEAC,YAFA;QAGAP;UACA;QACA,CALA;QAMAQ;UACAC;YACAF,YADA;YAEAG;UAFA;QADA;MANA,CAJA;MAiBAC,sBAjBA;MAkBAC;IAlBA,CApBA;IAwCAC,SACA;MACAC,kBADA;MAEAC,wBAFA;MAGAX,WAHA;MAIAY;QACAC;UACA;QACA;MAHA,CAJA;MASAC;QACAC,YADA;QAEAC;MAFA,CATA;MAaAC;QACAf,UADA;QAEAgB,YAFA;QAGAC,iBAHA;QAIAC,oBAJA;QAKAC;MALA;IAbA,CADA,CAxCA;IA+DA;IACAd,oBAhEA;IAiEAC,wCAjEA;IAkEAc,yBAlEA;IAmEAC,+BAnEA;IAoEAC;MACAC,WACA;QACAzB,YADA;QAEAR,UAFA;QAGAF,UAHA;QAIAoC;UACAC,eADA;UAEAC,6BAFA;UAGAC;QAHA,CAJA;QASAC;MATA,CADA;IADA;EApEA,EArBA,CAyGA;;EACAC;;EACA;IACA;MACAC;QACAC;MACA,CAFA,EAEA,kCAFA;IAGA,CAJA,EAIAC,CAJA;EAKA;;EACA;IACA;MACA;IACA,CAFA;IAGA/C;IACAA;IACA4C;EACA;AACA,CA7HA;AA+HA5C;AACA;EACAgD;AADA","names":["Australia","Canada","China","Cuba","Finland","France","Germany","Iceland","India","Japan","Norway","Poland","Russia","Turkey","$","done","years","flags","emoji","option","grid","top","bottom","left","right","xAxis","max","axisLabel","formatter","dataset","source","yAxis","type","inverse","show","fontSize","rich","flag","padding","animationDuration","animationDurationUpdate","series","realtimeSort","seriesLayoutBy","itemStyle","color","encode","x","y","label","precision","position","valueAnimation","fontFamily","animationEasing","animationEasingUpdate","graphic","elements","style","text","font","fill","z","myChart","setTimeout","updateYear","i","name"],"sourceRoot":"src/views","sources":["Time_SpaceAnalysis.vue"],"sourcesContent":["<template>\r\n<div id=\"main\" style=\"width: 500px;height: 500px\"></div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\nvar ROOT_PATH = 'https://echarts.apache.org/examples';\r\n\r\nvar chartDom = document.getElementById('main');\r\nvar myChart = echarts.init(chartDom);\r\nvar option;\r\nconst updateFrequency = 2000;\r\nconst dimension = 0;\r\nconst countryColors = {\r\n  Australia: '#00008b',\r\n  Canada: '#f00',\r\n  China: '#ffde00',\r\n  Cuba: '#002a8f',\r\n  Finland: '#003580',\r\n  France: '#ed2939',\r\n  Germany: '#000',\r\n  Iceland: '#003897',\r\n  India: '#f93',\r\n  Japan: '#bc002d',\r\n  'North Korea': '#024fa2',\r\n  'South Korea': '#000',\r\n  'New Zealand': '#00247d',\r\n  Norway: '#ef2b2d',\r\n  Poland: '#dc143c',\r\n  Russia: '#d52b1e',\r\n  Turkey: '#e30a17',\r\n  'United Kingdom': '#00247d',\r\n  'United States': '#b22234'\r\n};\r\n$.when(\r\n    $.getJSON('https://fastly.jsdelivr.net/npm/emoji-flags@1.3.0/data.json'),\r\n    $.getJSON(ROOT_PATH + '/data/asset/data/life-expectancy-table.json')\r\n).done(function (res0, res1) {\r\n  const flags = res0[0];\r\n  const data = res1[0];\r\n  const years = [];\r\n  for (let i = 0; i < data.length; ++i) {\r\n    if (years.length === 0 || years[years.length - 1] !== data[i][4]) {\r\n      years.push(data[i][4]);\r\n    }\r\n  }\r\n  function getFlag(countryName) {\r\n    if (!countryName) {\r\n      return '';\r\n    }\r\n    return (\r\n        flags.find(function (item) {\r\n          return item.name === countryName;\r\n        }) || {}\r\n    ).emoji;\r\n  }\r\n  let startIndex = 10;\r\n  let startYear = years[startIndex];\r\n  option = {\r\n    grid: {\r\n      top: 10,\r\n      bottom: 30,\r\n      left: 150,\r\n      right: 80\r\n    },\r\n    xAxis: {\r\n      max: 'dataMax',\r\n      axisLabel: {\r\n        formatter: function (n) {\r\n          return Math.round(n) + '';\r\n        }\r\n      }\r\n    },\r\n    dataset: {\r\n      source: data.slice(1).filter(function (d) {\r\n        return d[4] === startYear;\r\n      })\r\n    },\r\n    yAxis: {\r\n      type: 'category',\r\n      inverse: true,\r\n      max: 10,\r\n      axisLabel: {\r\n        show: true,\r\n        fontSize: 14,\r\n        formatter: function (value) {\r\n          return value + '{flag|' + getFlag(value) + '}';\r\n        },\r\n        rich: {\r\n          flag: {\r\n            fontSize: 25,\r\n            padding: 5\r\n          }\r\n        }\r\n      },\r\n      animationDuration: 300,\r\n      animationDurationUpdate: 300\r\n    },\r\n    series: [\r\n      {\r\n        realtimeSort: true,\r\n        seriesLayoutBy: 'column',\r\n        type: 'bar',\r\n        itemStyle: {\r\n          color: function (param) {\r\n            return countryColors[param.value[3]] || '#5470c6';\r\n          }\r\n        },\r\n        encode: {\r\n          x: dimension,\r\n          y: 3\r\n        },\r\n        label: {\r\n          show: true,\r\n          precision: 1,\r\n          position: 'right',\r\n          valueAnimation: true,\r\n          fontFamily: 'monospace'\r\n        }\r\n      }\r\n    ],\r\n    // Disable init animation.\r\n    animationDuration: 0,\r\n    animationDurationUpdate: updateFrequency,\r\n    animationEasing: 'linear',\r\n    animationEasingUpdate: 'linear',\r\n    graphic: {\r\n      elements: [\r\n        {\r\n          type: 'text',\r\n          right: 160,\r\n          bottom: 60,\r\n          style: {\r\n            text: startYear,\r\n            font: 'bolder 80px monospace',\r\n            fill: 'rgba(100, 100, 100, 0.25)'\r\n          },\r\n          z: 100\r\n        }\r\n      ]\r\n    }\r\n  };\r\n  // console.log(option);\r\n  myChart.setOption(option);\r\n  for (let i = startIndex; i < years.length - 1; ++i) {\r\n    (function (i) {\r\n      setTimeout(function () {\r\n        updateYear(years[i + 1]);\r\n      }, (i - startIndex) * updateFrequency);\r\n    })(i);\r\n  }\r\n  function updateYear(year) {\r\n    let source = data.slice(1).filter(function (d) {\r\n      return d[4] === year;\r\n    });\r\n    option.series[0].data = source;\r\n    option.graphic.elements[0].style.text = year;\r\n    myChart.setOption(option);\r\n  }\r\n});\r\n\r\noption && myChart.setOption(option);\r\nexport default {\r\n  name: \"Time_SpaceAnalysis\"\r\n\r\n}\r\n</script>\r\n\r\n\r\n<style scoped>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}