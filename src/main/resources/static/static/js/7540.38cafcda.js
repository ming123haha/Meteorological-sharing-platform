"use strict";(self["webpackChunkeco_friendly"]=self["webpackChunkeco_friendly"]||[]).push([[7540],{7540:function(e,t,s){s.r(t),s.d(t,{execute:function(){return o}});var r=s(22130),a=s(8693);let n;function o(e,t){let s=t.responseType;s?"array-buffer"!==s&&"blob"!==s&&"json"!==s&&"native"!==s&&"native-request-init"!==s&&"text"!==s&&(s="text"):s="json",t.responseType=s;const o=(0,a.Wg)(t.signal);return delete t.signal,globalThis.invokeStaticMessage("request",{url:e,options:t},{signal:o}).then((async a=>{let i,l,u,c,f;if(a.data)if(a.data instanceof ArrayBuffer){if(!("json"!==s&&"text"!==s&&"blob"!==s||(i=new Blob([a.data]),"json"!==s&&"text"!==s||(n||(n=new FileReaderSync),c=n.readAsText(i),"json"!==s)))){try{l=JSON.parse(c||null)}catch(b){const s={...b,url:e,requestOptions:t};throw new r.Z("request:server",b.message,s)}if(l.error){const s={...l.error,url:e,requestOptions:t};throw new r.Z("request:server",l.error.message,s)}}}else"native"===s&&(a.data.signal=o,u=await fetch(a.data.url,a.data));switch(s){case"blob":f=i;break;case"json":f=l;break;case"native":f=u;break;case"text":f=c;break;default:f=a.data}return{data:f,requestOptions:t,ssl:a.ssl,url:e}}))}}}]);
//# sourceMappingURL=7540.38cafcda.js.map