"use strict";(self["webpackChunkeco_friendly"]=self["webpackChunkeco_friendly"]||[]).push([[1660],{31660:function(e,r,t){t.r(r),t.d(r,{default:function(){return V}});t(26699);var i=t(61445),s=t(94848),a=t(17426),o=t(22130),n=t(30374),l=t(11536),y=t(8693),p=t(74823),u=t(92454),c=t(58006),h=(t(15055),t(81653),t(94315)),m=t(62269),d=t(77623),b=t(73261),f=t(60549),g=t(50157),v=t(93592),S=t(36421),x=t(45181),_=t(59013),C=t(20694),I=t(18678),O=t(80397),L=t(35894),w=t(44283),E=t(82232),N=t(23706),P=t(47711),D=t(28161),M=t(12799),F=t(61804),R=t(8426),T=t(83437),J=t(24653);let j=class extends((0,I.h)((0,D.n)((0,N.M)((0,P.x)((0,_.O)((0,C.Y)((0,L.q)((0,w.I)((0,p.R)((0,E.Q)((0,x.V)((0,O.N)((0,n.p)(S.Z)))))))))))))){constructor(...e){super(...e),this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return"string"==typeof e?{url:e,...r}:e}load(e){const r=(0,y.pC)(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(u.r9).then((()=>this._fetchService(r)))),Promise.resolve(this)}readImageFormat(e,r){const t=r.supportedImageFormatTypes;return t&&t.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,t,i){if(!this.loaded||!e)return;const s=e.slice().reverse().flatten((({sublayers:e})=>e&&e.toArray().reverse())).toArray();let a=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap.supportsDynamicLayers){const e=(0,f.M9)(i.origin);if(e===f.s3.PORTAL_ITEM){const e=this.createSublayersForOrigin("service").sublayers;a=(0,T.QV)(s,e,f.s3.SERVICE)}else if(e>f.s3.PORTAL_ITEM){const e=this.createSublayersForOrigin("portal-item");a=(0,T.QV)(s,e.sublayers,(0,f.M9)(e.origin))}}const o=[],n={writeSublayerStructure:a,...i};let l=a;s.forEach((e=>{const r=e.write({},n);o.push(r),l=l||"user"===e.originOf("visible")})),o.some((e=>Object.keys(e).length>1))&&(r.layers=o),l&&(r.visibleLayers=s.filter((e=>e.visible)).map((e=>e.id)))}createExportImageParameters(e,r,t,i){const s=i&&i.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const a=new F.R({layer:this,floors:i?.floors,scale:(0,v.yZ)({extent:e,width:r})*s}),o=a.toJSON();a.destroy();const n=!i||!i.rotation||this.version<10.3?{}:{rotation:-i.rotation},l=e&&e.spatialReference,y=l.wkid||JSON.stringify(l.toJSON());o.dpi*=s;const p={};if(i?.timeExtent){const{start:e,end:r}=i.timeExtent.toJSON();p.time=e&&r&&e===r?""+e:`${null==e?"null":e},${null==r?"null":r}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(p.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:y,imageSR:y,size:r+","+t,...o,...n,...p}}async fetchImage(e,r,t,i){const a={responseType:"image",signal:i?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(e,r,t,i),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},n=this.parsedUrl.path+"/export";if(null!=a.query.dynamicLayers&&!this.capabilities.exportMap.supportsDynamicLayers)throw new o.Z("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:a.query});return(0,s["default"])(n,a).then((e=>e.data)).catch((e=>{if((0,u.D_)(e))throw e;throw new o.Z("mapimagelayer:image-fetch-error",`Unable to load image: ${n}`,{error:e})}))}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:t}=await(0,s["default"])(this.url,r),{extent:i,fullExtent:o,timeExtent:n}=t,l=i||o;return{fullExtent:l&&g.Z.fromJSON(l),timeExtent:n&&a.Z.fromJSON({start:n[0],end:n[1]})}}loadAll(){return(0,l.G)(this,(e=>{e(this.allSublayers)}))}serviceSupportsSpatialReference(e){return(0,J.D)(this,e)}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:t}=await(0,s["default"])(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});t&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}};(0,i._)([(0,c.Cb)({type:Boolean})],j.prototype,"datesInUnknownTimezone",void 0),(0,i._)([(0,c.Cb)()],j.prototype,"dpi",void 0),(0,i._)([(0,c.Cb)()],j.prototype,"gdbVersion",void 0),(0,i._)([(0,c.Cb)()],j.prototype,"imageFormat",void 0),(0,i._)([(0,m.r)("imageFormat",["supportedImageFormatTypes"])],j.prototype,"readImageFormat",null),(0,i._)([(0,c.Cb)({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],j.prototype,"imageMaxHeight",void 0),(0,i._)([(0,c.Cb)({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],j.prototype,"imageMaxWidth",void 0),(0,i._)([(0,c.Cb)()],j.prototype,"imageTransparency",void 0),(0,i._)([(0,c.Cb)({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],j.prototype,"isReference",void 0),(0,i._)([(0,c.Cb)({json:{read:!1,write:!1}})],j.prototype,"labelsVisible",void 0),(0,i._)([(0,c.Cb)({type:["ArcGISMapServiceLayer"]})],j.prototype,"operationalLayerType",void 0),(0,i._)([(0,c.Cb)({json:{read:!1,write:!1}})],j.prototype,"popupEnabled",void 0),(0,i._)([(0,c.Cb)()],j.prototype,"sourceJSON",void 0),(0,i._)([(0,c.Cb)({json:{write:{ignoreOrigin:!0}}})],j.prototype,"sublayers",void 0),(0,i._)([(0,b.c)("sublayers",{layers:{type:[R.Z]},visibleLayers:{type:[h.z8]}})],j.prototype,"writeSublayers",null),(0,i._)([(0,c.Cb)({type:["show","hide","hide-children"]})],j.prototype,"listMode",void 0),(0,i._)([(0,c.Cb)({json:{read:!1},readOnly:!0,value:"map-image"})],j.prototype,"type",void 0),(0,i._)([(0,c.Cb)(M.HQ)],j.prototype,"url",void 0),j=(0,i._)([(0,d.j)("esri.layers.MapImageLayer")],j);const V=j},61804:function(e,r,t){t.d(r,{R:function(){return m}});var i=t(61445),s=t(92698),a=t(30374),o=t(8693),n=t(70237),l=t(58006),y=(t(15055),t(81653),t(94315),t(77623)),p=t(12799),u=t(56489),c=t(83437);const h={visible:"visibleSublayers",definitionExpression:"layerDefs",labelingInfo:"hasDynamicLayers",labelsVisible:"hasDynamicLayers",opacity:"hasDynamicLayers",minScale:"visibleSublayers",maxScale:"visibleSublayers",renderer:"hasDynamicLayers",source:"hasDynamicLayers"};let m=class extends((0,a.p)(s.Z)){constructor(e){super(e),this.floors=null,this.scale=0}destroy(){this.layer=null}get dynamicLayers(){if(!this.hasDynamicLayers)return null;const e=this.visibleSublayers.map((e=>{const r=(0,u.f)(this.floors,e);return e.toExportImageJSON(r)}));return e.length?JSON.stringify(e):null}get hasDynamicLayers(){return this.layer&&(0,c.FN)(this.visibleSublayers,this.layer.serviceSublayers,this.layer.gdbVersion)}set layer(e){this._get("layer")!==e&&(this._set("layer",e),this.handles.remove("layer"),e&&this.handles.add([e.allSublayers.on("change",(()=>this.notifyChange("visibleSublayers"))),e.on("sublayer-update",(e=>this.notifyChange(h[e.propertyName])))],"layer"))}get layers(){const e=this.visibleSublayers;return e?e.length?"show:"+e.map((e=>e.id)).join(","):"show:-1":null}get layerDefs(){const e=!!this.floors?.length,r=this.visibleSublayers.filter((r=>null!=r.definitionExpression||e&&null!=r.floorInfo));return r.length?JSON.stringify(r.reduce(((e,r)=>{const t=(0,u.f)(this.floors,r),i=(0,n._)(t,r.definitionExpression);return(0,o.pC)(i)&&(e[r.id]=i),e}),{})):null}get version(){this.commitProperty("layers"),this.commitProperty("layerDefs"),this.commitProperty("dynamicLayers"),this.commitProperty("timeExtent");const e=this.layer;return e&&(e.commitProperty("dpi"),e.commitProperty("imageFormat"),e.commitProperty("imageTransparency"),e.commitProperty("gdbVersion")),(this._get("version")||0)+1}get visibleSublayers(){const e=[];if(!this.layer)return e;const r=this.layer.sublayers,t=r=>{const i=this.scale,s=0===i,a=0===r.minScale||i<=r.minScale,o=0===r.maxScale||i>=r.maxScale;r.visible&&(s||a&&o)&&(r.sublayers?r.sublayers.forEach(t):e.unshift(r))};r&&r.forEach(t);const i=this._get("visibleSublayers");return!i||i.length!==e.length||i.some(((r,t)=>e[t]!==r))?e:i}toJSON(){const e=this.layer;let r={dpi:e.dpi,format:e.imageFormat,transparent:e.imageTransparency,gdbVersion:e.gdbVersion||null};return this.hasDynamicLayers&&this.dynamicLayers?r.dynamicLayers=this.dynamicLayers:r={...r,layers:this.layers,layerDefs:this.layerDefs},r}};(0,i._)([(0,l.Cb)({readOnly:!0})],m.prototype,"dynamicLayers",null),(0,i._)([(0,l.Cb)()],m.prototype,"floors",void 0),(0,i._)([(0,l.Cb)({readOnly:!0})],m.prototype,"hasDynamicLayers",null),(0,i._)([(0,l.Cb)()],m.prototype,"layer",null),(0,i._)([(0,l.Cb)({readOnly:!0})],m.prototype,"layers",null),(0,i._)([(0,l.Cb)({readOnly:!0})],m.prototype,"layerDefs",null),(0,i._)([(0,l.Cb)({type:Number})],m.prototype,"scale",void 0),(0,i._)([(0,l.Cb)(p.qG)],m.prototype,"timeExtent",void 0),(0,i._)([(0,l.Cb)({readOnly:!0})],m.prototype,"version",null),(0,i._)([(0,l.Cb)({readOnly:!0})],m.prototype,"visibleSublayers",null),m=(0,i._)([(0,y.j)("esri.layers.mixins.ExportImageParameters")],m)},56489:function(e,r,t){function i(e){const r=e.layer;return"floorInfo"in r&&r.floorInfo?.floorField&&"floors"in e.view?a(e.view.floors,r.floorInfo.floorField):null}function s(e,r){return"floorInfo"in r&&r.floorInfo?.floorField?a(e,r.floorInfo.floorField):null}function a(e,r){if(!e?.length)return null;const t=e.filter((e=>""!==e)).map((e=>`'${e}'`));return t.push("''"),`${r} IN (${t.join(",")}) OR ${r} IS NULL`}t.d(r,{c:function(){return i},f:function(){return s}})}}]);
//# sourceMappingURL=1660.0c05c2b8.js.map