"use strict";(self["webpackChunkeco_friendly"]=self["webpackChunkeco_friendly"]||[]).push([[6814],{54065:function(t,e,i){i.d(e,{Z:function(){return d}});i(48675),i(3462),i(37380),i(1118),i(26699);var s,n=i(61445),l=(i(81653),i(22130)),r=i(60931),o=i(86232),a=i(93622),h=i(8693),c=i(58006),f=i(4524),u=i(77623);const p=a.Z.getLogger("esri.layers.support.PixelBlock");let x=s=class extends r.wq{constructor(t){super(t),this.width=null,this.height=null,this.pixelType="f32",this.validPixelCount=null,this.mask=null,this.maskIsAlpha=!1,this.pixels=null,this.statistics=null}static createEmptyBand(t,e){return new(s.getPixelArrayConstructor(t))(e)}static getPixelArrayConstructor(t){let e;switch(t){case"u1":case"u2":case"u4":case"u8":e=Uint8Array;break;case"u16":e=Uint16Array;break;case"u32":e=Uint32Array;break;case"s8":e=Int8Array;break;case"s16":e=Int16Array;break;case"s32":e=Int32Array;break;case"f32":case"c64":case"c128":case"unknown":e=Float32Array;break;case"f64":e=Float64Array}return e}castPixelType(t){if(!t)return"f32";let e=t.toLowerCase();return["u1","u2","u4"].includes(e)?e="u8":["unknown","u8","s8","u16","s16","u32","s32","f32","f64"].includes(e)||(e="f32"),e}getPlaneCount(){return this.pixels&&this.pixels.length}addData(t){if(!t.pixels||t.pixels.length!==this.width*this.height)throw new l.Z("pixelblock:invalid-or-missing-pixels","add data requires valid pixels array that has same length defined by pixel block width * height");this.pixels||(this.pixels=[]),this.statistics||(this.statistics=[]),this.pixels.push(t.pixels),this.statistics.push(t.statistics||{minValue:null,maxValue:null})}getAsRGBA(){const t=new ArrayBuffer(this.width*this.height*4);switch(this.pixelType){case"s8":case"s16":case"u16":case"s32":case"u32":case"f32":case"f64":this._fillFromNon8Bit(t);break;default:this._fillFrom8Bit(t)}return new Uint8ClampedArray(t)}getAsRGBAFloat(){const t=new Float32Array(this.width*this.height*4);return this._fillFrom32Bit(t),t}updateStatistics(){this.statistics=this.pixels.map((t=>this._calculateBandStatistics(t,this.mask)));const t=this.mask;let e=0;if(t)for(let i=0;i<t.length;i++)t[i]&&e++;else e=this.width*this.height;this.validPixelCount=e}clamp(t){if(!t||"f64"===t||"f32"===t)return;let e;switch(t){case"u8":e=[0,255];break;case"u16":e=[0,65535];break;case"u32":e=[0,4294967295];break;case"s8":e=[-128,127];break;case"s16":e=[-32768,32767];break;case"s32":e=[-2147483648,2147483647];break;default:e=[-34e38,34e38]}const[i,n]=e,l=this.pixels,r=this.width*this.height,o=l.length;let a,h,c;const f=[];for(let u=0;u<o;u++){c=s.createEmptyBand(t,r),a=l[u];for(let t=0;t<r;t++)h=a[t],c[t]=h>n?n:h<i?i:h;f.push(c)}this.pixels=f,this.pixelType=t}extractBands(t){if((0,h.Wi)(t)||0===t.length||null==this.pixels||0===this.pixels.length)return this;const e=this.pixels.length,i=t.some((t=>t>=this.pixels.length)),n=e===t.length&&!t.some(((t,e)=>t!==e));return i||n?this:new s({pixelType:this.pixelType,width:this.width,height:this.height,mask:this.mask,validPixelCount:this.validPixelCount,maskIsAlpha:this.maskIsAlpha,pixels:t.map((t=>this.pixels[t])),statistics:this.statistics&&t.map((t=>this.statistics[t]))})}clone(){const t=new s({width:this.width,height:this.height,pixelType:this.pixelType,maskIsAlpha:this.maskIsAlpha,validPixelCount:this.validPixelCount});let e;this.mask&&(this.mask instanceof Uint8Array?t.mask=new Uint8Array(this.mask):t.mask=this.mask.slice(0));const i=s.getPixelArrayConstructor(this.pixelType);if(this.pixels&&this.pixels.length>0){t.pixels=[];const s=this.pixels[0].slice;for(e=0;e<this.pixels.length;e++)t.pixels[e]=s?this.pixels[e].slice(0,this.pixels[e].length):new i(this.pixels[e])}if(this.statistics)for(t.statistics=[],e=0;e<this.statistics.length;e++)t.statistics[e]=(0,o.d9)(this.statistics[e]);return t}_fillFrom8Bit(t){const{mask:e,maskIsAlpha:i,pixels:s}=this;if(!t||!s||!s.length)return void p.error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");let n,l,r,o;n=l=r=s[0],s.length>=3?(l=s[1],r=s[2]):2===s.length&&(l=s[1]);const a=new Uint32Array(t),h=this.width*this.height;if(n.length===h)if(e&&e.length===h)if(i)for(o=0;o<h;o++)e[o]&&(a[o]=e[o]<<24|r[o]<<16|l[o]<<8|n[o]);else for(o=0;o<h;o++)e[o]&&(a[o]=255<<24|r[o]<<16|l[o]<<8|n[o]);else for(o=0;o<h;o++)a[o]=255<<24|r[o]<<16|l[o]<<8|n[o];else p.error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.")}_fillFromNon8Bit(t){const{pixels:e,mask:i,statistics:s}=this;if(!t||!e||!e.length)return void p.error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");const n=this.pixelType;let l=1,r=0,o=1;if(s&&s.length>0)r=s.map((t=>t.minValue)).reduce(((t,e)=>Math.min(t,e))),o=s.map((t=>t.maxValue-t.minValue)).reduce(((t,e)=>Math.max(t,e))),l=255/o;else{let t=255;"s8"===n?(r=-128,t=127):"u16"===n?t=65535:"s16"===n?(r=-32768,t=32767):"u32"===n?t=4294967295:"s32"===n?(r=-2147483648,t=2147483647):"f32"===n?(r=-34e38,t=34e38):"f64"===n&&(r=-Number.MAX_VALUE,t=Number.MAX_VALUE),l=255/(t-r)}const a=new Uint32Array(t),h=this.width*this.height;let c,f,u,x,d;if(c=f=u=e[0],c.length!==h)return p.error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.");if(e.length>=2)if(f=e[1],e.length>=3&&(u=e[2]),i&&i.length===h)for(x=0;x<h;x++)i[x]&&(a[x]=255<<24|(u[x]-r)*l<<16|(f[x]-r)*l<<8|(c[x]-r)*l);else for(x=0;x<h;x++)a[x]=255<<24|(u[x]-r)*l<<16|(f[x]-r)*l<<8|(c[x]-r)*l;else if(i&&i.length===h)for(x=0;x<h;x++)d=(c[x]-r)*l,i[x]&&(a[x]=255<<24|d<<16|d<<8|d);else for(x=0;x<h;x++)d=(c[x]-r)*l,a[x]=255<<24|d<<16|d<<8|d}_fillFrom32Bit(t){const{pixels:e,mask:i}=this;if(!t||!e||!e.length)return p.error("getAsRGBAFloat()","Unable to convert to RGBA. The input pixel block is empty.");let s,n,l,r;s=n=l=e[0],e.length>=3?(n=e[1],l=e[2]):2===e.length&&(n=e[1]);const o=this.width*this.height;if(s.length!==o)return p.error("getAsRGBAFloat()","Unable to convert to RGBA. The pixelblock is invalid.");let a=0;if(i&&i.length===o)for(r=0;r<o;r++)t[a++]=s[r],t[a++]=n[r],t[a++]=l[r],t[a++]=1&i[r];else for(r=0;r<o;r++)t[a++]=s[r],t[a++]=n[r],t[a++]=l[r],t[a++]=1}_calculateBandStatistics(t,e){let i=1/0,s=-1/0;const n=t.length;let l,r=0;if(e)for(l=0;l<n;l++)e[l]&&(r=t[l],i=r<i?r:i,s=r>s?r:s);else for(l=0;l<n;l++)r=t[l],i=r<i?r:i,s=r>s?r:s;return{minValue:i,maxValue:s}}};(0,n._)([(0,c.Cb)({json:{write:!0}})],x.prototype,"width",void 0),(0,n._)([(0,c.Cb)({json:{write:!0}})],x.prototype,"height",void 0),(0,n._)([(0,c.Cb)({json:{write:!0}})],x.prototype,"pixelType",void 0),(0,n._)([(0,f.p)("pixelType")],x.prototype,"castPixelType",null),(0,n._)([(0,c.Cb)({json:{write:!0}})],x.prototype,"validPixelCount",void 0),(0,n._)([(0,c.Cb)({json:{write:!0}})],x.prototype,"mask",void 0),(0,n._)([(0,c.Cb)({json:{write:!0}})],x.prototype,"maskIsAlpha",void 0),(0,n._)([(0,c.Cb)({json:{write:!0}})],x.prototype,"pixels",void 0),(0,n._)([(0,c.Cb)({json:{write:!0}})],x.prototype,"statistics",void 0),x=s=(0,n._)([(0,u.j)("esri.layers.support.PixelBlock")],x);const d=x},46814:function(t,e,i){i.d(e,{Kh:function(){return u},Pz:function(){return o},Qh:function(){return v},SJ:function(){return a},Uk:function(){return U},Vl:function(){return b},XV:function(){return h},nk:function(){return l},pW:function(){return m},qF:function(){return r},us:function(){return x},zp:function(){return c}});i(48675),i(3462),i(37380),i(1118);var s=i(8693),n=i(54065);function l(t){return(0,s.pC)(t)&&"esri.layers.support.PixelBlock"===t.declaredClass&&t.pixels&&t.pixels.length>0}function r(t,e){if(!e?.length||!l(t))return t;const i=t.pixels.length;return e&&e.some((t=>t>=i))||1===i&&1===e.length&&0===e[0]?t:i!==e.length||e.some(((t,e)=>t!==e))?new n.Z({pixelType:t.pixelType,width:t.width,height:t.height,mask:t.mask,validPixelCount:t.validPixelCount,maskIsAlpha:t.maskIsAlpha,pixels:e.map((e=>t.pixels[e])),statistics:t.statistics&&e.map((e=>t.statistics[e]))}):t}function o(t){if(!t)return;const e=t.colormap;if(!e||0===e.length)return;const i=e.sort(((t,e)=>t[0]-e[0]));let s=0;i[0][0]<0&&(s=i[0][0]);const n=Math.max(256,i[i.length-1][0]-s+1),l=new Uint8Array(4*n),r=[];let o,a=0,h=0;const c=5===i[0].length;if(n>65536)return i.forEach((t=>{r[t[0]-s]=c?t.slice(1):t.slice(1).concat([255])})),{indexed2DColormap:r,offset:s,alphaSpecified:c};if(t.fillUnspecified)for(o=i[h],a=o[0]-s;a<n;a++)l[4*a]=o[1],l[4*a+1]=o[2],l[4*a+2]=o[3],l[4*a+3]=c?o[4]:255,a===o[0]-s&&(o=h===i.length-1?o:i[++h]);else for(a=0;a<i.length;a++)o=i[a],h=4*(o[0]-s),l[h]=o[1],l[h+1]=o[2],l[h+2]=o[3],l[h+3]=c?o[4]:255;return{indexedColormap:l,offset:s,alphaSpecified:c}}function a(t,e){if(!l(t))return t;if(!e&&(e.indexedColormap||e.indexed2DColormap))return t;const i=t.clone(),s=i.pixels;let n=i.mask;const r=i.width*i.height;if(1!==s.length)return t;const{indexedColormap:o,indexed2DColormap:a,offset:h,alphaSpecified:c}=e,f=o.length-1;let u=0;const p=s[0],x=new Uint8Array(p.length),d=new Uint8Array(p.length),m=new Uint8Array(p.length);let g,y=0;if(o)if(n)for(u=0;u<r;u++)n[u]&&(y=4*(p[u]-h),y<h||y>f?n[u]=0:(x[u]=o[y],d[u]=o[y+1],m[u]=o[y+2],n[u]=o[y+3]));else{for(n=new Uint8Array(r),u=0;u<r;u++)y=4*(p[u]-h),y<h||y>f?n[u]=0:(x[u]=o[y],d[u]=o[y+1],m[u]=o[y+2],n[u]=o[y+3]);i.mask=n}else if(n)for(u=0;u<r;u++)n[u]&&(g=a[p[u]],x[u]=g[0],d[u]=g[1],m[u]=g[2],n[u]=g[3]);else{for(n=new Uint8Array(r),u=0;u<r;u++)g=a[p[u]],x[u]=g[0],d[u]=g[1],m[u]=g[2],n[u]=g[3];i.mask=n}return i.pixels=[x,d,m],i.statistics=null,i.pixelType="u8",i.maskIsAlpha=c,i}function h(t,e){if(!l(t))return null;const{pixels:i,mask:s}=t,r=t.width*t.height,o=i.length;let a=e.lut;const{offset:h}=e;let c,f;a&&1===a[0].length&&(a=i.map((()=>a)));const u=[];let p,x,d;if(h)if(null==s)for(c=0;c<o;c++){for(p=i[c],x=a[c],d=new Uint8Array(r),f=0;f<r;f++)d[f]=x[p[f]-h];u.push(d)}else for(c=0;c<o;c++){for(p=i[c],x=a[c],d=new Uint8Array(r),f=0;f<r;f++)s[f]&&(d[f]=x[p[f]-h]);u.push(d)}else if(null==s)for(c=0;c<o;c++){for(p=i[c],x=a[c],d=new Uint8Array(r),f=0;f<r;f++)d[f]=x[p[f]];u.push(d)}else for(c=0;c<o;c++){for(p=i[c],x=a[c],d=new Uint8Array(r),f=0;f<r;f++)s[f]&&(d[f]=x[p[f]]);u.push(d)}const m=new n.Z({width:t.width,height:t.height,pixels:u,mask:s,pixelType:"u8"});return m.updateStatistics(),m}function c(t,e){if(!l(t))return null;const i=t.clone(),{pixels:s}=i,n=i.width*i.height,r=e.length,o=Math.floor(r/2),a=e[Math.floor(o)],h=s[0];let c,f,u,p,x,d,m=!1;const g=new Uint8Array(n),y=new Uint8Array(n),w=new Uint8Array(n);let k=i.mask;const A=4===e[0].mappedColor.length;for(k||(k=new Uint8Array(n),k.fill(A?255:1),i.mask=k),x=0;x<n;x++)if(k[x]){for(c=h[x],m=!1,d=o,f=a,u=0,p=r-1;p-u>1;){if(c===f.value){m=!0;break}c>f.value?u=d:p=d,d=Math.floor((u+p)/2),f=e[Math.floor(d)]}m||(c===e[u].value?(f=e[u],m=!0):c===e[p].value?(f=e[p],m=!0):c<e[u].value?(m=!1,f=null):c>e[u].value&&(c<e[p].value?(f=e[u],m=!0):p===r-1?(m=!1,f=null):(f=e[p],m=!0))),m?(g[x]=f.mappedColor[0],y[x]=f.mappedColor[1],w[x]=f.mappedColor[2],k[x]=f.mappedColor[3]):g[x]=y[x]=w[x]=k[x]=0}return i.pixels=[g,y,w],i.mask=k,i.pixelType="u8",i.maskIsAlpha=A,i}function f(t,e,i,s,n,l,r,o){return{xmin:n<=i*t?0:n<i*t+t?n-i*t:t,ymin:l<=s*e?0:l<s*e+e?l-s*e:e,xmax:n+r<=i*t?0:n+r<i*t+t?n+r-i*t:t,ymax:l+o<=s*e?0:l+o<s*e+e?l+o-s*e:e}}function u(t,e){if(!t||0===t.length)return null;const i=t.find((t=>t.pixelBlock));if(!i||(0,s.Wi)(i.pixelBlock))return null;const n=(i.extent.xmax-i.extent.xmin)/i.pixelBlock.width,l=(i.extent.ymax-i.extent.ymin)/i.pixelBlock.height,r=.01*Math.min(n,l),o=t.sort(((t,e)=>Math.abs(t.extent.ymax-e.extent.ymax)>r?e.extent.ymax-t.extent.ymax:Math.abs(t.extent.xmin-e.extent.xmin)>r?t.extent.xmin-e.extent.xmin:0)),a=Math.min.apply(null,o.map((t=>t.extent.xmin))),h=Math.min.apply(null,o.map((t=>t.extent.ymin))),c=Math.max.apply(null,o.map((t=>t.extent.xmax))),f=Math.max.apply(null,o.map((t=>t.extent.ymax))),u={x:Math.round((e.xmin-a)/n),y:Math.round((f-e.ymax)/l)},p={width:Math.round((c-a)/n),height:Math.round((f-h)/l)},d={width:Math.round((e.xmax-e.xmin)/n),height:Math.round((e.ymax-e.ymin)/l)};return Math.round(p.width/i.pixelBlock.width)*Math.round(p.height/i.pixelBlock.height)!==o.length||u.x<0||u.y<0||p.width<d.width||p.height<d.height?null:{extent:e,pixelBlock:x(o.map((t=>t.pixelBlock)),p,{clipOffset:u,clipSize:d})}}function p(t,e,i,s,n,l){const{width:r,height:o}=i.block,{x:a,y:h}=i.offset,{width:c,height:u}=i.mosaic,p=f(r,o,s,n,a,h,c,u);let x=0,d=0;if(l){const t=l.hasGCSSShiftTransform?360:l.halfWorldWidth,e=r*l.resolutionX,i=l.startX+s*e,n=i+e;i<t&&n>t?d=l.rightPadding:i>=t&&(x=l.leftMargin-l.rightPadding,d=0)}if(p.xmax-=d,"number"!=typeof e)for(let f=p.ymin;f<p.ymax;f++){const i=(n*o+f-h)*c+(s*r-a)+x,l=f*r;for(let s=p.xmin;s<p.xmax;s++)t[i+s]=e[l+s]}else for(let f=p.ymin;f<p.ymax;f++){const i=(n*o+f-h)*c+(s*r-a)+x;for(let s=p.xmin;s<p.xmax;s++)t[i+s]=e}}function x(t,e,i={}){const{clipOffset:r,clipSize:o,alignmentInfo:a,blockWidths:h}=i;if(h)return d(t,e,{blockWidths:h});const c=t.find((t=>l(t)));if((0,s.Wi)(c))return null;const f=o?o.width:e.width,u=o?o.height:e.height,x=c.width,m=c.height,g=e.width/x,y=e.height/m,w={offset:r||{x:0,y:0},mosaic:o||e,block:{width:x,height:m}},k=c.pixelType,A=n.Z.getPixelArrayConstructor(k),M=c.pixels.length,b=[];let C,v,U;for(let s=0;s<M;s++){v=new A(f*u);for(let e=0;e<y;e++)for(let i=0;i<g;i++){const n=t[e*g+i];l(n)&&(C=n.pixels[s],p(v,C,w,i,e,a))}b.push(v)}if(t.some((t=>(0,s.Wi)(t)||t.mask&&t.mask.length>0))){U=new Uint8Array(f*u);for(let e=0;e<y;e++)for(let i=0;i<g;i++){const n=t[e*g+i],l=(0,s.pC)(n)?n.mask:null;p(U,l||(n?1:0),w,i,e,a)}}const B=new n.Z({width:f,height:u,pixels:b,pixelType:k,mask:U});return B.updateStatistics(),B}function d(t,e,i){const r=t.find((t=>(0,s.pC)(t)));if((0,s.Wi)(r))return null;const o=t.some((t=>!(0,s.pC)(t)||!!t.mask)),{width:a,height:h}=e,c=o?new Uint8Array(a*h):null,{blockWidths:f}=i,u=[],p=r.getPlaneCount(),x=n.Z.getPixelArrayConstructor(r.pixelType);if(o)for(let s=0,n=0;s<t.length;n+=f[s],s++){const e=t[s];if(!l(e))continue;const i=e.mask;for(let t=0;t<h;t++)for(let l=0;l<f[s];l++)c[t*a+l+n]=null==i?255:i[t*e.width+l]}for(let s=0;s<p;s++){const e=new x(a*h);for(let i=0,n=0;i<t.length;n+=f[i],i++){const r=t[i];if(!l(r))continue;const o=r.pixels[s];if(null!=o)for(let t=0;t<h;t++)for(let s=0;s<f[i];s++)e[t*a+s+n]=o[t*r.width+s]}u.push(e)}const d=new n.Z({width:a,height:h,mask:c,pixels:u,pixelType:r.pixelType});return d.updateStatistics(),d}function m(t,e,i){if(!l(t))return null;const{width:s,height:n}=t,r=e.x,o=e.y,a=i.width+r,h=i.height+o;if(r<0||o<0||a>s||h>n)return t;if(0===r&&0===o&&a===s&&h===n)return t;t.mask||(t.mask=new Uint8Array(s*n));const c=t.mask;for(let l=0;l<n;l++){const t=l*s;for(let e=0;e<s;e++)c[t+e]=l<o||l>=h||e<r||e>=a?0:1}return t.updateStatistics(),t}function g(t){if(!l(t))return null;const e=t.clone(),{width:i,height:s,pixels:n,mask:r}=t,o=n[0],a=e.pixels[0];for(let l=2;l<s-1;l++){const t=new Map;for(let s=l-2;s<l+2;s++)for(let e=0;e<4;e++){const n=s*i+e;k(t,o[n],r?r[n]:1)}a[l*i]=y(t),a[l*i+1]=a[l*i+2]=a[l*i];let e=3;for(;e<i-1;e++){let s=(l-2)*i+e+1;k(t,o[s],r?r[s]:1),s=(l-1)*i+e+1,k(t,o[s],r?r[s]:1),s=l*i+e+1,k(t,o[s],r?r[s]:1),s=(l+1)*i+e+1,k(t,o[s],r?r[s]:1),s=(l-2)*i+e-3,w(t,o[s],r?r[s]:1),s=(l-1)*i+e-3,w(t,o[s],r?r[s]:1),s=l*i+e-3,w(t,o[s],r?r[s]:1),s=(l+1)*i+e-3,w(t,o[s],r?r[s]:1),a[l*i+e]=y(t)}a[l*i+e+1]=a[l*i+e]}for(let l=0;l<i;l++)a[l]=a[i+l]=a[2*i+l],a[(s-1)*i+l]=a[(s-2)*i+l];return e.updateStatistics(),e}function y(t){if(0===t.size)return 0;let e=0,i=-1,s=0;const n=t.keys();let l=n.next();for(;!l.done;)s=t.get(l.value),s>e&&(i=l.value,e=s),l=n.next();return i}function w(t,e,i){if(0===i)return;const s=t.get(e);1===s?t.delete(e):t.set(e,s-1)}function k(t,e,i){0!==i&&t.set(e,t.has(e)?t.get(e)+1:1)}function A(t,e,i){let{x:s,y:r}=e;const{width:o,height:a}=i;if(0===s&&0===r&&a===t.height&&o===t.width)return t;const{width:h,height:c}=t,f=Math.max(0,r),u=Math.max(0,s),p=Math.min(s+o,h),x=Math.min(r+a,c);if(p<0||x<0||!l(t))return null;s=Math.max(0,-s),r=Math.max(0,-r);const{pixels:d,mask:m}=t,g=o*a,y=d.length,w=[];for(let l=0;l<y;l++){const e=d[l],i=n.Z.createEmptyBand(t.pixelType,g);for(let t=f;t<x;t++){const n=t*h;let l=(t+r-f)*o+s;for(let t=u;t<p;t++)i[l++]=e[n+t]}w.push(i)}const k=new Uint8Array(g);for(let n=f;n<x;n++){const t=n*h;let e=(n+r-f)*o+s;for(let i=u;i<p;i++)k[e++]=m?m[t+i]:1}const A=new n.Z({width:i.width,height:i.height,pixelType:t.pixelType,pixels:w,mask:k});return A.updateStatistics(),A}function M(t,e=!0){if(!l(t))return null;const{pixels:i,width:s,height:r,mask:o,pixelType:a}=t,h=[],c=Math.round(s/2),f=Math.round(r/2),u=r-1,p=s-1;for(let l=0;l<i.length;l++){const t=i[l],o=n.Z.createEmptyBand(a,c*f);let x=0;for(let i=0;i<r;i+=2)for(let n=0;n<s;n+=2){const l=t[i*s+n];if(e){const e=n===p?l:t[i*s+n+1],r=i===u?l:t[i*s+n+s],a=n===p?r:i===u?e:t[i*s+n+s+1];o[x++]=(l+e+r+a)/4}else o[x++]=l}h.push(o)}let x=null;if(o){x=new Uint8Array(c*f);let t=0;for(let i=0;i<r;i+=2)for(let n=0;n<s;n+=2){const l=o[i*s+n];if(e){const e=n===p?l:o[i*s+n+1],r=i===u?l:o[i*s+n+s],a=n===p?r:i===u?e:o[i*s+n+s+1];x[t++]=l*e*r*a?1:0}else x[t++]=l}}return new n.Z({width:c,height:f,pixelType:a,pixels:h,mask:x})}function b(t,e,i){if(!l(t))return null;const{width:s,height:n}=e;let{width:r,height:o}=t;const a=new Map,h={x:0,y:0},c=null==i?1:1+i;let f=t;for(let l=0;l<c;l++){const t=Math.ceil(r/s),i=Math.ceil(o/n);for(let r=0;r<i;r++){h.y=r*n;for(let i=0;i<t;i++){h.x=i*s;const t=A(f,h,e);a.set(`${l}/${r}/${i}`,t)}}l<c-1&&(f=M(f)),r=Math.round(r/2),o=Math.round(o/2)}return a}function C(t,e,i,s,n=.5){const{width:l,height:r}=t,{width:o,height:a}=e,h=s.cols,c=s.rows,f=Math.ceil(o/h-.1/h),u=Math.ceil(a/c-.1/c);let p,x,d,m,g,y,w;const k=f*h,A=k*u*c,M=new Float32Array(A),b=new Float32Array(A),C=new Uint32Array(A),v=new Uint32Array(A);let U,B,T=0;for(let _=0;_<u;_++)for(let t=0;t<f;t++){p=12*(_*f+t),x=i[p],d=i[p+1],m=i[p+2],g=i[p+3],y=i[p+4],w=i[p+5];for(let e=0;e<c;e++){T=(_*c+e)*k+t*h,B=(e+.5)/c;for(let t=0;t<e;t++)U=(t+.5)/h,M[T+t]=(x*U+d*B+m)*l-n,b[T+t]=(g*U+y*B+w)*r-n,C[T+t]=Math.round(M[T+t]),v[T+t]=Math.round(b[T+t])}p+=6,x=i[p],d=i[p+1],m=i[p+2],g=i[p+3],y=i[p+4],w=i[p+5];for(let e=0;e<c;e++){T=(_*c+e)*k+t*h,B=(e+.5)/c;for(let t=e;t<h;t++)U=(t+.5)/h,M[T+t]=(x*U+d*B+m)*l-n,b[T+t]=(g*U+y*B+w)*r-n,C[T+t]=Math.round(M[T+t]),v[T+t]=Math.round(b[T+t])}}return{offsets_x:M,offsets_y:b,offsets_xi:C,offsets_yi:v,gridWidth:k}}function v(t,e){const{coefficients:i,spacing:s}=e,{offsets_x:n,offsets_y:l,gridWidth:r}=C(t,t,i,{rows:s[0],cols:s[1]},.5),{width:o,height:a}=t,h=new Float32Array(o*a),c=180/Math.PI;for(let f=0;f<a;f++)for(let t=0;t<o;t++){const e=f*r+t,i=0===f?e:e-r,s=f===a-1?e:e+r,u=n[i]-n[s],p=l[s]-l[i];if(isNaN(u)||isNaN(p))h[f*o+t]=90;else{let e=Math.atan2(p,u)*c;e=(360+e)%360,h[f*o+t]=e}}return h}function U(t,e,i,s,r="nearest"){if(!l(t))return null;"majority"===r&&(t=g(t));const{pixels:o,mask:a,pixelType:h}=t,c=t.width,f=t.height,u=n.Z.getPixelArrayConstructor(h),p=o.length,{width:x,height:d}=e;let m=!1;for(let n=0;n<i.length;n+=3)-1===i[n]&&-1===i[n+1]&&-1===i[n+2]&&(m=!0);const{offsets_x:y,offsets_y:w,offsets_xi:k,offsets_yi:A,gridWidth:M}=C({width:c,height:f},e,i,s,"majority"===r?0:.5);let b;const v=(t,e,i)=>{const s=t instanceof Float32Array||t instanceof Float64Array?0:.5;for(let n=0;n<d;n++){b=n*M;for(let l=0;l<x;l++){if(y[b]<0||w[b]<0)t[n*x+l]=0;else if(i)t[n*x+l]=e[k[b]+A[b]*c];else{const i=Math.floor(y[b]),r=Math.floor(w[b]),o=Math.ceil(y[b]),h=Math.ceil(w[b]),f=y[b]-i,u=w[b]-r;if(!a||a[i+r*c]&&a[i+r*c]&&a[i+h*c]&&a[o+h*c]){const a=(1-f)*e[i+r*c]+f*e[o+r*c],p=(1-f)*e[i+h*c]+f*e[o+h*c];t[n*x+l]=(1-u)*a+u*p+s}else t[n*x+l]=e[k[b]+A[b]*c]}b++}}},U=[];let B;for(let n=0;n<p;n++)B=new u(x*d),v(B,o[n],"nearest"===r||"majority"===r),U.push(B);const T=new n.Z({width:x,height:d,pixelType:h,pixels:U});if(a)T.mask=new Uint8Array(x*d),v(T.mask,a,!0);else if(m){T.mask=new Uint8Array(x*d);for(let t=0;t<x*d;t++)T.mask[t]=y[t]<0||w[t]<0?0:1}return T.updateStatistics(),T}}}]);
//# sourceMappingURL=6814.4ab95f03.js.map